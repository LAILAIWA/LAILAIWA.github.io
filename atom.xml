<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沂水博客</title>
  
  <subtitle>编程和心历记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linyishui.top/"/>
  <updated>2019-07-03T07:40:53.044Z</updated>
  <id>http://linyishui.top/</id>
  
  <author>
    <name>沂水</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro+Jwt+Redis实现登录权限管理系统</title>
    <link href="http://linyishui.top/2019062101.html"/>
    <id>http://linyishui.top/2019062101.html</id>
    <published>2019-06-21T07:31:36.000Z</published>
    <updated>2019-07-03T07:40:53.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a><strong>前文</strong></h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a><strong>POM</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a><strong>application.properties</strong></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置网络</span></span><br><span class="line">server.<span class="attribute">cookie-domain</span>=localhost</span><br><span class="line">server.<span class="attribute">cookie-path</span>=/xxx</span><br><span class="line">server.<span class="attribute">port</span>=8443</span><br><span class="line">server.port.<span class="attribute">http</span>=8080</span><br><span class="line">server.ssl.<span class="attribute">key-store</span>=server.keystore</span><br><span class="line">server.ssl.<span class="attribute">key-alias</span>=tomcat</span><br><span class="line">server.ssl.<span class="attribute">enabled</span>=<span class="literal">true</span></span><br><span class="line">server.ssl.<span class="attribute">key-store-password</span>=123456</span><br><span class="line">server.ssl.<span class="attribute">key-store-type</span>=JKS</span><br><span class="line"></span><br><span class="line"><span class="comment"># token有效时间，单位分钟 24*60=1440</span></span><br><span class="line">token.<span class="attribute">tokenexpiretime</span>=1440</span><br><span class="line"><span class="comment"># 更新令牌时间 2*60=120</span></span><br><span class="line">token.<span class="attribute">refreshchecktime</span>=120</span><br><span class="line"><span class="comment"># shiro缓存有效期，单位分钟,2*60=120</span></span><br><span class="line">token.<span class="attribute">shirocacheexpiretime</span>=120</span><br><span class="line"><span class="comment"># token加密密钥</span></span><br><span class="line">token.<span class="attribute">secretkey</span>=wxvideoquxue123</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">spring.redis.<span class="attribute">database</span>=0</span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line">spring.redis.<span class="attribute">host</span>=127.0.0.1</span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line">spring.redis.<span class="attribute">port</span>=6379</span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-active</span>=8</span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-wait</span>=-1</span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-idle</span>=8</span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">min-idle</span>=0</span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">spring.redis.<span class="attribute">timeout</span>=1000</span><br></pre></td></tr></table></figure><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a><strong>Application</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ServletComponentScan</span></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@EnableCaching</span> <span class="comment">//开启声明式缓存</span></span><br><span class="line"><span class="variable">@EnableConfigurationProperties</span>(&#123;JWTProperties.class&#125;)</span><br><span class="line">public class WxvideoserverApplication extends SpringBootServletInitializer &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现SpringBootServletInitializer可以让spring-boot项目在web容器中运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">        <span class="selector-tag">builder</span><span class="selector-class">.sources</span>(this.getClass());</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">super</span><span class="selector-class">.configure</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(WxvideoserverApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量和工具类"><a href="#常量和工具类" class="headerlink" title="常量和工具类"></a><strong>常量和工具类</strong></h2><h3 id="基本常量"><a href="#基本常量" class="headerlink" title="基本常量"></a><strong>基本常量</strong></h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpireTime</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ExpireTime() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEN_SEC = <span class="number">10</span>;<span class="comment">//10s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THIRTY_SEC = <span class="number">30</span>;<span class="comment">//30s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_MINUTE = <span class="number">60</span>;<span class="comment">//一分钟</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_HOUR = <span class="number">60</span> * <span class="number">60</span>;<span class="comment">//一小时</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TWELVE_HOUR = <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>;<span class="comment">//十二小时，单位s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_DAY = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;<span class="comment">//二十四小时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安全相关name"><a href="#安全相关name" class="headerlink" title="安全相关name"></a><strong>安全相关name</strong></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SecurityConsts &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加盐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN_SALT(<span class="string">"storyweb-bp"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request请求头属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUEST_AUTH_HEADER(<span class="string">"Authorization"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT-userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USERID(<span class="string">"userId"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组织ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORG_ID_TOKEN(<span class="string">"orgIdToken"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务线ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BL_ID_TOKEN(<span class="string">"blIdToken"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro redis 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_CACHE(<span class="string">"storyweb-bp:cache:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis-key-前缀-shiro:refresh_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_REFRESH_TOKEN(<span class="string">"storyweb-bp:refresh_token:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis-key-前缀-shiro:logout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_LOGOUT_TOKEN(<span class="string">"storyweb-bp:logout:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT-currentTimeMillis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CURRENT_TIME_MILLIS(<span class="string">"currentTimeMillis"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    SecurityConsts(String <span class="keyword">value</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UnauthorizedException"><a href="#UnauthorizedException" class="headerlink" title="UnauthorizedException"></a><strong>UnauthorizedException</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UnauthorizedException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> errMsg;</span><br><span class="line"></span><br><span class="line">    public <span class="type">UnauthorizedException</span>(<span class="type">CodeEnums</span> codeEnums) &#123;</span><br><span class="line">        <span class="keyword">super</span>(codeEnums.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = codeEnums.getCode();</span><br><span class="line">        <span class="keyword">this</span>.errMsg = codeEnums.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">UnauthorizedException</span>(<span class="type">String</span> errMsg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(errMsg);</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shiro工具类"><a href="#shiro工具类" class="headerlink" title="shiro工具类"></a><strong>shiro工具类</strong></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroKit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMES_DELIMETER = <span class="string">","</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加盐参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String hashAlgorithmName = <span class="string">"MD5"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> hashIterations = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shiro密码加密工具类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> credentials 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saltSource  密码盐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">md5</span><span class="params">(String credentials, String saltSource)</span> </span>&#123;</span><br><span class="line">        ByteSource salt = <span class="keyword">new</span> Md5Hash(saltSource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt, hashIterations).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机盐值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">getRandomSalt</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        String base = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt(base.length());</span><br><span class="line">            sb.append(base.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> sb.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证密码是否一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5cipherText</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">checkMd5Password</span><span class="params">(String password, String salt, String md5cipherText)</span> </span>&#123;</span><br><span class="line">        ByteSource credentialsSalt = <span class="keyword">new</span> Md5Hash(salt);</span><br><span class="line">        <span class="comment">//通用散列加密方法</span></span><br><span class="line">        SimpleHash hash = <span class="keyword">new</span> SimpleHash(ShiroKit.hashAlgorithmName, password, credentialsSalt, ShiroKit.hashIterations);</span><br><span class="line">        <span class="keyword">return</span> md5cipherText.equals(hash.toHex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前 Subject</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Subject <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> SecurityUtils.<span class="title">getSubject</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于该角色？,使用时与lacksRole 搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleName 角色名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于该角色：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; roleName != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; roleName.length() &gt; <span class="number">0</span> &amp;&amp; getSubject().hasRole(roleName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleName 角色名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 不属于该角色：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">lacksRole</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !hasRole(roleName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于以下任意一个角色。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleNames 角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于:true,否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasAnyRoles</span><span class="params">(String roleNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAnyRole = <span class="keyword">false</span>;</span><br><span class="line">        Subject subject = getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject != <span class="keyword">null</span> &amp;&amp; roleNames != <span class="keyword">null</span> &amp;&amp; roleNames.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String role : roleNames.split(NAMES_DELIMETER)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subject.hasRole(role.trim())) &#123;</span><br><span class="line">                    hasAnyRole = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasAnyRole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于以下所有角色。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleNames 角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于:true,否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasAllRoles</span><span class="params">(String roleNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAllRole = <span class="keyword">true</span>;</span><br><span class="line">        Subject subject = getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject != <span class="keyword">null</span> &amp;&amp; roleNames != <span class="keyword">null</span> &amp;&amp; roleNames.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String role : roleNames.split(NAMES_DELIMETER)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!subject.hasRole(role.trim())) &#123;</span><br><span class="line">                    hasAllRole = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasAllRole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否拥有指定权限,使用时与lacksPermission 搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permission 权限名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拥有权限：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; permission != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; permission.length() &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; getSubject().isPermitted(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permission 权限名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拥有权限：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">lacksPermission</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !hasPermission(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。与notAuthenticated搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 通过身份验证：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; getSubject().isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没有通过身份验证：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">notAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证通过或已记住的用户。与guset搭配使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户：true，否则 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; getSubject().getPrincipal() != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。用user搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 访客：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isGuest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出当前用户信息，通常为登录帐号信息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">principal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSubject() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object principal = getSubject().getPrincipal();</span><br><span class="line">            <span class="function"><span class="keyword">return</span> principal.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a><strong>JWT工具类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JWTUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jwtUtil = <span class="keyword">this</span>;</span><br><span class="line">        jwtUtil.jwtProperties = <span class="keyword">this</span>.jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String token)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String secret = getClaim(token, SecurityConsts.USERID.getValue()) + jwtUtil.jwtProperties.getSecretKey();</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                .build();</span><br><span class="line">        verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Token中的信息无需secret解密也能获得</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claim</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClaim</span><span class="params">(String token, String claim)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(claim).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名,5min后过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId            用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentTimeMillis 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String userId, String currentTimeMillis)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">// 帐号加JWT私钥加密</span></span><br><span class="line">        String secret = userId + jwtUtil.jwtProperties.getSecretKey();</span><br><span class="line">        <span class="comment">// 此处过期时间，单位：毫秒</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + jwtUtil.jwtProperties.getTokenExpireTime() * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(SecurityConsts.USERID.getValue(), userId)</span><br><span class="line">                .withClaim(SecurityConsts.CURRENT_TIME_MILLIS.getValue(), currentTimeMillis)</span><br><span class="line">                .withExpiresAt(date)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis工具类"><a href="#Jedis工具类" class="headerlink" title="Jedis工具类"></a><strong>Jedis工具类</strong></h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class JedisUtils &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; redisTemplate;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsStr;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> SetOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsSet;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> ZSetOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsZSet;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    ListOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsList;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> HashOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">Object</span>&gt; valOpsHash;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveString(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存的集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToSet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        valOpsSet.<span class="built_in">add</span>(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Set中获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return keyValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getFromSet(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.pop(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 key的值保存为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。 SETNX 是『SET</span></span><br><span class="line"><span class="comment">     * if Not eXists』(如果不存在，则 SET)的简写。 &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存成功，返回 true &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存失败，返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> saveNX(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsStr.setIfAbsent(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 key的值保存为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。 SETNX 是『SET</span></span><br><span class="line"><span class="comment">     * if Not eXists』(如果不存在，则 SET)的简写。 &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存成功，返回 true &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存失败，返回 false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param expire 单位：秒</span></span><br><span class="line"><span class="comment">     *               超时时间</span></span><br><span class="line"><span class="comment">     * @return 保存成功，返回 true 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> saveNX(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="built_in">int</span> expire) &#123;</span><br><span class="line">        <span class="built_in">boolean</span> ret = saveNX(<span class="built_in">key</span>, val);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            redisTemplate.expire(<span class="built_in">key</span>, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存（并设置失效时间）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveString(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, val, seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自增变量存入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveSeq(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> seqNo) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line">        valOpsStr.increment(<span class="built_in">key</span>, seqNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将递增浮点数存入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveFloat(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">float</span> data) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line">        valOpsStr.increment(<span class="built_in">key</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存复杂类型数据到缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveObject(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> obj) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, mapper.writeValueAsString(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存复杂类型数据到缓存（并设置失效时间）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveObject(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> obj, <span class="built_in">int</span> seconds) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, mapper.writeValueAsString(obj), seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 存到指定的队列中，不限制队列大小</span></span><br><span class="line"><span class="comment">     * 左进右出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        saveToQueue(<span class="built_in">key</span>, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 存到指定的队列中</span></span><br><span class="line"><span class="comment">     * 左进右出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param size 队列大小限制 0：不限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="keyword">long</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span> &amp;&amp; valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>) &gt;= <span class="built_in">size</span>) &#123;</span><br><span class="line">            valOpsList.rightPop(<span class="built_in">key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        valOpsList.leftPush(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsHash.put(hName, <span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hashMap) &#123;</span><br><span class="line">        valOpsHash.putAll(hName, hashMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取所以值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; hGetAll(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.entries(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, T t) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        hashSet(hName, <span class="built_in">key</span>, mapper.writeValueAsString(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中 只在 key 指定的哈希集中不存在指定的字段时，设置字段的值。如果 key 指定的哈希集不存在，会创建一个新的哈希集并与</span></span><br><span class="line"><span class="comment">     * key 关联。如果字段已存在，该操作无效果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hsetnx(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsHash.putIfAbsent(hName, <span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中 只在 key 指定的哈希集中不存在指定的字段时，设置字段的值。如果 key 指定的哈希集不存在，会创建一个新的哈希集并与</span></span><br><span class="line"><span class="comment">     * key 关联。如果字段已存在，该操作无效果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> hsetnx(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, T t) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        hsetnx(hName, <span class="built_in">key</span>, mapper.writeValueAsString(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的key项</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hdel(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        valOpsHash.delete(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得复杂类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws IOException</span></span><br><span class="line"><span class="comment">     * @throws JsonMappingException</span></span><br><span class="line"><span class="comment">     * @throws JsonParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> getObject(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">String</span> value = valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(value, <span class="keyword">Object</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得复杂类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @param clazz</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws IOException</span></span><br><span class="line"><span class="comment">     * @throws JsonMappingException</span></span><br><span class="line"><span class="comment">     * @throws JsonParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T getObject(<span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">String</span> value = valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(value, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中取得字符串数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 从指定队列里取得数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param size 数据长度</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; getFromQueue(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getFromQueue(<span class="built_in">key</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; getFromQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="built_in">boolean</span> flag = redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.exists(<span class="built_in">key</span>.getBytes());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, <span class="number">0</span>, valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 从指定队列里取得数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> popQueue(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.rightPop(<span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得序列值的下一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getSeqNext(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incr(<span class="built_in">key</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得序列值的下一个，增加 value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getSeqNext(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> value) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incrBy(<span class="built_in">key</span>.getBytes(), value);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将序列值回退一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> getSeqBack(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; connection.decr(<span class="built_in">key</span>.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加浮点数的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double incrFloat(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">double</span> incrBy) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Double&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incrBy(<span class="built_in">key</span>.getBytes(), incrBy);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hash集合里取得</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> hashGet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.<span class="built_in">get</span>(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T hashGet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue((<span class="keyword">String</span>) hashGet(hName, <span class="built_in">key</span>), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否缓存了数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key 数据KEY</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> exists(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.exists(<span class="built_in">key</span>.getBytes());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash集合中是否缓存了数据, 有问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hashExists(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.hasKey(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否缓存在指定的集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isMember(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.isMember(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param string</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delKey(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line"><span class="comment">//        redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; connection.del(key.getBytes()));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> expire(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line">        redisTemplate.expire(<span class="built_in">key</span>, seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出set中所有成员</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param setName</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="keyword">String</span>&gt; listSet(<span class="keyword">String</span> setName) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.members(setName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向set中追加一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param setName</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> appendSet(<span class="keyword">String</span> setName, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsSet.<span class="built_in">add</span>(setName, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向sorted set中追加一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param score</span></span><br><span class="line"><span class="comment">     * @param member</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToSortedset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member, Double score) &#123;</span><br><span class="line">        valOpsZSet.<span class="built_in">add</span>(<span class="built_in">key</span>, member, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据成员名取得sorted sort分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key    set名</span></span><br><span class="line"><span class="comment">     * @param member 成员名</span></span><br><span class="line"><span class="comment">     * @return 分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double getMemberScore(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.score(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从sorted set删除一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param member</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delFromSortedset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        valOpsZSet.remove(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序列出sorted set包括分数的set列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key   set名</span></span><br><span class="line"><span class="comment">     * @param start 开始位置</span></span><br><span class="line"><span class="comment">     * @param end   结束位置</span></span><br><span class="line"><span class="comment">     * @return 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;<span class="keyword">String</span>&gt;&gt; listSortedsetRev(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.reverseRangeWithScores(<span class="built_in">key</span>, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序取得sorted sort排名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key    set名</span></span><br><span class="line"><span class="comment">     * @param member 成员名</span></span><br><span class="line"><span class="comment">     * @return 排名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getReverseRank(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.reverseRank(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hashmap中删除一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delFromMap(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line">        valOpsHash.delete(<span class="built_in">key</span>, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将所有指定的值插入到存于 key 的列表的头部。如果 key 不存在，那么在进行 push 操作前会创建一个空列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Long lpush(<span class="keyword">String</span> <span class="built_in">key</span>, T value) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPush(<span class="built_in">key</span>, mapper.writeValueAsString(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当 key 已经存在并且存着一个 list 的时候，在这个 key 下面的 list 的头部插入 value。 与 LPUSH 相反，当</span></span><br><span class="line"><span class="comment">     * key 不存在的时候不会进行任何操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Long lpushx(<span class="keyword">String</span> <span class="built_in">key</span>, T value) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPushIfPresent(<span class="built_in">key</span>, mapper.writeValueAsString(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 里的list的长度。 如果 key 不存在，那么就被看作是空list，并且返回长度为 0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long llen(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 的列表里指定范围内的元素。 start 和 end</span></span><br><span class="line"><span class="comment">     * 偏移量都是基于0的下标，即list的第一个元素下标是0（list的表头），第二个元素下标是1，以此类推</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; lrange(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并且返回 key 对应的 list 的第一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> lpop(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPop(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie工具类"><a href="#Cookie工具类" class="headerlink" title="Cookie工具类"></a><strong>Cookie工具类</strong></h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookiesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CookiesUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名字获取cookie</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @param name    cookie名字</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie getCookieByName(HttpServletRequest request, <span class="keyword">String</span> name) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = ReadCookieMap(request);</span><br><span class="line">        <span class="keyword">if</span> (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            Cookie cookie = (Cookie) cookieMap.<span class="keyword">get</span>(name);</span><br><span class="line">            <span class="keyword">return</span> cookie;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getValueByName(HttpServletRequest request, <span class="keyword">String</span> name) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = ReadCookieMap(request);</span><br><span class="line">        <span class="keyword">if</span> (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            Cookie cookie = (Cookie) cookieMap.<span class="keyword">get</span>(name);</span><br><span class="line">            <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将cookie封装到Map里面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, Cookie&gt; ReadCookieMap(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;<span class="keyword">String</span>, Cookie&gt;();</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : <span class="type">cookies</span>) &#123;</span><br><span class="line">                cookieMap.put(cookie.getName(), cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存Cookies</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param response servlet请求</span></span><br><span class="line"><span class="comment">     * @param value    保存值</span></span><br><span class="line"><span class="comment">     * @author jxf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletResponse setCookie(<span class="keyword">String</span> domain,<span class="keyword">String</span> path,HttpServletResponse response, <span class="keyword">String</span> name, <span class="keyword">String</span> value, int time) &#123;</span><br><span class="line">        <span class="comment">// new一个Cookie对象,键值对为参数</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> <span class="type">Cookie</span>(name, value);</span><br><span class="line">        <span class="comment">// tomcat下多应用共享</span></span><br><span class="line">        cookie.setPath(path);</span><br><span class="line">        <span class="comment">// 如果cookie的值中含有中文时，需要对cookie进行编码，不然会产生乱码</span></span><br><span class="line">        cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">        cookie.setSecure(<span class="literal">true</span>);</span><br><span class="line">        cookie.setDomain(domain);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URLEncoder.encode(value, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"转码失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        cookie.setMaxAge(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动覆盖添加SameSite-Strict</span></span><br><span class="line">        Collection&lt;<span class="keyword">String</span>&gt; headers = response.getHeaders(HttpHeaders.SET_COOKIE);</span><br><span class="line">        boolean firstHeader = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// there can be multiple Set-Cookie attributes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> header : <span class="type">headers</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstHeader) &#123;</span><br><span class="line">                response.setHeader(HttpHeaders.SET_COOKIE, <span class="keyword">String</span>.format(<span class="string">"%s; %s"</span>, header, <span class="string">"SameSite=Strict"</span>));</span><br><span class="line">                firstHeader = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.addHeader(HttpHeaders.SET_COOKIE, <span class="keyword">String</span>.format(<span class="string">"%s; %s"</span>, header, <span class="string">"SameSite=Strict"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将Cookie添加到Response中,使之生效</span></span><br><span class="line">        <span class="comment">// addCookie后，如果已经存在相同名字的cookie，则最新的覆盖旧的cookie</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a><strong>配置类</strong></h2><h3 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a><strong>跨域访问</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 1允许任何域名使用</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 2允许任何头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 3允许任何方法（post、get等）</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, buildConfig()); <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Https配置"><a href="#Https配置" class="headerlink" title="Https配置"></a><strong>Https配置</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port.http&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection securityCollection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                securityCollection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(securityCollection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(redirectConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">redirectConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(Http11NioProtocol.class.getName());</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(serverPortHttp);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(serverPortHttps);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisCache配置"><a href="#RedisCache配置" class="headerlink" title="RedisCache配置"></a><strong>RedisCache配置</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.host&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">String</span> host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.port&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.timeout&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.jedis.pool.max-idle&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.jedis.pool.max-wait&#125;</span>"</span>)</span><br><span class="line">    private long maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.password&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"cacheRedisTemplate"</span>)</span><br><span class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; cacheRedisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; template = <span class="keyword">new</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">        <span class="comment">// 设置redis连接Factory</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// Redis value 序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;?&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class="built_in">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// Redis key 序列化</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RestTemplate配置"><a href="#RestTemplate配置" class="headerlink" title="RestTemplate配置"></a><strong>RestTemplate配置</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    public RestTemplate restTemplate(ClientHttpRequestFactory <span class="keyword">factory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">factory</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    public ClientHttpRequestFactory simpleClientHttpRequestFactory() &#123;</span><br><span class="line">        SimpleClientHttpRequestFactory <span class="keyword">factory</span> = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        <span class="comment">//读取超时时间为单位为60秒</span></span><br><span class="line">        <span class="keyword">factory</span>.setReadTimeout(<span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">//连接超时时间设置为10秒</span></span><br><span class="line">        <span class="keyword">factory</span>.setConnectTimeout(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">factory</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro配置"><a href="#Shiro配置" class="headerlink" title="Shiro配置"></a><strong>Shiro配置</strong></h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> class ShiroConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator creator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">// 强制使用cglib，防止重复代理和可能引起代理出错的问题</span></span><br><span class="line">        creator.setProxyTargetClass(true);</span><br><span class="line">        <span class="built_in">return</span> creator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager manager) &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(manager);</span><br><span class="line">        <span class="built_in">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置核心安全事务管理器</span></span><br><span class="line">    @Bean(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager securityManager(AuthRealm authRealm, ShiroCacheManager shiroCacheManager) &#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(authRealm);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 关闭shiro自带的session，详情见文档</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultSubjectDAO subjectDAO = <span class="keyword">new</span> DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = <span class="keyword">new</span> DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        manager.setCacheManager(shiroCacheManager);</span><br><span class="line">        <span class="built_in">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意不要加@Bean注解，不然spring会自动注册成filter</span></span><br><span class="line">    <span class="keyword">protected</span> JWTFilter createJWTFilter(JWTProperties jwtProp, ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> JWTFilter(jwtProp, syncCacheService,jedisUtils);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SystemLogoutFilter createSystemLogoutFilter(JWTProperties jwtProp,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> SystemLogoutFilter(jedisUtils,jwtProp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(<span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager,</span><br><span class="line">                                              JWTProperties jwtProp,</span><br><span class="line">                                              ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 添加jwt过滤器</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Filter&gt; filterMap = bean.getFilters();</span><br><span class="line">        filterMap.<span class="built_in">put</span>(<span class="string">"jwt"</span>, createJWTFilter(jwtProp, syncCacheService,jedisUtils));</span><br><span class="line">        filterMap.<span class="built_in">put</span>(<span class="string">"logout"</span>, createSystemLogoutFilter(jwtProp,jedisUtils));</span><br><span class="line">        bean.setFilters(filterMap);</span><br><span class="line">        <span class="comment">//配置登录的url和登录成功的url</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login/loginWeb"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/401"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置访问权限拦截器</span></span><br><span class="line">        LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//anon表示可以匿名访问,authc表示需要认证才可以访问</span></span><br><span class="line">        <span class="comment">//表示需要认证才可以访问</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/wxRegister"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/sendVerificationCode"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/user/createNewUser"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        <span class="comment">//login不做认证，noSessionCreation的作用是用户在操作session时会抛异常</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/loginWeb"</span>, <span class="string">"noSessionCreation,anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/loginWx"</span>, <span class="string">"noSessionCreation,anon"</span>);</span><br><span class="line">        <span class="comment">//做用户认证，permissive参数的作用是当token无效时也允许请求访问，不会返回鉴权未通过的错误</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/*.*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/js/common/jquery.js"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/js/login.js"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/css/common.css"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/css/login.css"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/**"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/*.*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/401"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro相关类"><a href="#Shiro相关类" class="headerlink" title="Shiro相关类"></a><strong>Shiro相关类</strong></h2><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><strong>Realm</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 域，Shiro从从Realm获取安全数据（如用户、角色、权限）</span></span><br><span class="line"><span class="comment"> * 就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；</span></span><br><span class="line"><span class="comment"> * 也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；</span></span><br><span class="line"><span class="comment"> * 可以把Realm看成DataSource，即安全数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> logger = <span class="type">Logger</span>.getLogger(<span class="type">AuthRealm</span>.<span class="keyword">class</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RoleService</span> roleService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AccessService</span> accessService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JedisUtils</span> jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    public <span class="type">AuthRealm</span>(<span class="type">UserService</span> userService, <span class="type">RoleService</span> roleService, <span class="type">AccessService</span> accessService, <span class="type">JedisUtils</span> jedisUtils) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.roleService = roleService;</span><br><span class="line">        <span class="keyword">this</span>.accessService = accessService;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个唯一的Realm名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">String</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断此Realm是否支持此Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public boolean supports(<span class="type">AuthenticationToken</span> token) &#123;</span><br><span class="line">        <span class="keyword">return</span> token instanceof <span class="type">JWTToken</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Token获取认证信息,默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="type">AuthenticationToken</span> auth) <span class="keyword">throws</span> <span class="type">AuthenticationException</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"doGetAuthenticationInfo()获取认证信息进行校验"</span>);</span><br><span class="line">        <span class="type">String</span> token = (<span class="type">String</span>) auth.getCredentials();</span><br><span class="line">        <span class="comment">// 解密获得userId，用于和数据库进行对比</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(token, <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"token invalid"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户信息是否存在</span></span><br><span class="line">        <span class="type">User</span> user = userService.findByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"User didn't existed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Token检验</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="type">JWTUtil</span>.verify(token)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"Username or password error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">UnsupportedEncodingException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SimpleAuthenticationInfo</span>(token, token, <span class="string">"my_realm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">AuthorizationInfo</span> doGetAuthorizationInfo(<span class="type">PrincipalCollection</span> principals) &#123;</span><br><span class="line">        logger.info(<span class="string">"doGetAuthorizationInfo()获取角色权限等信息进行校验"</span>);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> authorizationInfo = <span class="keyword">new</span> <span class="type">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(principals.toString(), <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="type">User</span> user = userService.findByUserId(userId);</span><br><span class="line">        <span class="comment">//获取用户角色信息</span></span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">UserRole</span>&gt; roleList = userService.findAllUserRoleByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">UserRole</span> role : roleList) &#123;</span><br><span class="line">            authorizationInfo.addRole(role.getRole().getRoleName());</span><br><span class="line">            <span class="comment">//获取角色权限信息</span></span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">RoleAccess</span>&gt; accessList = roleService.findAllRoleAccessByRoleId(role.getRole().getRoleId());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">RoleAccess</span> access : accessList) &#123;</span><br><span class="line">                authorizationInfo.addStringPermission(access.getAccess().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a><strong>Token</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTProperties"><a href="#JWTProperties" class="headerlink" title="JWTProperties"></a><strong>JWTProperties</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"token"</span>)</span><br><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class JWTProperties &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期时间，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">tokenExpireTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新令牌时间，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">refreshCheckTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro缓存有效期，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">shiroCacheExpireTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token加密密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">secretKey</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTFilter"><a href="#JWTFilter" class="headerlink" title="JWTFilter"></a><strong>JWTFilter</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JWTFilter <span class="keyword">extends</span> BasicHttpAuthenticationFilter &#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">//ShiroConfig声明的LifecycleBeanPostProcessor会因为鸡蛋问题导致JWTProperties注入null</span></span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> ISyncCacheService syncCacheService;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.cookie-domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> adress;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.cookie-path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JWTFilter() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JWTFilter(JWTProperties jwtProperties, ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">        <span class="keyword">this</span>.syncCacheService = syncCacheService;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对跨域提供支持，流程顺序：preHandle-&gt;isAccessAllowed-&gt;isLoginAttempt-&gt;executeLogin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-control-Allow-Origin"</span>, httpServletRequest.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST,OPTIONS,PUT,DELETE"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, httpServletRequest.getHeader(<span class="string">"Access-Control-Request-Headers"</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示是否允许访问</span></span><br><span class="line"><span class="comment">     * 这里我们详细说明下为什么最终返回的都是true，即允许访问</span></span><br><span class="line"><span class="comment">     * 例如我们提供一个地址 GET /article</span></span><br><span class="line"><span class="comment">     * 登入用户和游客看到的内容是不同的</span></span><br><span class="line"><span class="comment">     * 如果在这里返回了false，请求会被直接拦截，用户看不到任何东西</span></span><br><span class="line"><span class="comment">     * 所以我们在这里返回true，Controller中可以通过 subject.isAuthenticated() 来判断用户是否登入</span></span><br><span class="line"><span class="comment">     * 如果有些资源只有登入用户才能访问，我们只需要在方法上面加上 @RequiresAuthentication 注解即可</span></span><br><span class="line"><span class="comment">     * 但是这样做有一个缺点，就是不能够对GET,POST等请求进行分别过滤鉴权(因为我们重写了官方的方法)，但实际上对应用影响不大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> isAccessAllowed(ServletRequest request, ServletResponse response, <span class="built_in">Object</span> mappedValue) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">                <span class="comment">//无登陆信息，进行登陆验证</span></span><br><span class="line">                logger.info(<span class="string">"无登陆信息，进行登陆验证-&gt;executeLogin"</span>);</span><br><span class="line">                <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//检查已有登陆信息</span></span><br><span class="line">                logger.info(<span class="string">"已有登陆信息，数据校验"</span>);</span><br><span class="line">                <span class="built_in">String</span> authorization = CookiesUtil.getCookieByName((HttpServletRequest)request,SecurityConsts.REQUEST_AUTH_HEADER.getValue()).getValue();</span><br><span class="line">                <span class="keyword">if</span>(!JWTUtil.verify(authorization))&#123;</span><br><span class="line">                    logger.info(<span class="string">"登陆信息未通过校验，请重新登陆"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"登陆信息未通过校验，请重新登陆"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!getSubject(request, response).isAuthenticated())&#123;</span><br><span class="line">                        logger.info(<span class="string">"登陆信息已失效，请重新登陆"</span>);</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"登陆信息已失效，请重新登陆"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//获取账号</span></span><br><span class="line">                        <span class="built_in">String</span> userId = JWTUtil.getClaim(authorization, SecurityConsts.USERID.getValue());</span><br><span class="line">                        <span class="comment">//判断是否在登出状态</span></span><br><span class="line">                        <span class="built_in">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + userId;</span><br><span class="line">                        <span class="keyword">if</span>(jedisUtils.exists(tokenKey))&#123;</span><br><span class="line">                            logger.info(<span class="string">"登陆验证：此账户已登出，请重新登陆"</span>);</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"此账户已登出，请重新登陆"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WebUtils.issueRedirect(request,response,<span class="string">"/"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">                logger.info(ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否想要登入</span></span><br><span class="line"><span class="comment">     * 只有用户携带令牌时才考虑进行登陆验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> isLoginAttempt(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        Cookie cookie = CookiesUtil.getCookieByName(req,SecurityConsts.REQUEST_AUTH_HEADER.getValue());</span><br><span class="line">        <span class="keyword">return</span> cookie != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> executeLogin(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">//从Cookie获取token</span></span><br><span class="line">        Cookie cookie = CookiesUtil.getCookieByName(httpServletRequest,SecurityConsts.REQUEST_AUTH_HEADER.getValue());</span><br><span class="line">        <span class="built_in">String</span> authorization;</span><br><span class="line">        <span class="keyword">if</span>(cookie == <span class="literal">null</span>)&#123;</span><br><span class="line">            logger.info(<span class="string">"无登陆数据"</span>);</span><br><span class="line">            authorization = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            authorization = cookie.getValue();</span><br><span class="line">            logger.info(<span class="string">"已有登陆数据："</span> + authorization);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取账号</span></span><br><span class="line">        <span class="built_in">String</span> userId = JWTUtil.getClaim(authorization, SecurityConsts.USERID.getValue());</span><br><span class="line">        <span class="comment">//判断是否仍在登出状态</span></span><br><span class="line">        <span class="built_in">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + userId;</span><br><span class="line">        <span class="keyword">if</span>(jedisUtils.exists(tokenKey))&#123;</span><br><span class="line">            logger.info(<span class="string">"登陆验证：登录后清除登出缓存信息"</span>);</span><br><span class="line">            jedisUtils.delKey(tokenKey);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            JWTToken token = <span class="keyword">new</span> JWTToken(authorization);</span><br><span class="line">            <span class="comment">//提交给realm进行登入，如果错误他会抛出异常并被捕获</span></span><br><span class="line">            getSubject(request, response).login(token);</span><br><span class="line">            <span class="comment">//检查是否需要更换token，需要则重新颁发</span></span><br><span class="line">            <span class="keyword">this</span>.refreshTokenIfNeed(userId, authorization, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有抛出异常则代表登入成功，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否需要,刷新Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @param authorization</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">void</span> refreshTokenIfNeed(<span class="built_in">String</span> userId, <span class="built_in">String</span> authorization, ServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        Long currentTimeMillis = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//检查刷新规则</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.refreshCheck(authorization, currentTimeMillis)) &#123;</span><br><span class="line">            <span class="built_in">String</span> lockName = SecurityConsts.PREFIX_SHIRO_REFRESH_TOKEN.getValue() + userId;</span><br><span class="line">            <span class="built_in">boolean</span> b = syncCacheService.getLock(lockName, Constants.ExpireTime.ONE_HOUR);</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                logger.info(<span class="built_in">String</span>.format(<span class="string">"为账户%s颁发新的令牌"</span>, userId));</span><br><span class="line">                <span class="built_in">String</span> newToken = JWTUtil.sign(userId, <span class="built_in">String</span>.valueOf(currentTimeMillis));</span><br><span class="line">                HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">                CookiesUtil.setCookie(adress,path,httpServletResponse,SecurityConsts.REQUEST_AUTH_HEADER.getValue(),newToken,<span class="number">3600</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            syncCacheService.releaseLock(lockName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否需要更新Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param authorization</span></span><br><span class="line"><span class="comment">     * @param currentTimeMillis</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> refreshCheck(<span class="built_in">String</span> authorization, Long currentTimeMillis) &#123;</span><br><span class="line">        <span class="built_in">String</span> tokenMillis = JWTUtil.getClaim(authorization, SecurityConsts.CURRENT_TIME_MILLIS.getValue());</span><br><span class="line">        <span class="keyword">if</span> (tokenMillis != <span class="literal">null</span> &amp;&amp; currentTimeMillis - Long.parseLong(tokenMillis) &gt; (jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">1000</span>L)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将非法请求跳转到 /401</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">void</span> response401(ServletRequest req, ServletResponse resp, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            httpServletResponse.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            httpServletResponse.setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/401"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SystemLogoutFilter"><a href="#SystemLogoutFilter" class="headerlink" title="SystemLogoutFilter"></a><strong>SystemLogoutFilter</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SystemLogoutFilter</span> <span class="keyword">extends</span> <span class="title">LogoutFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">SystemLogoutFilter</span>.<span class="keyword">class</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JedisUtils</span> jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JWTProperties</span> jwtProperties;</span><br><span class="line"></span><br><span class="line">    public <span class="type">SystemLogoutFilter</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">SystemLogoutFilter</span>(<span class="type">JedisUtils</span> jedisUtils, <span class="type">JWTProperties</span> jwtProperties) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当服务器收到一个可预知的请求时，首先在redis中查询是否存在当前JWT</span></span><br><span class="line">    <span class="comment">// 如果存在返回false，否则在redis中插入当前jwt，这条数据的失效时间为当前jwt的剩余有效时间。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> boolean preHandle(<span class="type">ServletRequest</span> request, <span class="type">ServletResponse</span> response)&#123;</span><br><span class="line">        <span class="type">Subject</span> subject = getSubject(request, response);</span><br><span class="line">        subject.logout();</span><br><span class="line">        <span class="comment">//添加到Redis</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(<span class="type">CookiesUtil</span>.getValueByName((<span class="type">HttpServletRequest</span>)request,<span class="type">SecurityConsts</span>.<span class="type">REQUEST_AUTH_HEADER</span>.getValue()), <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="keyword">if</span>(userId != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> currentTimeMillis = <span class="type">String</span>.valueOf(<span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            <span class="comment">//新增登出缓存，并清除刷新缓存</span></span><br><span class="line">            <span class="type">String</span> tokenKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_LOGOUT_TOKEN</span>.getValue() + userId;</span><br><span class="line">            <span class="keyword">if</span> (!jedisUtils.exists(tokenKey)) &#123;</span><br><span class="line">                logger.info(<span class="string">"登出：新增登出标记到缓存"</span>);</span><br><span class="line">                jedisUtils.saveString(tokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">                <span class="comment">//清除RefreshToken缓存的时间戳</span></span><br><span class="line">                <span class="type">String</span> refreshTokenKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_REFRESH_TOKEN</span>.getValue() + userId;</span><br><span class="line">                <span class="keyword">if</span> (jedisUtils.exists(refreshTokenKey)) &#123;</span><br><span class="line">                    logger.info(<span class="string">"登出：清除RefreshToken缓存的时间戳"</span>);</span><br><span class="line">                    jedisUtils.delKey(refreshTokenKey);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 清除可能存在的Shiro权限信息缓存</span></span><br><span class="line">                <span class="type">String</span> cacheKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_CACHE</span>.getValue() + userId;</span><br><span class="line">                <span class="keyword">if</span> (jedisUtils.exists(cacheKey)) &#123;</span><br><span class="line">                    jedisUtils.delKey(cacheKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不执行后续的过滤器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroCache"><a href="#ShiroCache" class="headerlink" title="ShiroCache"></a><strong>ShiroCache</strong></h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class ShiroCache&lt;K, V&gt; implements Cache&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ShiroCache(JedisUtils jedisUtils, JWTProperties jwtProperties) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempKey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">Object</span> result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tempKey)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = jedisUtils.getObject(tempKey, <span class="keyword">Object</span>.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> put(<span class="keyword">Object</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempLey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisUtils.saveObject(tempLey, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> remove(<span class="keyword">Object</span> <span class="built_in">key</span>) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempKey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tempKey)) &#123;</span><br><span class="line">            jedisUtils.delKey(tempKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Set&lt;K&gt; keys() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; values() &#123;</span><br><span class="line">        Set keys = <span class="keyword">this</span>.keys();</span><br><span class="line">        List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">Object</span> <span class="built_in">key</span> : keys) &#123;</span><br><span class="line">                values.<span class="built_in">add</span>((V) jedisUtils.getObject(<span class="keyword">this</span>.getKey(<span class="built_in">key</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存的key名称获取为shiro:cache:account</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> getKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityConsts.PREFIX_SHIRO_CACHE + JWTUtil.getClaim(<span class="built_in">key</span>.toString(), SecurityConsts.USERID.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroCacheManager"><a href="#ShiroCacheManager" class="headerlink" title="ShiroCacheManager"></a><strong>ShiroCacheManager</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisUtils jedisUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String s)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroCache&lt;K, V&gt;(jedisUtils, jwtProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a><strong>实体类</strong></h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a><strong>User</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_USER"</span>)</span><br><span class="line">public class User &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    private String userId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">openid</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">pwd</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">userName</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">nickName</span>;</span><br><span class="line">    ...</span><br><span class="line">    @<span class="selector-tag">JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">java</span><span class="selector-class">.sql</span><span class="selector-class">.Timestamp</span> <span class="selector-tag">regTime</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">address</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">phone</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">imgUrl</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a><strong>Role</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_ROLE"</span>)</span><br><span class="line">public class Role &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">    <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ROLE"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">    private Integer roleId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">roleName</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">Boolean</span> <span class="selector-tag">status</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserRole"><a href="#UserRole" class="headerlink" title="UserRole"></a><strong>UserRole</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"T_XXXX_USER_ROLE"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = <span class="meta-string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(name = <span class="meta-string">"idSequence"</span>, sequenceName = <span class="meta-string">"USER_ROLE"</span>, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Integer urId;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"roleId"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JSONField(format = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserRole(String userId, Role role) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">        <span class="keyword">this</span>.createTime = new Timestamp(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a><strong>Access</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_ACCESS"</span>)</span><br><span class="line">public class Access &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">    <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ACCESS"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">    private Integer accessId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">title</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">code</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">Boolean</span> <span class="selector-tag">status</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleAccess"><a href="#RoleAccess" class="headerlink" title="RoleAccess"></a><strong>RoleAccess</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"T_XXXX_ROLE_ACCESS"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleAccess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = <span class="meta-string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(name = <span class="meta-string">"idSequence"</span>, sequenceName = <span class="meta-string">"ROLE_ACCESS"</span>, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Integer raId;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"accessId"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Access access;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JSONField(format = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RoleAccess(Integer roleId, Access access) &#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">        <span class="keyword">this</span>.access = access;</span><br><span class="line">        <span class="keyword">this</span>.createTime = new Timestamp(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a><strong>Menu</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_WXMP_MENU"</span>)</span><br><span class="line">public class Menu &#123;</span><br><span class="line">  <span class="variable">@Id</span></span><br><span class="line">  <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">  <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"MENU"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">  private Integer menuId;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">menuName</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleMenu"><a href="#RoleMenu" class="headerlink" title="RoleMenu"></a><strong>RoleMenu</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_WXMP_ROLE_MENU"</span>)</span><br><span class="line">public class RoleMenu &#123;</span><br><span class="line">  <span class="variable">@Id</span></span><br><span class="line">  <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">  <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ROLE_MENU"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">  private Integer rmId;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">Integer</span> <span class="selector-tag">roleId</span>;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">Integer</span> <span class="selector-tag">menuId</span>;</span><br><span class="line">  @<span class="selector-tag">DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  @<span class="selector-tag">JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  @<span class="selector-tag">JSONField</span>(format = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">java</span><span class="selector-class">.sql</span><span class="selector-class">.Timestamp</span> <span class="selector-tag">createTime</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a><strong>持久层</strong></h2><p>省略…</p><h2 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a><strong>服务层</strong></h2><h3 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a><strong>UserService</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId   用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">login</span><span class="params">(String userId, String password, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * JWT设置失效时间为当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">logout</span><span class="params">(HttpServletRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">loginWx</span><span class="params">(String code,HttpServletResponse response)</span><span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">sendVerificationCode</span><span class="params">(String phone)</span><span class="keyword">throws</span> ClientException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 验证用户信息和验证码，并注册用户，成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wxRegisterVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">wxRegister</span><span class="params">(WxRegisterVo wxRegisterVo, HttpServletResponse response)</span><span class="keyword">throws</span> ClientException,UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">createNewUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPassword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">changePwd</span><span class="params">(UserPasswordVo userPassword)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * 性别，昵称等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickName 昵称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address      地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgUrl      头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">changeUserInfo</span><span class="params">(String userId,String nickName, String address,String imgUrl)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRoleVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">updateUserRoles</span><span class="params">(UserRoleVo userRoleVo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户ID角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;UserRole&gt; <span class="title">findAllUserRoleByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询其所有权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;RoleAccess&gt; <span class="title">findAllRoleAccessByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">UserService</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(UserServiceImpl.class);</span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> UserRoleRepository userRoleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;wx.applet.appid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> appid;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;wx.applet.appsecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> appSecret;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.product&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> product;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dyalMsgapi.aliyuncs.com</span></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> domain;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.accessKeySecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> accessKeySecret;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.accessKeyId&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> accessKeyId;</span><br><span class="line">    @Value(<span class="string">"$&#123;server.cookie-domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> adress;</span><br><span class="line">    @Value(<span class="string">"$&#123;server.cookie-path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> path;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//短信API产品名称（短信产品名固定，无需修改）</span></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.endpoint&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> endpoint;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">public</span> UserServiceImpl(JWTProperties jwtProperties, JedisUtils jedisUtils, RestTemplate restTemplate, UserRepository userRepository, UserRoleRepository userRoleRepository, RoleRepository roleRepository, RoleAccessRepository roleAccessRepository, StudentRepository studentRepository) &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">        <span class="built_in">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="built_in">this</span>.userRoleRepository = userRoleRepository;</span><br><span class="line">        <span class="built_in">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="built_in">this</span>.roleAccessRepository = roleAccessRepository;</span><br><span class="line">        <span class="built_in">this</span>.studentRepository = studentRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo login(<span class="keyword">String</span> userId, <span class="keyword">String</span> password, HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        User user = userRepository.findByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用户不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_NOT_EXIST.getCode(), CodeEnums.USER_NOT_EXIST.getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//微信账号直接提示账号不存在</span></span><br><span class="line">            <span class="keyword">if</span> (user.getOpenid() == <span class="literal">null</span> || <span class="string">""</span>.equals(user.getOpenid())) &#123;</span><br><span class="line">                <span class="comment">//WEB登陆</span></span><br><span class="line">                logger.info(<span class="string">"WEB登陆"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//微信登陆</span></span><br><span class="line">                logger.info(<span class="string">"微信登陆"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"当前用户只能登陆微信端"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//密码校验</span></span><br><span class="line">            logger.info(<span class="string">"持久："</span> + user.getPwd());</span><br><span class="line">            logger.info(<span class="string">"输入："</span> + password);</span><br><span class="line">            <span class="keyword">if</span> (!ShiroKit.checkMd5Password(password, SecurityConsts.LOGIN_SALT.getValue(), user.getPwd())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_PWD_FAIL.getCode(), CodeEnums.USER_PWD_FAIL.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * 退出则存用户信息到redis，再次访问时判断，若有数据则表示已失效</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo logout(HttpServletRequest request)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWx(<span class="keyword">String</span> code,HttpServletResponse response)throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">String</span> resultJson = code2Session(code);</span><br><span class="line">        Code2SessionResponse sessionResponse = JSON.parseObject(resultJson, Code2SessionResponse.class);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"0"</span>.equals(sessionResponse.getErrcode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"微信验证失败: "</span> + sessionResponse.getErrmsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从本地数据库中查找用户是否存在</span></span><br><span class="line">            User user = userRepository.findByOpenid(sessionResponse.getOpenid());</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.WX_ACCOUNT_NOT_REGEISTER.getCode(), CodeEnums.WX_ACCOUNT_NOT_REGEISTER.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg(),user,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo sendVerificationCode(<span class="keyword">String</span> phone) throws ClientException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        <span class="comment">//初始化ascClient,暂时不支持多region（请勿修改）</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId,</span><br><span class="line">                accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> <span class="type">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> <span class="type">SendSmsRequest</span>();</span><br><span class="line">        <span class="comment">//使用post提交</span></span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line">        <span class="comment">//必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式；发送国际/港澳台消息时，接收号码格式为国际区号+号码，如“85200000000”</span></span><br><span class="line">        request.setPhoneNumbers(phone);</span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(<span class="string">"趣学厦门"</span>);</span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到，发送国际/港澳台消息时，请使用国际/港澳台短信模版</span></span><br><span class="line">        request.setTemplateCode(<span class="string">"SMS_168726524"</span>);</span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        <span class="comment">//友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"code\":\""</span> + createRandomNum(<span class="number">6</span>) + <span class="string">"\"&#125;"</span>);</span><br><span class="line">        <span class="comment">//可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line"><span class="comment">//        request.setOutId("yourOutId");</span></span><br><span class="line">        <span class="comment">//请求失败这里会抛ClientException异常</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        logger.info(sendSmsResponse.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(sendSmsResponse.getCode() != <span class="literal">null</span> &amp;&amp; <span class="string">"OK"</span>.equals(sendSmsResponse.getCode())) &#123;</span><br><span class="line">            <span class="comment">//请求成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ApiException</span>(<span class="number">1</span>,<span class="string">"短信推送失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * @param wxRegisterVo</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo wxRegister(WxRegisterVo wxRegisterVo, HttpServletResponse response) throws ClientException,UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">if</span>(wxRegisterVo.getVerCode().length() != <span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.MSG_FORMAT_ERR.getCode(), CodeEnums.MSG_FORMAT_ERR.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查验证码是否一致</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> <span class="type">DefaultAcsClient</span>(profile);</span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        QuerySendDetailsRequest request = <span class="keyword">new</span> <span class="type">QuerySendDetailsRequest</span>();</span><br><span class="line">        <span class="comment">//必填-号码</span></span><br><span class="line">        request.setPhoneNumber(wxRegisterVo.getPhone());</span><br><span class="line">        <span class="comment">//可选-流水号</span></span><br><span class="line"><span class="comment">//        request.setBizId("111");</span></span><br><span class="line">        <span class="comment">//必填-发送日期 支持30天内记录查询，格式yyyyMMdd</span></span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        request.setSendDate(ft.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">        <span class="comment">//必填-页大小</span></span><br><span class="line">        request.setPageSize(<span class="number">10</span>L);</span><br><span class="line">        <span class="comment">//必填-当前页码从1开始计数</span></span><br><span class="line">        request.setCurrentPage(<span class="number">1</span>L);</span><br><span class="line">        QuerySendDetailsResponse querySendDetailsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        logger.info(querySendDetailsResponse.getCode());</span><br><span class="line">        logger.info(querySendDetailsResponse.getMessage());</span><br><span class="line">        boolean checkVerCode = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(QuerySendDetailsResponse.SmsSendDetailDTO dto : <span class="type">querySendDetailsResponse</span>.getSmsSendDetailDTOs())&#123;</span><br><span class="line">            logger.info(<span class="string">"verCode="</span> + wxRegisterVo.getVerCode());</span><br><span class="line">            logger.info(<span class="string">"Content="</span> + dto.getContent());</span><br><span class="line">            logger.info(<span class="string">"ErrCode="</span> + dto.getErrCode());</span><br><span class="line">            logger.info(<span class="string">"OutId="</span> + dto.getOutId());</span><br><span class="line">            logger.info(<span class="string">"PhoneNum="</span> + dto.getPhoneNum());</span><br><span class="line">            logger.info(<span class="string">"ReceiveDate="</span> + dto.getReceiveDate());</span><br><span class="line">            logger.info(<span class="string">"SendDate="</span> + dto.getSendDate());</span><br><span class="line">            logger.info(<span class="string">"SendStatus="</span> + dto.getSendStatus());</span><br><span class="line">            logger.info(<span class="string">"Template="</span> + dto.getTemplateCode());</span><br><span class="line">            <span class="keyword">if</span>(dto.getContent().contains(wxRegisterVo.getVerCode()))&#123;</span><br><span class="line">                checkVerCode = <span class="literal">true</span>;</span><br><span class="line">                logger.info(<span class="string">"验证码确认成功"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(checkVerCode)&#123;</span><br><span class="line">            <span class="comment">//根据userId和userName获取用户信息</span></span><br><span class="line">            Student student = studentRepository.findByStudentIdAndStudentName(wxRegisterVo.getUserId(),wxRegisterVo.getUserName());</span><br><span class="line">            <span class="keyword">if</span>(student == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"未找到所给学生信息，请确认学号姓名是否输入正确"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用微信code2session接口获取openid和session_key</span></span><br><span class="line">            <span class="keyword">String</span> resultJson = code2Session(wxRegisterVo.getCode());</span><br><span class="line">            Code2SessionResponse sessionResponse = JSON.parseObject(resultJson, Code2SessionResponse.class);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"0"</span>.equals(sessionResponse.getErrcode())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"微信验证失败: "</span> + sessionResponse.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> openid = sessionResponse.getOpenid();</span><br><span class="line">                <span class="comment">//从本地数据库中查找用户是否存在</span></span><br><span class="line">                User user = userRepository.findByOpenid(openid);</span><br><span class="line">                <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"此微信账号已有绑定用户"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    user = userRepository.findByUserId(wxRegisterVo.getUserId());</span><br><span class="line">                    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                        user.register(openid, wxRegisterVo.getNickName(),wxRegisterVo.getAddress(), wxRegisterVo.getPhone());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        user = <span class="keyword">new</span> <span class="type">User</span>(wxRegisterVo.getUserId(), openid, wxRegisterVo.getUserName(),</span><br><span class="line">                                wxRegisterVo.getNickName(),</span><br><span class="line">                                student.getSchool(), student.getDepartment(),student.getMajor(),</span><br><span class="line">                                student.getClassName(), student.getGrade(), student.getSex(),</span><br><span class="line">                                wxRegisterVo.getAddress(), wxRegisterVo.getPhone());</span><br><span class="line">                    &#125;</span><br><span class="line">                    user = userRepository.saveAndFlush(user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//登陆</span></span><br><span class="line">                <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg(),user,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//短信验证失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.MSG_CHECK_ERR.getCode(), CodeEnums.MSG_CHECK_ERR.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo createNewUser(User user) &#123;</span><br><span class="line">        User existUser = userRepository.findByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">if</span> (existUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//账号已存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>, <span class="string">"账号已经存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getOpenid() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//微信</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>, <span class="string">"调用微信端接口异常"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//保存密码</span></span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(user.getPwd())) &#123;</span><br><span class="line">                    user.setPwd(ShiroKit.md5(user.getPwd(), SecurityConsts.LOGIN_SALT.getValue()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//检查密码规范</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">2</span>, <span class="string">"密码不符合规范"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            userRepository.saveAndFlush(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码</span></span><br><span class="line"><span class="comment">     * @param userPassword</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo changePwd(UserPasswordVo userPassword) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(userPassword.getPassword()) &amp;&amp; !StringUtils.isEmpty(userPassword.getNewPassword())) &#123;</span><br><span class="line">            User user = userRepository.findById(userPassword.getUserId()).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            <span class="keyword">String</span> encodePassword = ShiroKit.md5(userPassword.getPassword(), SecurityConsts.LOGIN_SALT.getValue());</span><br><span class="line">            <span class="keyword">if</span> (user.getPwd().equals(encodePassword)) &#123;</span><br><span class="line">                user.setPwd(ShiroKit.md5(userPassword.getNewPassword(), SecurityConsts.LOGIN_SALT.getValue()));</span><br><span class="line">                userRepository.saveAndFlush(user);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//原始密码错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_OLD_PWD_ERR.getCode(), CodeEnums.USER_OLD_PWD_ERR.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.PARAMETERS_MISSING.getCode(), CodeEnums.PARAMETERS_MISSING.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * 性别，昵称等</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo changeUserInfo(<span class="keyword">String</span> userId,<span class="keyword">String</span> nickName, <span class="keyword">String</span> address,<span class="keyword">String</span> imgUrl) &#123;</span><br><span class="line">        User user = userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">        user.setNickName(nickName);</span><br><span class="line">        user.setAddress(address);</span><br><span class="line">        user.setImgUrl(imgUrl);</span><br><span class="line">        userRepository.saveAndFlush(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户角色</span></span><br><span class="line"><span class="comment">     * @param userRoleVo</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo updateUserRoles(UserRoleVo userRoleVo)&#123;</span><br><span class="line">        <span class="comment">//清除用户所有角色</span></span><br><span class="line">        userRoleRepository.deleteAllByUserId(userRoleVo.getUserId());</span><br><span class="line">        List&lt;UserRole&gt; userRoles = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Role&gt; roles = roleRepository.findAllByRoleIdIn(userRoleVo.getRoleIds());</span><br><span class="line">        <span class="keyword">if</span>(roles.size() != userRoleVo.getRoleIds().size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"角色数据异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Role role : <span class="type">roles</span>)&#123;</span><br><span class="line">            UserRole userRole = <span class="keyword">new</span> <span class="type">UserRole</span>(userRoleVo.getUserId(),role);</span><br><span class="line">            userRoles.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        userRoleRepository.saveAll(userRoles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),userRoles,userRoles.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> User findByUserId(<span class="keyword">String</span> userId) &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户ID角色</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> List&lt;UserRole&gt; findAllUserRoleByUserId(<span class="keyword">String</span> userId) &#123;</span><br><span class="line">        <span class="keyword">return</span> userRoleRepository.findAllByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询其所有权限</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> List&lt;RoleAccess&gt; findAllRoleAccessByUserId(<span class="keyword">String</span> userId)&#123;</span><br><span class="line">        User user = userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">        List&lt;UserRole&gt; userRoles = userRoleRepository.findAllByUserId(userId);</span><br><span class="line">        List&lt;Integer&gt; roleIds = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userRoles.forEach(userRole -&gt; roleIds.add(userRole.getRole().getRoleId()));</span><br><span class="line">        List&lt;RoleAccess&gt; roleAccesses = roleAccessRepository.findAllByRoleIdIn(roleIds);</span><br><span class="line">        <span class="keyword">return</span> roleAccesses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数查询用户数据</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Page&lt;User&gt; findAllUserByParm(<span class="keyword">String</span> school, <span class="keyword">String</span> department, <span class="keyword">String</span> grade, <span class="keyword">String</span> major, <span class="keyword">String</span> clazz, <span class="keyword">String</span> sex, <span class="keyword">String</span> studentId, <span class="keyword">String</span> studentName, int page, int limit)&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAllUserByParm(school, department, grade, major, clazz, sex, studentId, studentName,</span><br><span class="line">                PageRequest.of(page - <span class="number">1</span>, limit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信的 code2session 接口 获取微信用户信息</span></span><br><span class="line"><span class="comment">     * 官方说明 : https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/code2Session.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> code2Session(<span class="keyword">String</span> jsCode) &#123;</span><br><span class="line">        <span class="keyword">String</span> code2SessionUrl = <span class="string">"https://api.weixin.qq.com/sns/jscode2session?appid="</span> + appid + <span class="string">"&amp;secret="</span> + appSecret + <span class="string">"&amp;js_code="</span> + jsCode + <span class="string">"&amp;grant_type=authorization_code"</span>;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(code2SessionUrl, <span class="keyword">String</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数</span></span><br><span class="line"><span class="comment">     * @param num 位数</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> createRandomNum(int num)&#123;</span><br><span class="line">        <span class="keyword">String</span> randomNumStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; num;i ++)&#123;</span><br><span class="line">            int randomNum = (int)(Math.random() * <span class="number">10</span>);</span><br><span class="line">            randomNumStr += randomNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomNumStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录更新</span></span><br><span class="line"><span class="comment">     * @param account</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void loginSuccess(<span class="keyword">String</span> account,User user,HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">String</span> currentTimeMillis = <span class="keyword">String</span>.valueOf(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 清除可能存在的Shiro权限信息缓存</span></span><br><span class="line">        <span class="keyword">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_CACHE.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tokenKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：清除可能存在的Shiro权限信息缓存"</span>);</span><br><span class="line">            jedisUtils.delKey(tokenKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除可能存在的登出信息缓存</span></span><br><span class="line">        <span class="keyword">String</span> logoutKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(logoutKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：清除可能存在的登出信息缓存"</span>);</span><br><span class="line">            jedisUtils.delKey(logoutKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新RefreshToken缓存的时间戳</span></span><br><span class="line">        <span class="keyword">String</span> refreshTokenKey = SecurityConsts.PREFIX_SHIRO_REFRESH_TOKEN.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(refreshTokenKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：更新RefreshToken缓存的时间戳"</span>);</span><br><span class="line">            jedisUtils.saveString(refreshTokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：新增RefreshToken缓存的时间戳"</span>);</span><br><span class="line">            jedisUtils.saveString(refreshTokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        <span class="keyword">String</span> token = JWTUtil.sign(account, currentTimeMillis);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        subject.login(<span class="keyword">new</span> <span class="type">JWTToken</span>(token));</span><br><span class="line">        logger.info(<span class="string">"登陆时subject.isAuthenticated()："</span> + subject.isAuthenticated());</span><br><span class="line">        response = CookiesUtil.setCookie(adress,path,response,SecurityConsts.REQUEST_AUTH_HEADER.getValue(), token,<span class="number">3600</span>);</span><br><span class="line">        Cookie cookieUserName = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"userName"</span>, user.getUserName());</span><br><span class="line">        Cookie cookieImg = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"imgUrl"</span>, user.getImgUrl());</span><br><span class="line">        response.addCookie(cookieUserName);</span><br><span class="line">        response.addCookie(cookieImg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleService"><a href="#RoleService" class="headerlink" title="RoleService"></a><strong>RoleService</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo createNewRole(Role role);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改角色权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleAccessVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo updateRoleAccess(RoleAccessVo roleAccessVo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Role&gt; findAllRole();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID查询角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Role findRoleById(Integer roleId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID获取权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;RoleAccess&gt; findAllRoleAccessByRoleId(Integer roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="keyword">private</span> AccessRepository accessRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">(RoleRepository roleRepository, RoleAccessRepository roleAccessRepository, AccessRepository accessRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="keyword">this</span>.roleAccessRepository = roleAccessRepository;</span><br><span class="line">        <span class="keyword">this</span>.accessRepository = accessRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">createNewRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        role = roleRepository.saveAndFlush(role);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),role,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改角色权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleAccessVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">updateRoleAccess</span><span class="params">(RoleAccessVo roleAccessVo)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先清除角色所有权限</span></span><br><span class="line">        roleAccessRepository.deleteAllByRoleId(roleAccessVo.getRoleId());</span><br><span class="line"></span><br><span class="line">        List&lt;RoleAccess&gt; roleAccesses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Access&gt; accesses = accessRepository.findAllByAccessIdIn(roleAccessVo.getAccessIds());</span><br><span class="line">        <span class="keyword">if</span>(accesses.size() != roleAccessVo.getAccessIds().size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(<span class="number">1</span>,<span class="string">"权限数据异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Access access : accesses)&#123;</span><br><span class="line">            RoleAccess roleAccess = <span class="keyword">new</span> RoleAccess(roleAccessVo.getRoleId(),access);</span><br><span class="line">            roleAccesses.add(roleAccess);</span><br><span class="line">        &#125;</span><br><span class="line">        roleAccessRepository.saveAll(roleAccesses);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),roleAccesses,roleAccesses.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findAllRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID查询角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">findRoleById</span><span class="params">(Integer roleId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findById(roleId).orElseThrow(DBDataNotFoundException::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID获取权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RoleAccess&gt; <span class="title">findAllRoleAccessByRoleId</span><span class="params">(Integer roleId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleAccessRepository.findAllByRoleId(roleId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AccessService"><a href="#AccessService" class="headerlink" title="AccessService"></a><strong>AccessService</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo createNewAccess(Access access);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Access&gt; findAllAccess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccessService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessRepository accessRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">createNewAccess</span><span class="params">(Access access)</span></span>&#123;</span><br><span class="line">        access = accessRepository.saveAndFlush(access);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),access,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Access&gt; <span class="title">findAllAccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SyncCacheService"><a href="#SyncCacheService" class="headerlink" title="SyncCacheService"></a><strong>SyncCacheService</strong></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ISyncCacheService &#123;</span><br><span class="line">    Boolean getLock(String lockName, int expireTime);</span><br><span class="line"></span><br><span class="line">    Boolean releaseLock(String lockName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISyncCacheService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SyncCacheServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JWTProperties jwtProperties;</span><br><span class="line">    @Autowired</span><br><span class="line">    JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis中key的锁，乐观锁实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 锁的失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Boolean</span> getLock(String lockName, <span class="keyword">int</span> expireTime) &#123;</span><br><span class="line">        <span class="keyword">Boolean</span> result = <span class="keyword">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isExist = jedisUtils.exists(lockName);</span><br><span class="line">            <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">                jedisUtils.getSeqNext(lockName, <span class="number">0</span>);</span><br><span class="line">                jedisUtils.expire(lockName, expireTime &lt;= <span class="number">0</span> ? Constants.ExpireTime.ONE_HOUR : expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> reVal = jedisUtils.getSeqNext(lockName, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span>l == reVal) &#123;</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                result = <span class="keyword">Boolean</span>.<span class="keyword">TRUE</span>;</span><br><span class="line">                LOGGER.info(<span class="string">"获取redis锁:"</span> + lockName + <span class="string">",成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"获取redis锁:"</span> + lockName + <span class="string">",失败"</span> + reVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"获取redis锁失败:"</span> + lockName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁，直接删除key(直接删除会导致任务重复执行，所以释放锁机制设为超时30s)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Boolean</span> releaseLock(String lockName) &#123;</span><br><span class="line">        <span class="keyword">Boolean</span> result = <span class="keyword">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisUtils.expire(lockName, Constants.ExpireTime.TEN_SEC);</span><br><span class="line">            LOGGER.info(<span class="string">"释放redis锁:"</span> + lockName + <span class="string">",成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"释放redis锁失败:"</span> + lockName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a><strong>控制层</strong></h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a><strong>LoginController</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/login"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="title">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆接口</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/loginWeb"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWeb(HttpServletResponse response,</span><br><span class="line">                        <span class="meta">@RequestParam(<span class="meta-string">"userId"</span>)</span> String userId,</span><br><span class="line">                        <span class="meta">@RequestParam(<span class="meta-string">"password"</span>)</span> String password) throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.login(userId, password, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * JWT设置失效时间为当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/logout"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo logout(HttpServletRequest request)&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.logout(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/sendVerificationCode"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo sendVerificationCode(String phone) throws ClientException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sendVerificationCode(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 验证用户信息和验证码，并注册用户，成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wxRegisterVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/wxRegister"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo wxRegister(WxRegisterVo wxRegisterVo, HttpServletResponse response) throws ClientException,UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.wxRegister(wxRegisterVo,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wx登录验证ticket，生成本地token，由本地来管理token生命周期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/loginWx"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWx(String code,HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">""</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.loginWx(code,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取登录用户基础信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/userInfo"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo userInfo() &#123;</span><br><span class="line">        User user = userService.findByUserId(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()));</span><br><span class="line"><span class="comment">//        //查询菜单</span></span><br><span class="line"><span class="comment">//        List&lt;ResourceNode&gt; menus = resourceService.findByUserId(user.getId());</span></span><br><span class="line"><span class="comment">//        //查询权限</span></span><br><span class="line"><span class="comment">//        List&lt;Object&gt; authorityList = authorityService.findByUserId(user.getId());</span></span><br><span class="line">        <span class="keyword">return</span> response(user, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有人都可以访问，但是用户与游客看到的内容不同</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/article"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo article() &#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are already logged in"</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are guest"</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登入的用户才可以进行访问</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_auth"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requireAuth() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are authenticated"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//admin的角色用户才可以登入</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_role"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(<span class="meta-string">"admin"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requireRole() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are visiting require_role"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拥有view和edit权限的用户才可以访问</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_permission"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(logical = Logical.AND, value = &#123;<span class="meta-string">"view"</span>, <span class="meta-string">"edit"</span>&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requirePermission() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are visiting permission require edit,view"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = <span class="meta-string">"/401"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo unauthorized() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">401</span>, <span class="string">"Unauthorized"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a><strong>UserController</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 新增用户</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/createNewUser"</span>)</span><br><span class="line">    public BaseVo createNewUser(<span class="built_in">String</span> userId,</span><br><span class="line">                                <span class="meta">@RequestParam</span>(required = <span class="keyword">false</span>) <span class="built_in">String</span> openid,</span><br><span class="line">                                <span class="built_in">String</span> pwd,</span><br><span class="line">                                <span class="built_in">String</span> userName,</span><br><span class="line">                                <span class="built_in">String</span> nickName,</span><br><span class="line">                                <span class="built_in">String</span> school,</span><br><span class="line">                                <span class="built_in">String</span> department,</span><br><span class="line">                                <span class="built_in">String</span> major,</span><br><span class="line">                                <span class="built_in">String</span> classname,</span><br><span class="line">                                Integer grade,</span><br><span class="line">                                <span class="built_in">String</span> sex,</span><br><span class="line">                                <span class="built_in">String</span> address,</span><br><span class="line">                                <span class="built_in">String</span> phone,</span><br><span class="line">                                <span class="built_in">String</span> imgUrl) &#123;</span><br><span class="line">        java.sql.Timestamp regTime = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> userService.createNewUser(<span class="keyword">new</span> User(userId,</span><br><span class="line">                openid,</span><br><span class="line">                pwd,</span><br><span class="line">                userName,</span><br><span class="line">                nickName,</span><br><span class="line">                school,</span><br><span class="line">                department,</span><br><span class="line">                major,</span><br><span class="line">                classname,</span><br><span class="line">                grade,</span><br><span class="line">                sex,</span><br><span class="line">                regTime,</span><br><span class="line">                address,</span><br><span class="line">                phone,</span><br><span class="line">                imgUrl));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 修改用户密码</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param userPassword</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/changePwd"</span>)</span><br><span class="line">    public BaseVo changePwd(UserPasswordVo userPassword) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.changePwd(userPassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 修改用户信息</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 性别，昵称等</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/changeUserInfo"</span>)</span><br><span class="line">    public BaseVo changeUserInfo(<span class="built_in">String</span> nickName, <span class="built_in">String</span> address,<span class="built_in">String</span> imgUrl) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.changeUserInfo(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()),</span><br><span class="line">                nickName, address,imgUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 根据用户ID查询其所有权限</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAllRoleAccessByUserId"</span>, method = RequestMethod.POST)</span><br><span class="line">    public BaseVo findAllRoleAccessByUserId() &#123;</span><br><span class="line">        User user = userService.findByUserId(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()));</span><br><span class="line">        <span class="built_in">List</span>&lt;RoleAccess&gt; views = userService.findAllRoleAccessByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">return</span> response(views, views.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 根据参数查询用户数据</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAllUserByParm"</span>, method = RequestMethod.POST)</span><br><span class="line">    public BaseVo findAllUserByParm(<span class="built_in">String</span> school, <span class="built_in">String</span> department, <span class="built_in">String</span> grade, <span class="built_in">String</span> major, <span class="built_in">String</span> className, <span class="built_in">String</span> sex, <span class="built_in">String</span> studentId, <span class="built_in">String</span> studentName, <span class="built_in">int</span> page, <span class="built_in">int</span> limit) &#123;</span><br><span class="line">        Page&lt;User&gt; views = userService.findAllUserByParm(school,department,grade,major,className,sex,studentId,studentName,page,limit);</span><br><span class="line">        <span class="comment">//当前结果合集</span></span><br><span class="line">        <span class="built_in">List</span>&lt;User&gt; content = views.getContent();</span><br><span class="line">        <span class="comment">//结果总行数</span></span><br><span class="line">        <span class="built_in">int</span> size = (<span class="built_in">int</span>) views.getTotalElements();</span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">        content.forEach(apply-&gt;jsonArray.add(apply));</span><br><span class="line">        <span class="keyword">return</span> response(jsonArray, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      通过案例简单整理一下Web项目的用户权限系统设计思路。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="spring" scheme="http://linyishui.top/tags/spring/"/>
    
      <category term="shiro" scheme="http://linyishui.top/tags/shiro/"/>
    
      <category term="redis" scheme="http://linyishui.top/tags/redis/"/>
    
      <category term="jwt" scheme="http://linyishui.top/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>提高写作能力-金字塔结构</title>
    <link href="http://linyishui.top/2019052501.html"/>
    <id>http://linyishui.top/2019052501.html</id>
    <published>2019-06-20T22:52:42.000Z</published>
    <updated>2019-06-24T13:20:37.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a><strong>引文</strong></h1><h2 id="如何快速的加强写作能力"><a href="#如何快速的加强写作能力" class="headerlink" title="如何快速的加强写作能力"></a><strong>如何快速的加强写作能力</strong></h2><p>&emsp;个人的写作能力是很难去提高的，就像练字一样需要大量的练习训练和模仿学习。但文章的结构却是比较容易改进的，即句子间的组织顺序，在很多情况下我们作为阐述者表达思想时的顺序和读者的理解顺序是有矛盾的。</p><p>&emsp;那么问题来了，我们作为读者时习惯怎样的顺序呢？</p><p>&emsp;<strong>读者习惯的顺序为一个典型的金字塔结构，也就是自顶向下的学习方法。</strong>首先会了解最主要的，最抽象的思想；然后再了解次要的，为主要思想提供支持的思想。思想间可以有纵向关系，即上层思想是下层思想的总结，也可以有横向关系，多个思想可以共同构成一个逻辑推理过程，可以并列的组合在一起。比较流行的思维导图也比较类似，我会在后面的内容中整理一下二者的关系。</p><p>&emsp;应用在写作中就是我们先用总结性的语言表达主要思想，会让读者对这些内容产生某些疑问，然后下一层的思想就是对这些疑问的回答，通过不断的疑问+回答的过程，也就让读者了解到了文章中的全部思想。</p><p>&emsp;<strong>人类有一个共同的特点，即只有通过某种方式将思想表达出来(如写作或阐述)，才可以准确的把握自己的思想。</strong>我在早前的学习生涯中也意识到了这个问题，所以在学习编程时就刻意的克服自己的惰性，强迫自己在学习后抽时间整理一些博客，但在读这本书之前我只是意识到这样做可以让我对知识掌握的更牢固，并没有了解其中的意义和原理。所以通过此系列笔记希望自己能够在学习写作的同时也整理好一套自己将来要一直沿用的学习方法。</p><h1 id="为什么要用金字塔结构"><a href="#为什么要用金字塔结构" class="headerlink" title="为什么要用金字塔结构"></a><strong>为什么要用金字塔结构</strong></h1><p>&emsp;因为符合人类的思维习惯，更方便读者理解。</p><h2 id="习惯：归类分组"><a href="#习惯：归类分组" class="headerlink" title="习惯：归类分组"></a><strong>习惯：归类分组</strong></h2><p>&emsp;大脑会习惯于将可以共性的事物组织起来，方便记忆。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如书中所举例子：</span><br><span class="line"></span><br><span class="line">湖泊 <span class="string">| 糖</span></span><br><span class="line">靴子 <span class="string">| 盘子</span></span><br><span class="line">女孩 <span class="string">| 袋鼠</span></span><br><span class="line">铅笔 <span class="string">| 汽油</span></span><br><span class="line">宫殿 <span class="string">| 自行车</span></span><br><span class="line">铁路 <span class="string">| 大象</span></span><br><span class="line">书本 <span class="string">| 牙膏</span></span><br></pre></td></tr></table></figure><p>&emsp;如果我们设想一个场景将左右词语关联起来，如糖在湖泊中溶解，靴子立在盘中等，然后遮盖右边的情况下可以试试能不能直接根据左侧记起其对应的词语。对于大部分人来说，根据这种关联可以轻松记忆这种级别的项目数。</p><p>&emsp;在我们要理解和记忆新的知识时，会发生同样的组织思想的现象，比如我自己以前的场景举例子：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我第一次看到我的wifi密码 xjjrstzk，我很难去记住它，当需要重新输入密码的场景，就必须要拍照然后对着输入才行。</span><br><span class="line">几次之后我就尝试着将其抽象为 小鸡鸡日死他zk<span class="comment">(不太文雅)</span>，以后就随时都可以回想起来，但随着一段比较长的时间没有再用过之后，我发现后面两位记不住了，慢慢的记成了xjjrstk。</span><br></pre></td></tr></table></figure><p>&emsp;根据这些例子，可以发现大脑在理解和记忆时的两个需求：</p><ol><li>我们很难一次记忆超过7个思想、概念或项目</li><li>我们习惯找出逻辑关系</li></ol><h3 id="数字7"><a href="#数字7" class="headerlink" title="数字7"></a><strong>数字7</strong></h3><p>&emsp;大脑一次能记忆的数量是有限的，如超过4或5个时，就会开始分类来方便记忆。有人认为大脑的短期记忆无法一次容纳7个以上的记忆项目。</p><h3 id="记忆的过程"><a href="#记忆的过程" class="headerlink" title="记忆的过程"></a><strong>记忆的过程</strong></h3><ol><li>归类分组，组成金字塔</li><li>找出逻辑关系，抽象概括</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">举例：有食品为葡萄，牛奶，土豆，鸡蛋，胡萝卜，橘子，咸鸭蛋，苹果，酸奶。</span><br><span class="line">一次性的直接记下这些是比较困难的，所以我们会建立如下结构:</span><br><span class="line"></span><br><span class="line">蛋奶制品<span class="comment">(牛奶，鸡蛋，咸鸭蛋，酸奶)</span></span><br><span class="line">水果<span class="comment">(葡萄，橘子，苹果)</span></span><br><span class="line">蔬菜<span class="comment">(土豆，胡萝卜)</span></span><br><span class="line"></span><br><span class="line">但仅仅分组是不够的，只归类分组实际上还是要记忆<span class="number">9</span>个概念，我们需要的是只记忆高级抽象的三个概念，提高我们的抽象层次，而不用再分别记忆底层的每个概念，当我们回忆较高层次时总会能提示到下面层次的内容，而且他们之间是比较强的关系，更容易去记忆。</span><br><span class="line"></span><br><span class="line">如以上我们只需加强记忆蛋类制品，水果，蔬菜，而下一级仅仅做模糊记忆即可。可以在生活中通过一些例子来不断地训练这种强化记忆的方法，并牢牢掌握。</span><br></pre></td></tr></table></figure><h3 id="自上而下表达，结论先行"><a href="#自上而下表达，结论先行" class="headerlink" title="自上而下表达，结论先行"></a><strong>自上而下表达，结论先行</strong></h3><p>&emsp;读者的大脑只能逐句来理解作者表达的思想，所以他们会假定一起出现的思想在逻辑上一定存在某种关系，如果我们的表达没有体现我们的思维逻辑，那么读者会从中自行寻找共同点，再进行归类组合以便于理解各个组合的意义。但因为读者的知识背景和理解力千差万别，就算有读者可以根据内容做出和作者100%符合的解读，也会因为文章缺乏逻辑性而造成了很大的阅读难度，往往大部分读者只能自己去理解，所以其可能只能获取到文章中的部分思想。</p><p>我们假设一个场景在和朋友聊天</p><p>朋友讲：“上星期我去了趟天津，你应该知道，天津是一个节奏比较慢的城市。我们去了一家餐馆吃饭，然后你知道什么情况吗？我们在10分钟里面见到了至少15个光头。”</p><p>首先我们设定自己是想要回应对方的，如果我们并没有很在意这段对话，往往不会多做分析，甚至未必听的清楚，只会礼貌性的笑笑。那么我们在听这段话时，会预期性的推测对方传递这段信息的原因，并不断的调整自己的思路，如这段话，我们可能会觉得他想讲对天津的看法，或者他对光头比较好奇，或者他想谈一下这次旅行的感受。</p><p>因为我们没办法判断其想法，所以此时我们往往会等待其下文。</p><p>“如果你沿着北京这边的大道走，你基本上看不到有头发的人，也看不到有人戴帽子。”</p><p>现在理解呢，他好像不是在谈城市，似乎他对光头有看法，可能他觉得光头是比较滑稽或者丢人的事情，但我还是不清楚他的观点，所以我只能象征性做出简单的回应。</p><p>“我家乡从我小时候开始就全是光头了，哈哈”</p><p>噢，原来他想说他家乡是光头文化的发源地，那我就附和他好了。</p><p>“原来大家剃光头都是从你们那里学的。”</p><p>但其实朋友想说的是“现在光头好普遍，在天津….，在北京…，在我家乡…”，当我明确的告诉你每段之间的关系时，你就很容易的按照我的方式来理解我的想法，当我没有告知时，不同的读者可能就有各自的理解了(看每句话后的理解也算是按照作者想阐述的方式来理解，可能你本人不会这样想，但看了这些后就会按照这种形式来理解了)。</p><p>大部分读者会因为要花费过多的脑力在理解你想阐述的想法而感到厌烦，本身应该浪费脑力的是知识，但因为文字顺序等问题，理解你文字的意思反而成了更消耗脑力的事情。</p><h3 id="自下而上思考，总结概括"><a href="#自下而上思考，总结概括" class="headerlink" title="自下而上思考，总结概括"></a><strong>自下而上思考，总结概括</strong></h3><p>创作时，作者的思路是自下而上的总结，但文章的结构要转变为自下而上的顺序。</p><p>当我们将有共性的一些句子组合在一起，组成一个段落，并为之生成一个概括性的句子时，就相当于做了一层更高级的抽象。段落此时就可以看作是一个单独的思想，同样可以对段落进行组合，形成一个章节。这种形成金字塔结构的过程要求我们对单元进行总结，其实就是在作者的认知中这些单元具有逻辑关系，并通过这种形式表达给读者。</p><p>最终，金字塔必然有塔顶，最后的顶点思想即文章的中心思想，也是我们想要表达的思想。</p><blockquote><p>可以大概整理出金字塔结构的文章规范：</p><ol><li>纵向：文章中任意层次上的思想必须是下一层次思想的概括。</li><li>横向：每组中的思想必须属于同一个逻辑范畴。</li><li>横向：每组中的各个思想必须按照逻辑顺序组织。</li></ol></blockquote><blockquote><p>4种逻辑顺序</p><ul><li>演绎顺序：大前提，小前提，结论</li><li>时间/步骤顺序：第一，第二，第三</li><li>结构/空间顺序：波士顿，纽约，华盛顿</li><li>程度/重要性顺序：最重要，次重要，等等</li></ul></blockquote><p>逻辑顺序表示作者的思路，也是大脑仅有的四种组织思想的顺序，在写作之前请检验一下自己的思路是否可以融入金字塔结构，如果不符合的话可能是你的思路有问题，或者你的思路还不能充分完善，或是你的思路和读者的理解顺序有冲突。</p><h1 id="金字塔内部结构"><a href="#金字塔内部结构" class="headerlink" title="金字塔内部结构"></a><strong>金字塔内部结构</strong></h1><h2 id="梳理思想，组织结构"><a href="#梳理思想，组织结构" class="headerlink" title="梳理思想，组织结构"></a><strong>梳理思想，组织结构</strong></h2><p>大部分写作场景往往是自己仅仅有模糊的想法，在你用文字描述出来之前，你还不能准确的把握住自己的想法，甚至你以为自己已经想清楚的想法，在写作的过程中也是再思考的过程阐述出来后都不会很准确。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如我当前的博客通常是两种情况，一是还未掌握某个技术或知识点，通过类似笔记的方式来将其描述出来，此时的文章内容是很混乱的，所以之前我必须再自己再阅读几遍进行修改，否则可能时间久了自己都未必能理解当时的想法了<span class="number">233333</span>；二就是已经较为熟悉的知识，通过总结为文章进行加强记忆和二次学习，这种情况我可以在写之前大致先想好大纲和目录，但写着写着就发现一些关联知识点有点陌生了，就要改变最初的设计。</span><br></pre></td></tr></table></figure><p>所以将思想组织为金字塔结构并不是在最开始就可以完成的工作，我们需要通过科学的方法对思想进行逻辑梳理。</p><h3 id="纵向关系"><a href="#纵向关系" class="headerlink" title="纵向关系"></a><strong>纵向关系</strong></h3><p>文章因为本身限制了单向一维的阅读过程，所以会掩盖了本身思想的金字塔结构。</p><p>纵向关系，可以通过问答的形式，使读者更容易且更深入的了解你的思想。</p><blockquote><p>为什么纵向关系会有这些特点？</p><p>因为问答紧扣读者的求知欲，使读者有更多的兴趣去了解你的思路，并强迫读者按照你的思路产生符合逻辑的反应。人类阅读都是伴随着目的性的，当我们的文章是为了阐述思想时，面向的必然是那些想要了解相关知识的读者，人类普遍不会感兴趣于已知的内容，而对未知的内容会有很大的兴趣。</p><p>我们在阐述新的信息时，必然会使读者产生对逻辑性的疑问，所以我们会在下一层级上横向的解答读者可能的疑问，当然这些解答也可能对于读者来讲是新的知识，这又产生了新的疑问，这样的迭代问答过程直到读者不在有疑问。</p></blockquote><p>为了更好的吸引读者的注意力，我们需要保证：在准备回答之前不会使读者产生疑问，在产生疑问之前不会提前告知问题的答案。 否则可以设想如果这样做的场景，如一篇文章《失恋少女卧床不起竟越来越美，现实版睡美人原来因为晚上偷吃》，在读者还没产生疑问之前，答案就已经出炉了，之后的文章内容就只能是再做重复描述了。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905250101.png" alt="问答式对话"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一条分支：</span><br><span class="line"></span><br><span class="line">猪应该被当作宠物来养。因为首先猪很漂亮；其次，猪可以培育出很多的品种。</span><br><span class="line"></span><br><span class="line">“为什么猪很漂亮？”</span><br><span class="line"></span><br><span class="line">猪很漂亮，因为猪很肥，而且猪有典型的英国特征。</span><br><span class="line"></span><br><span class="line">“肥胖有什么漂亮的？”</span><br><span class="line"></span><br><span class="line">肥胖可以让其他人显得苗条，也可以让肥胖的人更谦虚。</span><br></pre></td></tr></table></figure><p>当然读者未必同意作者的论述，但读者可以清晰的明白其思路过程，也不再有疑问了，至此第一分支结束。第二分支同样，这样的表达方式比较清晰，因为其思想的组织一直围绕着主题引发的读者疑问。</p><h3 id="横向关系"><a href="#横向关系" class="headerlink" title="横向关系"></a><strong>横向关系</strong></h3><p>下一层次的表述需要能够解答上一层次的疑问，要保证表述之间的逻辑性，所以表述必须要有归纳或演绎关系，两者是横向仅有的逻辑关系。</p><p>演绎：演绎法即三段论，现象的表述，对前者的主语或谓语的表述，以上二者同时存在时所具有的含义，即得到的推论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所有人都会死</span><br><span class="line">苏格拉底是人</span><br><span class="line">所以苏格拉底会死</span><br></pre></td></tr></table></figure><p>归纳：用一个名词表示小组中的所有思想，保证所有论述都有共同点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三在背英语单词</span><br><span class="line">李四也在背英语单词</span><br><span class="line">英语老师下一节可能要提问单词了</span><br></pre></td></tr></table></figure><h3 id="序文结构"><a href="#序文结构" class="headerlink" title="序文结构"></a><strong>序文结构</strong></h3><p>引导读者处于作者的观察角度：背景，冲突，疑问，回答。以这种叙述故事的形式来构造序言，可以使读者能够更容易理解这部分内容。通过介绍冲突的背景，引起读者的疑问，并提出最顶端的总结思想作为回答，必然使读者产生新的疑问，并带着疑问开始阅读文章正文内容。</p><p>通过纵向的疑问/回答式对话，横向的演绎和归纳推理，讲故事式的序言这三类结构可以帮助我们找到构建金字塔的思想。</p><h1 id="如何构建金字塔"><a href="#如何构建金字塔" class="headerlink" title="如何构建金字塔"></a><strong>如何构建金字塔</strong></h1><h2 id="梳理思想，组织结构-1"><a href="#梳理思想，组织结构-1" class="headerlink" title="梳理思想，组织结构"></a><strong>梳理思想，组织结构</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人开发集成代码库项目</title>
    <link href="http://linyishui.top/2019062001.html"/>
    <id>http://linyishui.top/2019062001.html</id>
    <published>2019-06-20T07:26:40.000Z</published>
    <updated>2019-07-03T08:05:56.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a><strong>前文</strong></h1><h2 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a><strong>写作目的</strong></h2><p>&emsp;此篇博客为导引博客，记录我最近准备开发的一个个人项目，会实现一些已掌握和准备学习的技术，并没有特定的需求，类似于代码库的感觉。代码应该暂时不会公开，但应该会通过博客的方式简单的记录一下涉及到的技术和大部分代码。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a><strong>计划</strong></h2><p>&emsp;因为最近工作较忙的原因，所以开发和写作的速度和质量应该会比较差，而且不太确定会不会太监，所以希望我能勤快一些吧。</p><h1 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a><strong>一、需求分析</strong></h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h2><ol><li>学习和复习相关技术</li><li>实现实际可能存在的需求，尽量的以一个统一的需求即有一个顶层需求的方式来构建此项目(暂定为社交平台)。</li></ol><h2 id="功能列表（持续更新）"><a href="#功能列表（持续更新）" class="headerlink" title="功能列表（持续更新）"></a><strong>功能列表（持续更新）</strong></h2><p>&emsp;按实现时间排序：</p><ol><li>多平台：Web网站 + 微信小程序 + 更多可能的扩展</li><li>前后端分离</li><li>登陆、注册、角色权限管理</li><li>视频上传、视频流播放、视频分类、标签、点赞、收藏、评论以及相关的管理功能等</li><li>各种工作的审批流</li><li>短信、邮件、二维码</li><li>数据导出Word、Excel、Pdf等格式文件</li></ol><p>&emsp;按模块划分：</p><h2 id="（暂无）"><a href="#（暂无）" class="headerlink" title="（暂无）"></a>（暂无）</h2><h1 id="二、概要设计"><a href="#二、概要设计" class="headerlink" title="二、概要设计"></a><strong>二、概要设计</strong></h1><h2 id="基本架构（持续更新）"><a href="#基本架构（持续更新）" class="headerlink" title="基本架构（持续更新）"></a><strong>基本架构（持续更新）</strong></h2><p>&emsp;从单一项目的分层架构慢慢转向微服务架构</p><p>(暂无)[架构图.jpg]</p><h2 id="相关技术（持续更新）"><a href="#相关技术（持续更新）" class="headerlink" title="相关技术（持续更新）"></a><strong>相关技术（持续更新）</strong></h2><p>&emsp;关键词：</p><ol><li>Spring Boot</li><li>Tomcat</li><li>Jpa</li><li>SqlServer</li><li>Oracle</li><li>Redis</li><li>Shiro</li><li>JWT</li><li>Restful</li><li>thymeleaf</li><li>log4j</li><li>lombok</li><li>swagger</li><li>fastjson</li><li>aliyun.mns</li><li>poi</li><li>itext</li></ol><h2 id="流程设计（持续更新）"><a href="#流程设计（持续更新）" class="headerlink" title="流程设计（持续更新）"></a><strong>流程设计（持续更新）</strong></h2><h2 id="模块划分（持续更新）"><a href="#模块划分（持续更新）" class="headerlink" title="模块划分（持续更新）"></a><strong>模块划分（持续更新）</strong></h2><h2 id="逻辑模型（持续更新）"><a href="#逻辑模型（持续更新）" class="headerlink" title="逻辑模型（持续更新）"></a><strong>逻辑模型（持续更新）</strong></h2><h2 id="接口文档（持续更新）"><a href="#接口文档（持续更新）" class="headerlink" title="接口文档（持续更新）"></a><strong>接口文档（持续更新）</strong></h2><hr><h1 id="三、详细设计"><a href="#三、详细设计" class="headerlink" title="三、详细设计"></a><strong>三、详细设计</strong></h1><h2 id="物理模型（持续更新）"><a href="#物理模型（持续更新）" class="headerlink" title="物理模型（持续更新）"></a><strong>物理模型（持续更新）</strong></h2><h2 id="相关算法（持续更新）"><a href="#相关算法（持续更新）" class="headerlink" title="相关算法（持续更新）"></a><strong>相关算法（持续更新）</strong></h2><h2 id="类结构（持续更新）"><a href="#类结构（持续更新）" class="headerlink" title="类结构（持续更新）"></a><strong>类结构（持续更新）</strong></h2><hr><h1 id="四、编码说明"><a href="#四、编码说明" class="headerlink" title="四、编码说明"></a><strong>四、编码说明</strong></h1><h2 id="实现代码（持续更新）"><a href="#实现代码（持续更新）" class="headerlink" title="实现代码（持续更新）"></a><strong>实现代码（持续更新）</strong></h2><hr><h1 id="五、测试说明"><a href="#五、测试说明" class="headerlink" title="五、测试说明"></a><strong>五、测试说明</strong></h1><h2 id="测试流程（持续更新）"><a href="#测试流程（持续更新）" class="headerlink" title="测试流程（持续更新）"></a><strong>测试流程（持续更新）</strong></h2><hr><p><em>参考博客和文章书籍等：</em></p><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      整理工作和学习中所用技术，持续更新中。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="others" scheme="http://linyishui.top/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>用户权限设计</title>
    <link href="http://linyishui.top/2019052301.html"/>
    <id>http://linyishui.top/2019052301.html</id>
    <published>2019-06-13T02:17:26.000Z</published>
    <updated>2019-06-13T10:02:17.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户权限系统设计"><a href="#用户权限系统设计" class="headerlink" title="用户权限系统设计"></a><strong>用户权限系统设计</strong></h1><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a><strong>案例说明</strong></h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h3><p>&emsp;&emsp;实现一个公司大楼保安系统，识别所有进入人员身份，不同身份人员能进入房间区域受限，保护公司的财产安全</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a><strong>设计思路</strong></h3><blockquote><p>一、首先需要使身份信息具有安全性以及可维护性，并能随时读取</p><ol><li>人员信息数据要持久化存储，创建T_USERS(ID,NAME,PWD)来存储用户信息</li><li>引入密码-加密(如密码hash等)，加强安全性</li></ol><p>二、不同身份要对应到不同的权限，并能加以管理和验证</p><ol><li>可以通过RBAC系列模型来设计用户角色权限的数据库模型</li></ol><p>三、避免用户和保安对话时密码被窃听</p><ol><li>引入RSA非对称加密+数字签名算法构成HTTPS，保证无法被窃听，篡改。</li></ol><p>四、确保员工办公室只有自己能进去</p><ol><li>每个办公室加一个门卫，员工进入大楼内每个门都需要进行一次身份验证</li></ol><p>五、防止机密信息外泄，限制内部人员权力</p><ol><li>引入Token令牌，存储身份和权限信息，保证时效性，只有主门卫有权限校对密码信息</li></ol><p>六、保证令牌的真实性和有效性</p><ol><li>存储令牌信息，方便定时更新和查询</li></ol><p>七、门卫权限过大，令牌数据量大时难以维护和优化</p><ol><li>去除令牌持久化设计，通过数字校验来验证令牌</li></ol></blockquote><p>验证流程：</p><ol><li><p>用户登录：请求Login，主门卫读用户表验证身份信息，确认后通过私钥生成一份数字签名(明文+签名)</p></li><li><p>用户进入各个房间：各门卫用公钥解密签名，校验结果和明文，确认真实性，再读取明文数据确定权限。</p></li></ol><p>&emsp;&emsp;根据以上思路可以确定需要技术池；HASH密码，RSA，数字签名算法，HTTPS，JWT。即基于Token的Web认证。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">现在新增需求：系统要记录所有房间的人员进出记录，记录每个人员进出大楼的次数，高层可以中断某人员的进入权限。</span><br><span class="line"></span><br><span class="line">此时会发现基于<span class="built_in">Token</span>的认证因为是无状态的，所以无法及时撤销员工的进出权限，而记录接口进出记录需要在每次认证时记录数据，可以通过AOP在通过认证跳往接口前记录访问数据，记录进入次数即统计登录次数，只需在登录接口根据统计需求实现即可。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;</p><h2 id="功能实战"><a href="#功能实战" class="headerlink" title="功能实战"></a><strong>功能实战</strong></h2><p>关键词：Spring Boot + SqlServer + Jpa + Shiro + ehcache + JWT + HTTPS + RSA</p><hr><h2 id="实战设计"><a href="#实战设计" class="headerlink" title="实战设计"></a><strong>实战设计</strong></h2>]]></content>
    
    <summary type="html">
    
      通过案例简单整理一下Web项目的用户权限系统设计思路。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="session" scheme="http://linyishui.top/tags/session/"/>
    
      <category term="token" scheme="http://linyishui.top/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>常见的安全漏洞和攻击方式</title>
    <link href="http://linyishui.top/2019052201.html"/>
    <id>http://linyishui.top/2019052201.html</id>
    <published>2019-05-22T08:32:41.000Z</published>
    <updated>2019-06-13T02:23:35.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="防跨站"><a href="#防跨站" class="headerlink" title="防跨站"></a><strong>防跨站</strong></h2><p>&emsp;&emsp;跨站攻击：通过跨站点脚本，注入前端主要是HTML，当其它用户获取这些被注入的代码后，会窃取用户敏感cookie信息，攻击者根据这些信息进行会话劫持，直接以合法用户身份登陆账户。</p><p>&emsp;&emsp;CSRF(跨站请求伪造)：Crossing Site Recource Forge。</p><p>大致的触发流程是：</p><ol><li>用户登录了站点A，并且在Cookie中留下了A站点的认证信息</li><li>用户进入了站点B，而站点B用一些方式（比如一个提交行为是到A站点某关键接口的表单）引诱用户去点击。当用户点击时，会发出到A站点的请求。而浏览器会给这个请求附带上A站点的认证信息，从而让这个请求能够执行。这种行为可能是，但不限于，给某个A站点的某个其他用户提权/转账/发文辱骂等等。</li></ol><p>&emsp;&emsp;解决方案(部分可参考<a href="../2019052101.html" title="Title">Cookie，Session，Token</a>)：</p><ol><li>编码和过滤，将HTML字符转换为HTMLEntities编码，对js代码进行转义。</li><li>避免使用cookie，而使用Local Storage，但会使XSS攻击更容易。</li><li>使用CSRF Token作表单验证。</li><li>给所有接口都添加一个请求secret，来标记其来自于合法的客户端。</li><li>用Same-Site Cookie限制站点必须同域名才能携带cookie。</li><li>总是用json格式提交，禁止允许跨域的application/x-www-form-urlencoded格式，而使用application/json。</li><li>双认证，认证信息同时存放在HttpOnly Cookie和Authorization Header，并在服务器对比。</li><li>使用HTTPS，将Cookie设置为Secure，浏览器就可以只在访问https网址时才会携带Cookie。</li></ol><hr><h2 id="防注入"><a href="#防注入" class="headerlink" title="防注入"></a><strong>防注入</strong></h2><p>SQL注入：将SQL命令隐藏在表单提交等请求中，达到欺骗服务器执行恶意的SQL操作。</p><p>解决方案：<br>1.使用预编译，不要拼接字符串<br>2.添加过滤<br>3.前端检测</p><hr><h2 id="防篡改"><a href="#防篡改" class="headerlink" title="防篡改"></a><strong>防篡改</strong></h2><p>防止网页解决方案：<br>1.外挂轮询，通过检测程序，用轮询的方式判断网页完整性。<br>2.核心内嵌，在Web服务器中增加篡改检测模块，在网页流出时检查，被篡改时阻断访问，报警并恢复。<br>3.事件触发，利用操作系统的文件系统接口。</p><p>防止参数篡改：<br>参数加密</p><hr><h2 id="防挂马"><a href="#防挂马" class="headerlink" title="防挂马"></a><strong>防挂马</strong></h2><p>挂马：即在网页中添加木马脚本。</p><p>解决方案：服务器端防止文件被读写。</p><hr><h2 id="防黑客"><a href="#防黑客" class="headerlink" title="防黑客"></a><strong>防黑客</strong></h2><p>解决方案：好的安全框架+成熟的服务器安全系统。</p><hr><h2 id="DNS攻击"><a href="#DNS攻击" class="headerlink" title="DNS攻击"></a><strong>DNS攻击</strong></h2><p>服务器端解决</p>]]></content>
    
    <summary type="html">
    
      介绍常见的安全漏洞和攻击方式。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="security" scheme="http://linyishui.top/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Cookie，Session，Token</title>
    <link href="http://linyishui.top/2019052101.html"/>
    <id>http://linyishui.top/2019052101.html</id>
    <published>2019-05-21T08:54:27.000Z</published>
    <updated>2019-06-13T02:22:44.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h1><h2 id="Web认证技术的演变"><a href="#Web认证技术的演变" class="headerlink" title="Web认证技术的演变"></a><strong>Web认证技术的演变</strong></h2><p>&emsp;&emsp;早期的网站功能简单，访问量小，只要通过HTTP请求访问一个个资源就满足了需求。但随着交互式网站的发展，此时Web需要记录用户的状态等信息来维护会话，而HTTP是无状态的，所以就开始使用sessionid来标记用户请求，用来当作密匙区分用户。</p><p>&emsp;&emsp;sessionid的作用使其需要双边保存，随着访问用户的迅速增加，服务器端很难去维护动辄数十万百万的sessionid，所以就极大的限制了服务器的性能。一个小小的sessionid就引出了集群，负载均衡，主从备份等问题。所以如果可以从根源上替代sessionid，用好的设计来减少服务器的维护工作就变得尤为重要。</p><p>&emsp;&emsp;既然sessionid是为了验证用户身份，那么可不可以只让用户保存，也能来验证其合法性呢？token即令牌便是由此而来，就像古时君王赐予手下主将的虎符，当用户首次登陆验证后，系统就赐予用户token，以后用户就可以根据token来表明其身份，而不用每次都向系统进行验证。</p><p>&emsp;&emsp;因为Token的无状态设计，所以解决了Session机制导致的问题，但其也受限于无状态的设计，对于一些用户信息的管理必须要依赖于有状态时就显得不是那么适用了。</p><hr><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;&emsp;cookie就是指浏览器中能持久存储的某种数据，由服务器生成发送给浏览器，浏览器以KV映射的形式保存cookie到指定目录下，在以后的请求中会一起把这部分数据发送给服务器。因为cookie保留在客户端，所以如今流行的浏览器对cookie加了诸多安全限制。</p><hr><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a><strong>Session</strong></h1><p>&emsp;&emsp;session即会话，服务器要确认当前对话对象身份，所以要给各个客户端分配不同的身份标识，客户端将身份标识存储在cookie中，在请求时一同发送给服务器，服务器端则通过session把用户信息临时存储在服务器上。</p><p>&emsp;&emsp;基于Session认证就是客户端要存储一份sessionid，请求时携带sessionid，服务器端维护session数据，并根据sessionid查询用户信息。</p><hr><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a><strong>Token</strong></h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;&emsp;token即令牌，用来通过对密匙和用户ID进行加密，生成对应的签名，返回给用户。用户发起请求时需要携带签名，服务器根据相同加密算法和签名进行校对，来判断数据是否被修改。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a><strong>JWT</strong></h2><p>&emsp;&emsp;JWT即Json Web Token，其主要结构如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">base64</span><span class="params">(header)</span></span>.base64(json payload).signature</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"alg"</span> : <span class="string">"HS256"</span>, <span class="comment">//加密算法</span></span><br><span class="line">    <span class="string">"typ"</span> : <span class="string">"JWT"</span> <span class="comment">//Token类型</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    username : <span class="string">'xxx'</span>,</span><br><span class="line">    email : <span class="string">'sa@xxx.com'</span>,</span><br><span class="line">    role : <span class="string">'user'</span>,</span><br><span class="line">    exp : <span class="number">123123123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>header即头部，用来描述一些基本信息，比如这个token是用什么算法签名的，是什么版本的等等。</li><li>payload即负载，就是一个json object。你可以任意放置你想要的信息，只要符合json的格式即可。标准中已经规定好了有一些字段的意思，比如iat表示issue at，token签发的时间；exp表示token过期的时间等等。根据这些约定就可以实现一些小的代码库来检查比如token是不是过期了等等。但是请注意，很多人误解，认为JWT是加了密的，但其实payload是明文的。</li><li>signature是一个签名。服务器端可以自行选择一个算法和一个secret，与payload拼接上，得到一个签名。secret并不会在网络中传输，所以客户端无法伪造一个JWT。这样，一旦一个签名生成，再传回给服务器，服务器就可以知道这个token是不是它当初生成的。</li></ul><p>&emsp;&emsp;服务器端只要验证JWT签名正确，且未超时即可。服务器端直接从JWT中获取已验证的用户信息，而不用再去持久层取一次了。</p><h2 id="两种Web认证比较"><a href="#两种Web认证比较" class="headerlink" title="两种Web认证比较"></a><strong>两种Web认证比较</strong></h2><blockquote><p><strong>基于Session验证的方式存在的问题？</strong></p><ol><li>开销大：需要为用户维护session，用户增多时需要大量的内存开销。</li><li>扩展性差：无法直接在多台服务器间共享用户信息，而创建session的服务器和验证的服务器很肯不相同，需要共享session。</li><li>CORS(跨域资源共享)：数据跨越多台移动设备时就会有资源共享问题，要处理兼容性问题。</li><li>CSRF(跨站请求伪造)：容易受到跨站请求伪造攻击。</li></ol></blockquote><p>&emsp;&emsp;Token则是无状态的身份验证，解决了Session验证的诸多问题.每一次请求都发送token，放在headers中保证HTTP无状态，设置服务器Access-Control-Allow-Origin:*，保证服务器能接收到来自所有域的请求。</p><blockquote><p><strong>Token验证的优点？</strong></p><ol><li>无状态和可扩展：token存储在客户端，身份验证过程基本都在高速内存中执行，可以从一台服务器传送用户信息到另外一台服务器，也可以和第三方程序共享权限。</li><li>安全性：token可以避免CSRF攻击，即使是保存token到客户端也不牵涉到认证，且token有时效性。</li><li>多平台跨域：token只要通过了身份验证，便可以在任何域上发送请求。</li><li>开发便捷：无需再编写用户的一些数据库和缓存查询，降低了接口反应延迟。</li></ol></blockquote><p>&emsp;&emsp;但是JWT无法在服务器端对用户请求进行管理，也无法规范性的对payload数据进行控制。因此牵涉到管理用户登录信息的需求就很难避免去使用基于session的Web认证机制。所以在大部分场景需求下是不适合使用”纯净”的基于Token的Web认证，而是仅仅用JWT来代替sessionid。</p><blockquote><p>系统无法统计如用户登录次数，登录平台，也无法断开用户的登录。一旦实现如撤回token认证，就要重新实现session机制，就算不得无状态了。</p><p>虽然规范建议只将认证信息存入payload，但开发者往往会将所有用户信息放入，导致payload尺寸过大，又因为每次请求都要携带，造成了一定的性能损耗</p></blockquote><h2 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a><strong>存储位置</strong></h2><p>客户端浏览器的存储位置主要为：</p><ul><li>Local Storage</li><li>Cookie</li></ul><h3 id="Local-Storage"><a href="#Local-Storage" class="headerlink" title="Local Storage"></a><strong>Local Storage</strong></h3><p>&emsp;&emsp;常用Header+Local Storage的方式来避免CSRF，但更容易被XSS攻击</p><h3 id="Cookie-1"><a href="#Cookie-1" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h3><p>&emsp;&emsp;只有设置为HttpOnly的Cookie是脚本无法访问的，所以很适合用来存放token/sessionid</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: <span class="attribute">access_token</span>=xxxxxxxxxxxxxxxxxx; HttpOnly; Secure; <span class="attribute">Same-Site</span>=strict; <span class="attribute">Path</span>=/;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用此cookie可以完全隔离XSS攻击，而不用担心漏洞问题。</p><h3 id="防范CSRF"><a href="#防范CSRF" class="headerlink" title="防范CSRF"></a><strong>防范CSRF</strong></h3><p>&emsp;&emsp;在传统页面Web网站中，一般会使用CSRF Token。这是个非常流行的做法。像Tomcat这类的容器都会自带CSRF Token的产生和检查Filter。</p><blockquote><p><strong>CSRF Token流程</strong></p><p>&emsp;&emsp;客户端要首先向服务器请求一个带有提交表单的页面，服务器返回的页面中会嵌入一个CSRF Token。当用户提交表单时，CSRF Token会被一起携带发给服务器做验证。所以当服务器看到CSRF Token，就可以放心大胆的确认用户的的确确是看看到了提交前的表单界面，从而避免了用户稀里糊涂提交一个被伪造的表单的可能性。</p></blockquote><p>&emsp;&emsp;CSRF Token只适合于传统的页面请求，在SPA的情况下会比较尴尬。因为在SPA中，客户端与服务器之间的交互主要是通过接口完成的，没有页面的概念。此时的确可以照猫画虎的做一个接口让用户拿到CSRF Token，但这样什么也确认不了。因为攻击者可以调用同样的接口，拿到合法的CSRF Token。</p><blockquote><p>&emsp;&emsp;这时有几种办法：</p><ol><li><p>给所有接口都添加一个请求secret，来标记其来自于合法的客户端。这个secrect可以是固定的随机字符串，也可以通过某些动态算法产生。对于CSRF，浏览器只会做自动传Cookie而已，并不能帮助传入secret。这样一来，就可以确定消除CSRF的风险。但注意，这个机制仅能防范CSRF，而不能防范人为的攻击。黑客只要拿得到客户端，就一定能找到生成secret的办法。secret有一个顺带的功能是提高了第三方用户随意调用接口的门槛——他们必须得去查看客户端源代码，学会了怎么生成secret才能调用接口。</p></li><li><p>用Same-Site Cookie。回到上面CSRF步骤的第二步骤。当用户看到了B站点伪造的表单，点击了提交，向站点A发出请求时，被标记了Same-Site=strict的Cookie是不会被携带的，因为当时的主站点域名B和提交的站点域名A不一样。这是Same-Site=strict标记是个相对较新的标准。目前大部分浏览器都已经支持了。但如果大量的用户群还在类似于IE8这样的老系统上，这个招数便是无效的。</p></li><li><p>歪招，总是用json格式提交。CSRF可能发生的一个前提条件是必须用传统表单提交。这是因为传统表单提交可以跨域——你在站点B，可以提交表单给站点A。而Ajax的请求除非开启CORS，是不允许跨域的，所以天然的屏蔽掉了这个问题。传统表单的提交的格式必然是application/x-www-form-urlencoded。因此只要保证服务器能够拒绝处理所有application/x-www-form-urlencoded格式的POST请求，就能确保SPA不受CSRF的影响。那用啥呢？JSON - application/json。（我专门写这一条的原因是，jquery的ajax库的默认行为正是使用application/x-www-form-urlencoded格式。如果你还在用，可以考虑改一下。）</p></li><li><p>另一个歪招，双认证。将你的认证信息同时放在HttpOnly Cookie和Authorization Header。服务器要先比对这两个值是一样的，然后再去执行认证过程。这样可以同时防范XSS和CSRF。代价是，如果你的认证信息比较长，会浪费一些带宽。</p></li><li><p>使用HTTPS，将Cookie设置为Secure，浏览器就可以只在访问https网址时才会携带Cookie</p></li></ol></blockquote><blockquote><p>一个靠谱的Web认证应该：</p><ul><li>可以使用Session也可以使用Token做认证，但是总是要保证服务器端可以管理Session，通过Session是否存在来最终确定认证的有效性；</li><li>将认证信息存放在标记为HttpOnly，Secure，Same-Site=strict的Cookie中，从而避免XSS和CSRF；</li><li>总是使用https，只要你的网络链路经过了公网；</li><li>如果是传统的页面网站，请使用CSRF Token机制；</li><li>如果可以，做一个简单的请求secret，可以辅助防止CSRF，也可以稍稍的提高接口被爬取的门槛；</li><li>如果是SPA应用，放心大胆的禁用对application/x-www-form-urlencoded的支持</li><li>保证token/session必须有一个有效期</li></ul></blockquote><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://www.jianshu.com/p/805dc2a0f49e" target="_blank" rel="noopener">https://www.jianshu.com/p/805dc2a0f49e</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Cookie，Session，Token。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="web" scheme="http://linyishui.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>加密算法</title>
    <link href="http://linyishui.top/2019052001.html"/>
    <id>http://linyishui.top/2019052001.html</id>
    <published>2019-05-20T03:46:58.000Z</published>
    <updated>2019-06-12T03:20:00.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="哈希加密"><a href="#哈希加密" class="headerlink" title="哈希加密"></a><strong>哈希加密</strong></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;&emsp;防止密码泄露，通过散列的方法对口令进行一次性的加密，加密过程不可逆，从哈希值无法直接还原到原密码。</p><p>&emsp;&emsp;但哈希加密很快就被破解了，可以通过如<strong>字典破解</strong>，<strong>暴力破解</strong>等效率很低的破解方法，也可以通过<strong>查表法</strong>，<strong>反向查表法</strong>，<strong>彩虹表</strong>等方式来高效破解。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h2><p>&emsp;&emsp;单向散列算法，通过算法H将较大集合P映射到一个较小集合Q，即Q=H(P)</p><p>&emsp;&emsp;P集合中任意元素p都有唯一q与其对应，但q可以对应多个p。H(P)可以快速计算，且难以通过q反推出p，给出一个p1，难以推出p2使H(p1)=H(p2)。</p><p>&emsp;&emsp;因为这些特性，哈希算法常用来存储密码。</p><h2 id="低效破解"><a href="#低效破解" class="headerlink" title="低效破解"></a><strong>低效破解</strong></h2><p>&emsp;&emsp;暴力破解，即尝试密码长度允许的所有排列组合，只要密码长度足够，就会因为无法达到一定的算力而无法破解，所以会建议一定的安全长度来保证安全性。</p><p>&emsp;&emsp;字典破解，即通过创建一个小型数据库，存储单词、短语、常用密码等，进行哈希换算，再和要破解的密码进行比照。</p><h2 id="高效破解"><a href="#高效破解" class="headerlink" title="高效破解"></a><strong>高效破解</strong></h2><p>&emsp;&emsp;查表法，即先计算一些常用密码的哈希值，然后存储到Table中，在破解时进行比对，内存时间平衡法通过大量的内存来减少破解时间，</p><p>&emsp;&emsp;反向查表法，即先通过暴力破解获取一些哈希值，构造一个哈希表，获取已知数据，计算对应哈希值，并查询对应的数据。</p><p>&emsp;&emsp;彩虹表，结合暴力法和查表法，对于Q=H(P)，通过算法R使P=R(Q)，然后计算H(p0)-&gt;R(q1)-&gt;H(p1)-&gt;R(q2)…-&gt;R(qn)-&gt;pn反复调用HR算法计算得到pn，存储p0和pn组合，代入不同的p0得到多组结果并存储。破解时根据获取的散列值q，进行一次R(q)得到c1，把c1和所存pn进行比较，若找到相等pn，则其对应的qn很有可能就是获取的散列值q，再进行一次HR计算，得到qn并比对，若相等则p(n-1)一定是想要的密令p，若不相等就继续直到遍历完所以存储组合。再对q进行R(q)-&gt;H(c1)-&gt;R(c2)，对比c2和qn，若相等，则对应的p(n-2)就很可能是所求密令，继续计算c3、c4直到c(n-1)。总体来讲就是通过0-n对存储了p0到pn链的所有数据，可以很大的节约空间，但就是需要进行n次比对，所以相比查表法在时间上是会有更多的牺牲。</p><hr><h1 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a><strong>加盐</strong></h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;&emsp;加盐即将口令通过和一个随机数Salt关联，只要口令改变随机数即改变。随机数以未加密的形式放入口令文件中，将口令和随机数一起加密。</p><p>&emsp;&emsp;后台开发时常用Hash值的形式来存储用户密码，当后台被攻击时，哈希值泄露，黑客仍可以通过如彩虹表等方式破解用户密码。通过加盐可以提高密码的破解难度。</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a><strong>原理</strong></h2><p>&emsp;&emsp;由哈希加密的H(P)变为H(P+Salt)，每次哈希计算所选用的盐值都是随机数。因为H发生变化，所以已有的彩虹表数据就会失效，需要根据新的H重新生成，所以破解难度就提高了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h2><hr><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a><strong>MD5</strong></h1><hr><h1 id="becrypt"><a href="#becrypt" class="headerlink" title="becrypt"></a><strong>becrypt</strong></h1><hr><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><strong>RSA</strong></h1><hr><h1 id="oauth"><a href="#oauth" class="headerlink" title="oauth"></a><strong>oauth</strong></h1>]]></content>
    
    <summary type="html">
    
      介绍Cookie，Session，Token。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="web" scheme="http://linyishui.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Java学习书单</title>
    <link href="http://linyishui.top/2019051201.html"/>
    <id>http://linyishui.top/2019051201.html</id>
    <published>2019-05-20T03:00:26.000Z</published>
    <updated>2019-05-20T03:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;读书特别是对于程序员来说是学习的道路之一，在互联网如此便利的时代环境下，信息的获取是非常方便的，所以是否选择花一定的金钱和时间去购买阅读书籍需要程序员根据自己的情况和学习方式来选择。对于我来说，好的书籍能减少走弯路的可能性，也能快速的积累作者的知识精华，相比较之下阅读官方文档之类的就比较看个人能力和经验，有稍微大一些的学习门槛和理解偏差；但阅读书籍一定要注重实战，读书能快速接收到知识的同时也意味着可能快速的忘记，需要制订好科学的学习计划才能比较好的吸收为自己的技能。</p><p>&emsp;&emsp;最近越来越感觉实体书籍的麻烦之处了，太重太厚不能用各种姿势畅快的阅读，懒得去图书馆先翻两下就直接买了，到手发现内容有些烂或者不适合自己当前状态看，越买越多开销开始变大了等等；因为这些原因看书在我的学习比重中占比太小了，所以决定买个Kindle以后我读电子书好了，可以先在网上找资源，试读一下觉得不错了再买，可以省点钱少踩点坑，方便携带，随时随地都可以学习了，过段日子再买个轻薄本，以后妈妈再也不用担心我出门没法敲代码了。</p><h1 id="一、Java语言"><a href="#一、Java语言" class="headerlink" title="一、Java语言"></a><strong>一、Java语言</strong></h1><h2 id="1-《Java核心技术-卷Ⅰ》-8-0-《Java核心技术-卷Ⅱ》-7-2"><a href="#1-《Java核心技术-卷Ⅰ》-8-0-《Java核心技术-卷Ⅱ》-7-2" class="headerlink" title="1.《Java核心技术-卷Ⅰ》(8.0) + 《Java核心技术-卷Ⅱ》(7.2)"></a><strong>1.<a href="https://book.douban.com/subject/26880667/" title="Title" target="_blank" rel="noopener">《Java核心技术-卷Ⅰ》</a>(8.0) + <a href="https://book.douban.com/subject/27165931/" title="Title" target="_blank" rel="noopener">《Java核心技术-卷Ⅱ》</a>(7.2)</strong></h2><p>&emsp;&emsp;选内容的跳着读完了一遍，很厚。</p><p>&emsp;&emsp;分卷Ⅰ和卷Ⅱ，内容比较基础也很详细，译本感觉差强人意，有些地方会因为翻译而难以理解，可以结合英文版阅读，卷Ⅱ大幅篇章用来讲Swing和Awt很迷。</p><h2 id="2-《Java语言程序设计》-8-9"><a href="#2-《Java语言程序设计》-8-9" class="headerlink" title="2.《Java语言程序设计》(8.9)"></a><strong>2.<a href="https://book.douban.com/subject/26590745/" title="Title" target="_blank" rel="noopener">《Java语言程序设计》</a>(8.9)</strong></h2><p>&emsp;&emsp;梁勇版，大学时教材，因为比较久远所以印象不是很深了，应该比较入门，适合初学者。</p><h2 id="3-《Head-First-Java》-8-7"><a href="#3-《Head-First-Java》-8-7" class="headerlink" title="3.《Head First Java》(8.7)"></a><strong>3.<a href="https://book.douban.com/subject/2000732/" title="Title" target="_blank" rel="noopener">《Head First Java》</a>(8.7)</strong></h2><p>&emsp;&emsp;还未读过，据说很适合新手入门Java，比较经典的Java书籍。</p><h2 id="4-《Java编程思想》-9-1"><a href="#4-《Java编程思想》-9-1" class="headerlink" title="4.《Java编程思想》(9.1)"></a><strong>4.<a href="https://book.douban.com/subject/2130190/" title="Title" target="_blank" rel="noopener">《Java编程思想》</a>(9.1)</strong></h2><p>&emsp;&emsp;买了还未读过，适合不同阶段的Java程序员学习，内容详细且有深度，建议在有一定的基础后再阅读学习。</p><h2 id="5-《Effective-Java》-8-8"><a href="#5-《Effective-Java》-8-8" class="headerlink" title="5.《Effective Java》(8.8)"></a><strong>5.<a href="https://book.douban.com/subject/30412517/" title="Title" target="_blank" rel="noopener">《Effective Java》</a>(8.8)</strong></h2><p>&emsp;&emsp;据说主要讲了很多Java调优和规范，比较经典，等以后有机会读一下。</p><h2 id="6-《Java8实战》-9-2"><a href="#6-《Java8实战》-9-2" class="headerlink" title="6.《Java8实战》(9.2)"></a><strong>6.<a href="https://book.douban.com/subject/26772632/" title="Title" target="_blank" rel="noopener">《Java8实战》</a>(9.2)</strong></h2><p>&emsp;&emsp;面向 Java 8 的技能升级，豆瓣9.2分，有机会读一下。</p><h1 id="二、数据结构和算法"><a href="#二、数据结构和算法" class="headerlink" title="二、数据结构和算法"></a><strong>二、数据结构和算法</strong></h1><h2 id="1-《数据结构与算法-Java版》-8-6"><a href="#1-《数据结构与算法-Java版》-8-6" class="headerlink" title="1.《数据结构与算法-Java版》(8.6)"></a><strong>1.<a href="https://book.douban.com/subject/3351237/" title="Title" target="_blank" rel="noopener">《数据结构与算法-Java版》</a>(8.6)</strong></h2><p>&emsp;&emsp;适合新手入门学习数据结构，大学时数据结构是C语言版，后悔当时没直接学这本了。</p><h2 id="2-《算法-第4版》-9-4"><a href="#2-《算法-第4版》-9-4" class="headerlink" title="2.《算法-第4版》(9.4)"></a><strong>2.<a href="https://book.douban.com/subject/19952400/" title="Title" target="_blank" rel="noopener">《算法-第4版》</a>(9.4)</strong></h2><p>&emsp;&emsp;Sedgewick著，经典算法书，买了第4版看了大概一半了，示例都是用Java实现的非常适合Java程序员阅读，经典必读。</p><h2 id="3-刷题"><a href="#3-刷题" class="headerlink" title="3. 刷题"></a><strong>3. 刷题</strong></h2><p>&emsp;&emsp;在系统的学习完数据结构和算法后一定要勤于刷题，如LeetCode，也可以先刷一些知名公司的算法题库，或者先读《剑指Offer》。</p><h1 id="三、数据库"><a href="#三、数据库" class="headerlink" title="三、数据库"></a><strong>三、数据库</strong></h1><h2 id="1-《MySql技术内幕》-8-6"><a href="#1-《MySql技术内幕》-8-6" class="headerlink" title="1.《MySql技术内幕》(8.6)"></a><strong>1.<a href="https://book.douban.com/subject/24708143/" title="Title" target="_blank" rel="noopener">《MySql技术内幕》</a>(8.6)</strong></h2><p>&emsp;&emsp;了解InnoDB存储引擎底层原理必备的一本书。</p><h2 id="2-《高性能MySql》-9-3"><a href="#2-《高性能MySql》-9-3" class="headerlink" title="2.《高性能MySql》(9.3)"></a><strong>2.<a href="https://book.douban.com/subject/23008813/" title="Title" target="_blank" rel="noopener">《高性能MySql》</a>(9.3)</strong></h2><p>&emsp;&emsp;MySql的经典书籍，但不一定适合Java程序员阅读，建议根据自身情况选择。</p><h2 id="3-《Redis开发与运维》-9-0"><a href="#3-《Redis开发与运维》-9-0" class="headerlink" title="3.《Redis开发与运维》(9.0)"></a><strong>3.<a href="https://book.douban.com/subject/26971561/" title="Title" target="_blank" rel="noopener">《Redis开发与运维》</a>(9.0)</strong></h2><p>&emsp;&emsp;买了还没机会读，比较新，全面讲解Redis基本功能及其应用，并结合了线上开发与运维监控中的实际使用案例，深入分析并总结了实际开发运维中遇到的“陷阱”，以及背后的原因， 包含大规模集群开发与管理的场景、应用案例与开发技巧，为高效开发运维提供了大量实际经验和建议。</p><h2 id="4-《Redis实战》-8-0"><a href="#4-《Redis实战》-8-0" class="headerlink" title="4.《Redis实战》(8.0)"></a><strong>4.<a href="https://book.douban.com/subject/26612779/" title="Title" target="_blank" rel="noopener">《Redis实战》</a>(8.0)</strong></h2><p>&emsp;&emsp;适合入门学习Redis，快速的掌握相关知识。</p><h2 id="5-《Redis设计与实现》-8-5"><a href="#5-《Redis设计与实现》-8-5" class="headerlink" title="5.《Redis设计与实现》(8.5)"></a><strong>5.<a href="https://book.douban.com/subject/25900156/" title="Title" target="_blank" rel="noopener">《Redis设计与实现》</a>(8.5)</strong></h2><p>&emsp;&emsp;适合系统深入的学习Redis，本书比较详细的介绍了Redis的原理。</p><h1 id="四、框架"><a href="#四、框架" class="headerlink" title="四、框架"></a><strong>四、框架</strong></h1><h2 id="1-《Spring实战》-8-3"><a href="#1-《Spring实战》-8-3" class="headerlink" title="1.《Spring实战》(8.3)"></a><strong>1.<a href="https://book.douban.com/subject/26767354/" title="Title" target="_blank" rel="noopener">《Spring实战》</a>(8.3)</strong></h2><p>&emsp;&emsp;Spring框架入门书籍，还未读过，因为工作原因直接从Spring Boot入门的，有机会读一下。</p><h2 id="2-《JavaEE开发的颠覆者-Spring-Boot实战》-6-3"><a href="#2-《JavaEE开发的颠覆者-Spring-Boot实战》-6-3" class="headerlink" title="2.《JavaEE开发的颠覆者: Spring Boot实战》(6.3)"></a><strong>2.<a href="https://book.douban.com/subject/26762595/" title="Title" target="_blank" rel="noopener">《JavaEE开发的颠覆者: Spring Boot实战》</a>(6.3)</strong></h2><p>&emsp;&emsp;国内作者，入门学习，配合简单的代码实战，适合快速学习，建议有突击需求的可以看一下，但不建议购买。</p><h2 id="3-《Java-Web高级编程》-8-8"><a href="#3-《Java-Web高级编程》-8-8" class="headerlink" title="3.《Java Web高级编程》(8.8)"></a><strong>3.<a href="https://book.douban.com/subject/26581686/" title="Title" target="_blank" rel="noopener">《Java Web高级编程》</a>(8.8)</strong></h2><p>&emsp;&emsp;涵盖WebSockets、Spring Framework、JPA Hibernate和Spring Security。</p><h2 id="4-《精通Hibernate》-7-5"><a href="#4-《精通Hibernate》-7-5" class="headerlink" title="4.《精通Hibernate》(7.5)"></a><strong>4.<a href="https://book.douban.com/subject/26581686/" title="Title" target="_blank" rel="noopener">《精通Hibernate》</a>(7.5)</strong></h2><p>&emsp;&emsp;Hibernate入门。</p><h2 id="5-《MyBatis从入门到精通》-7-6"><a href="#5-《MyBatis从入门到精通》-7-6" class="headerlink" title="5.《MyBatis从入门到精通》(7.6)"></a><strong>5.<a href="https://book.douban.com/subject/27074809/" title="Title" target="_blank" rel="noopener">《MyBatis从入门到精通》</a>(7.6)</strong></h2><p>&emsp;&emsp;MyBatis入门。</p><h2 id="6-《MyBatis技术内幕》-7-9"><a href="#6-《MyBatis技术内幕》-7-9" class="headerlink" title="6.《MyBatis技术内幕》(7.9)"></a><strong>6.<a href="https://book.douban.com/subject/26581686/" title="Title" target="_blank" rel="noopener">《MyBatis技术内幕》</a>(7.9)</strong></h2><p>&emsp;&emsp;由浅到深学习MyBatis。</p><h2 id="7-《Expert-One-on-One-J2EE-Development-without-EJB中文版》-8-9"><a href="#7-《Expert-One-on-One-J2EE-Development-without-EJB中文版》-8-9" class="headerlink" title="7.《Expert One-on-One J2EE Development without EJB中文版》(8.9)"></a><strong>7.<a href="https://book.douban.com/subject/1436131/" title="Title" target="_blank" rel="noopener">《Expert One-on-One J2EE Development without EJB中文版》</a>(8.9)</strong></h2><p>&emsp;&emsp;经典，建议必读。</p><h2 id="8-《Maven实战》-8-2"><a href="#8-《Maven实战》-8-2" class="headerlink" title="8.《Maven实战》(8.2)"></a><strong>8.<a href="https://book.douban.com/subject/5345682/" title="Title" target="_blank" rel="noopener">《Maven实战》</a>(8.2)</strong></h2><p>&emsp;&emsp;想学习一下Maven可以看一下。</p><h2 id="9-《Netty权威指南》-6-9"><a href="#9-《Netty权威指南》-6-9" class="headerlink" title="9.《Netty权威指南》(6.9)"></a><strong>9.<a href="https://book.douban.com/subject/26373138/" title="Title" target="_blank" rel="noopener">《Netty权威指南》</a>(6.9)</strong></h2><p>&emsp;&emsp;没读过，有人推荐，有机会拜读一下。</p><h1 id="五、计算机网络"><a href="#五、计算机网络" class="headerlink" title="五、计算机网络"></a><strong>五、计算机网络</strong></h1><h2 id="1-《计算机网络》-7-8"><a href="#1-《计算机网络》-7-8" class="headerlink" title="1.《计算机网络》(7.8)"></a><strong>1.<a href="https://book.douban.com/subject/24740558/" title="Title" target="_blank" rel="noopener">《计算机网络》</a>(7.8)</strong></h2><p>&emsp;&emsp;谢希仁版，大学教材，很经典CS考研参考书籍，但可能不太好啃。</p><h2 id="2-《计算机网络-自顶向下方法》-8-9"><a href="#2-《计算机网络-自顶向下方法》-8-9" class="headerlink" title="2.《计算机网络-自顶向下方法》(8.9)"></a><strong>2.<a href="https://book.douban.com/subject/26176870/" title="Title" target="_blank" rel="noopener">《计算机网络-自顶向下方法》</a>(8.9)</strong></h2><p>&emsp;&emsp;买了还没看，据说很好，待看过再评价。</p><h2 id="3-《网络是怎样连接的》-9-2"><a href="#3-《网络是怎样连接的》-9-2" class="headerlink" title="3.《网络是怎样连接的》(9.2)"></a><strong>3.<a href="https://book.douban.com/subject/26941639/" title="Title" target="_blank" rel="noopener">《网络是怎样连接的》</a>(9.2)</strong></h2><p>&emsp;&emsp;户根勤著，读了前两章，简单易懂且内容丰富，内容的结构设计也很棒，非常适合小白阅读。</p><h2 id="4-《图解HTTP》-8-1"><a href="#4-《图解HTTP》-8-1" class="headerlink" title="4.《图解HTTP》(8.1)"></a><strong>4.<a href="https://book.douban.com/subject/25863515/" title="Title" target="_blank" rel="noopener">《图解HTTP》</a>(8.1)</strong></h2><p>&emsp;&emsp;漫画风格讲解网络知识，非常适合小白阅读。</p><h1 id="六、操作系统"><a href="#六、操作系统" class="headerlink" title="六、操作系统"></a><strong>六、操作系统</strong></h1><h2 id="1-《现代操作系统》-9-0"><a href="#1-《现代操作系统》-9-0" class="headerlink" title="1.《现代操作系统》(9.0)"></a><strong>1.<a href="https://book.douban.com/subject/27096665/" title="Title" target="_blank" rel="noopener">《现代操作系统》</a>(9.0)</strong></h2><p>&emsp;&emsp;很厚，目前没兴趣看，据说很经典，待看后具体评价。</p><h2 id="2-《UNIX环境高级编程》-9-5"><a href="#2-《UNIX环境高级编程》-9-5" class="headerlink" title="2.《UNIX环境高级编程》(9.5)"></a><strong>2.<a href="https://book.douban.com/subject/25900403/" title="Title" target="_blank" rel="noopener">《UNIX环境高级编程》</a>(9.5)</strong></h2><p>&emsp;&emsp;买了还没来得及看，非常经典。</p><h2 id="3-《鸟哥的Linux私房菜》-9-1"><a href="#3-《鸟哥的Linux私房菜》-9-1" class="headerlink" title="3.《鸟哥的Linux私房菜》(9.1)"></a><strong>3.<a href="https://book.douban.com/subject/4889838/" title="Title" target="_blank" rel="noopener">《鸟哥的Linux私房菜》</a>(9.1)</strong></h2><p>&emsp;&emsp;最有名的Linux入门书。</p><h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a><strong>七、其他</strong></h1><h2 id="1-《深入理解Java虚拟机》-8-9"><a href="#1-《深入理解Java虚拟机》-8-9" class="headerlink" title="1.《深入理解Java虚拟机》(8.9)"></a><strong>1.<a href="https://book.douban.com/subject/24722612/" title="Title" target="_blank" rel="noopener">《深入理解Java虚拟机》</a>(8.9)</strong></h2><p>&emsp;&emsp;还未读完，读过部分的感受大概比较能深入进去，书中的内容很容易理解，很不错的一本书。</p><h2 id="2-《Java并发编程实战》-9-1"><a href="#2-《Java并发编程实战》-9-1" class="headerlink" title="2.《Java并发编程实战》(9.1)"></a><strong>2.<a href="https://book.douban.com/subject/10484692/" title="Title" target="_blank" rel="noopener">《Java并发编程实战》</a>(9.1)</strong></h2><p>&emsp;&emsp;准备读，Java并发包开发人员写的书，比如知名的Doug Lea，待读后再具体评价。</p><h2 id="3-《Java并发编程的艺术》-7-3"><a href="#3-《Java并发编程的艺术》-7-3" class="headerlink" title="3.《Java并发编程的艺术》(7.3)"></a><strong>3.<a href="https://book.douban.com/subject/26591326/" title="Title" target="_blank" rel="noopener">《Java并发编程的艺术》</a>(7.3)</strong></h2><p>&emsp;&emsp;买后还未读，国内作者，所以不会有译版的问题，待读后再具体评价。</p><h2 id="4-《Java多线程编程核心技术》-5-1"><a href="#4-《Java多线程编程核心技术》-5-1" class="headerlink" title="4.《Java多线程编程核心技术》(5.1)"></a><strong>4.<a href="https://book.douban.com/subject/26555197/" title="Title" target="_blank" rel="noopener">《Java多线程编程核心技术》</a>(5.1)</strong></h2><p>&emsp;&emsp;买后还未读，高洪岩著，待读后再具体评价。</p><h2 id="5-《Java并发编程-核心方法与框架》-2-8"><a href="#5-《Java并发编程-核心方法与框架》-2-8" class="headerlink" title="5.《Java并发编程-核心方法与框架》(2.8)"></a><strong>5.<a href="https://book.douban.com/subject/26859317/" title="Title" target="_blank" rel="noopener">《Java并发编程-核心方法与框架》</a>(2.8)</strong></h2><p>&emsp;&emsp;买后还未读，高洪岩著，据说很辣鸡，当时凑单买的，不建议购买。</p><h2 id="6-《实战Java高并发程序设计》-8-3"><a href="#6-《实战Java高并发程序设计》-8-3" class="headerlink" title="6.《实战Java高并发程序设计》(8.3)"></a><strong>6.<a href="https://book.douban.com/subject/26663605/" title="Title" target="_blank" rel="noopener">《实战Java高并发程序设计》</a>(8.3)</strong></h2><p>&emsp;&emsp;有机会读一下。</p><h2 id="7-《Java性能调优指南》-7-0"><a href="#7-《Java性能调优指南》-7-0" class="headerlink" title="7.《Java性能调优指南》(7.0)"></a><strong>7.<a href="https://book.douban.com/subject/26998058/" title="Title" target="_blank" rel="noopener">《Java性能调优指南》</a>(7.0)</strong></h2><p>&emsp;&emsp;没读过，有机会拜读一下。</p><h2 id="8-《大话设计模式》-8-3"><a href="#8-《大话设计模式》-8-3" class="headerlink" title="8.《大话设计模式》(8.3)"></a><strong>8.<a href="https://book.douban.com/subject/2334288/" title="Title" target="_blank" rel="noopener">《大话设计模式》</a>(8.3)</strong></h2><p>&emsp;&emsp;内容轻松有趣，本应该是枯燥难懂的设计模式让作者以比较有趣的方式展现给读者，强烈推荐。</p><h2 id="9-《设计模式-可复用面向对象软件的基础》-9-1"><a href="#9-《设计模式-可复用面向对象软件的基础》-9-1" class="headerlink" title="9.《设计模式-可复用面向对象软件的基础》(9.1)"></a><strong>9.<a href="https://book.douban.com/subject/1052241/" title="Title" target="_blank" rel="noopener">《设计模式-可复用面向对象软件的基础》</a>(9.1)</strong></h2><p>&emsp;&emsp;设计模式的经典书籍。</p><h2 id="10-《Head-First-设计模式（中文版）》-9-2"><a href="#10-《Head-First-设计模式（中文版）》-9-2" class="headerlink" title="10.《Head First 设计模式（中文版）》(9.2)"></a><strong>10.<a href="https://book.douban.com/subject/2243615/" title="Title" target="_blank" rel="noopener">《Head First 设计模式（中文版）》</a>(9.2)</strong></h2><p>&emsp;&emsp;设计模式入门书籍，强烈推荐。</p><h2 id="11-《代码整洁之道》-8-6"><a href="#11-《代码整洁之道》-8-6" class="headerlink" title="11.《代码整洁之道》(8.6)"></a><strong>11.<a href="https://book.douban.com/subject/4199741/" title="Title" target="_blank" rel="noopener">《代码整洁之道》</a>(8.6)</strong></h2><p>&emsp;&emsp;经典，建议必读，因为时间关系还未读完，但如果有时间我会选择先读这本书。</p><h2 id="12-《重构-改善既有代码的设计》-9-1"><a href="#12-《重构-改善既有代码的设计》-9-1" class="headerlink" title="12.《重构-改善既有代码的设计》(9.1)"></a><strong>12.<a href="https://book.douban.com/subject/4262627/" title="Title" target="_blank" rel="noopener">《重构-改善既有代码的设计》</a>(9.1)</strong></h2><p>&emsp;&emsp;买了还未读，很经典，有重构需求一定要看一下。</p><h1 id="八、分布式"><a href="#八、分布式" class="headerlink" title="八、分布式"></a><strong>八、分布式</strong></h1><p>&emsp;&emsp;学习阶段还未到以下内容，待将来再整理书单</p><h2 id="1-《分布式Java应用》-7-8"><a href="#1-《分布式Java应用》-7-8" class="headerlink" title="1.《分布式Java应用》(7.8)"></a><strong>1.<a href="https://book.douban.com/subject/4848587/" title="Title" target="_blank" rel="noopener">《分布式Java应用》</a>(7.8)</strong></h2><p>&emsp;&emsp;据说淘宝大牛创作，适合入门，没读过无法评价。</p><h2 id="2-《大型网站技术架构-核心原理与案例分析》-7-9"><a href="#2-《大型网站技术架构-核心原理与案例分析》-7-9" class="headerlink" title="2.《大型网站技术架构-核心原理与案例分析》(7.9)"></a><strong>2.<a href="https://book.douban.com/subject/25723064/" title="Title" target="_blank" rel="noopener">《大型网站技术架构-核心原理与案例分析》</a>(7.9)</strong></h2><p>&emsp;&emsp;据说推荐适合入门架构学习，有机会要读一下。</p><h2 id="3-《大型分布式网站架构设计与实践》-6-2"><a href="#3-《大型分布式网站架构设计与实践》-6-2" class="headerlink" title="3.《大型分布式网站架构设计与实践》(6.2)"></a><strong>3.<a href="https://book.douban.com/subject/25972633/" title="Title" target="_blank" rel="noopener">《大型分布式网站架构设计与实践》</a>(6.2)</strong></h2><p>&emsp;&emsp;偏向于实践，有机会再考虑是否需要读一下。</p><h2 id="4-《分布式服务框架-原理与实践》-6-8"><a href="#4-《分布式服务框架-原理与实践》-6-8" class="headerlink" title="4.《分布式服务框架-原理与实践》(6.8)"></a><strong>4.<a href="https://book.douban.com/subject/26702824/" title="Title" target="_blank" rel="noopener">《分布式服务框架-原理与实践》</a>(6.8)</strong></h2><p>&emsp;&emsp;偏向分布式服务的原理讲解和对应实践，有机会再考虑是否需要读一下。</p><h2 id="5-《大型网站系统与Java中间件开发实践》-7-9"><a href="#5-《大型网站系统与Java中间件开发实践》-7-9" class="headerlink" title="5.《大型网站系统与Java中间件开发实践》(7.9)"></a><strong>5.<a href="https://book.douban.com/subject/25867042/" title="Title" target="_blank" rel="noopener">《大型网站系统与Java中间件开发实践》</a>(7.9)</strong></h2><p>&emsp;&emsp;想学中间件相关内容可以看一下。</p><h2 id="6-《从Paxos到Zookeeper分布式一致性原理与实践》-7-8"><a href="#6-《从Paxos到Zookeeper分布式一致性原理与实践》-7-8" class="headerlink" title="6.《从Paxos到Zookeeper分布式一致性原理与实践》(7.8)"></a><strong>6.<a href="https://book.douban.com/subject/26292004/" title="Title" target="_blank" rel="noopener">《从Paxos到Zookeeper分布式一致性原理与实践》</a>(7.8)</strong></h2><p>&emsp;&emsp;zookeeper入门书籍，有机会要读一下。</p><h2 id="7-《大规模分布式存储系统》-7-9"><a href="#7-《大规模分布式存储系统》-7-9" class="headerlink" title="7.《大规模分布式存储系统》(7.9)"></a><strong>7.<a href="https://book.douban.com/subject/25723658/" title="Title" target="_blank" rel="noopener">《大规模分布式存储系统》</a>(7.9)</strong></h2><p>&emsp;&emsp;主要讲解分布式存储相关知识，有机会要读一下。</p><h2 id="8-《微服务设计》-8-2"><a href="#8-《微服务设计》-8-2" class="headerlink" title="8.《微服务设计》(8.2)"></a><strong>8.<a href="https://book.douban.com/subject/26772677/" title="Title" target="_blank" rel="noopener">《微服务设计》</a>(8.2)</strong></h2><p>&emsp;&emsp;是围绕微服务中的要解决的问题展开细聊，有机会要读一下。</p><h2 id="9-《微服务架构设计模式》-9-8"><a href="#9-《微服务架构设计模式》-9-8" class="headerlink" title="9.《微服务架构设计模式》(9.8)"></a><strong>9.<a href="https://book.douban.com/subject/33425123/" title="Title" target="_blank" rel="noopener">《微服务架构设计模式》</a>(9.8)</strong></h2><p>&emsp;&emsp;比较新，评价不错，有机会要读一下。</p><h1 id="九、云计算"><a href="#九、云计算" class="headerlink" title="九、云计算"></a><strong>九、云计算</strong></h1><p>&emsp;&emsp;学习阶段还未到以下内容，待将来再整理书单</p><h2 id="1-《OpenStack设计与实现》-7-3"><a href="#1-《OpenStack设计与实现》-7-3" class="headerlink" title="1.《OpenStack设计与实现》(7.3)"></a><strong>1.<a href="https://book.douban.com/subject/27034723/" title="Title" target="_blank" rel="noopener">《OpenStack设计与实现》</a>(7.3)</strong></h2><h2 id="2-《第一本Docker书》-7-4"><a href="#2-《第一本Docker书》-7-4" class="headerlink" title="2.《第一本Docker书》(7.4)"></a><strong>2.<a href="https://book.douban.com/subject/26285268/" title="Title" target="_blank" rel="noopener">《第一本Docker书》</a>(7.4)</strong></h2><h2 id="3-《Docker开发指南》-8-8"><a href="#3-《Docker开发指南》-8-8" class="headerlink" title="3.《Docker开发指南》(8.8)"></a><strong>3.<a href="https://book.douban.com/subject/27013734/" title="Title" target="_blank" rel="noopener">《Docker开发指南》</a>(8.8)</strong></h2><h2 id="4-《Docker——容器与容器云》-8-5"><a href="#4-《Docker——容器与容器云》-8-5" class="headerlink" title="4.《Docker——容器与容器云》(8.5)"></a><strong>4.<a href="https://book.douban.com/subject/26894736/" title="Title" target="_blank" rel="noopener">《Docker——容器与容器云》</a>(8.5)</strong></h2><h2 id="5-《kubenetes权威指南》-7-4"><a href="#5-《kubenetes权威指南》-7-4" class="headerlink" title="5.《kubenetes权威指南》(7.4)"></a><strong>5.<a href="https://book.douban.com/subject/27112874/" title="Title" target="_blank" rel="noopener">《kubenetes权威指南》</a>(7.4)</strong></h2><h1 id="十、大数据"><a href="#十、大数据" class="headerlink" title="十、大数据"></a><strong>十、大数据</strong></h1><p>&emsp;&emsp;学习阶段还未到以下内容，待将来再整理书单</p><h2 id="1-《大数据技术原理与应用》-9-0"><a href="#1-《大数据技术原理与应用》-9-0" class="headerlink" title="1.《大数据技术原理与应用》(9.0)"></a><strong>1.<a href="https://book.douban.com/subject/27606713/" title="Title" target="_blank" rel="noopener">《大数据技术原理与应用》</a>(9.0)</strong></h2><h2 id="2-《Hadoop实战》-7-7"><a href="#2-《Hadoop实战》-7-7" class="headerlink" title="2.《Hadoop实战》(7.7)"></a><strong>2.<a href="https://book.douban.com/subject/6859710/" title="Title" target="_blank" rel="noopener">《Hadoop实战》</a>(7.7)</strong></h2><h2 id="3-《Hadoop权威指南》-8-7"><a href="#3-《Hadoop权威指南》-8-7" class="headerlink" title="3.《Hadoop权威指南》(8.7)"></a><strong>3.<a href="https://book.douban.com/subject/27115351/" title="Title" target="_blank" rel="noopener">《Hadoop权威指南》</a>(8.7)</strong></h2><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://www.zhihu.com/question/39308607" target="_blank" rel="noopener">https://www.zhihu.com/question/39308607</a></p></blockquote><blockquote><p><a href="https://www.zhihu.com/question/23152601/answer/683431537" target="_blank" rel="noopener">https://www.zhihu.com/question/23152601/answer/683431537</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      记录Java学习中看过、在看以及准备看的书籍清单。
    
    </summary>
    
      <category term="个人记录" scheme="http://linyishui.top/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CAS原理</title>
    <link href="http://linyishui.top/2019051801.html"/>
    <id>http://linyishui.top/2019051801.html</id>
    <published>2019-05-18T07:55:50.000Z</published>
    <updated>2019-05-23T09:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a><strong>CAS</strong></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;&emsp;Compare and Swap即比较并交换，设计并发算法时常用到的一种技术，JVM中的CAS操作通过处理器提供的CMPXCHG指令来实现（<a href="../2019051601.html" title="Title">原子操作的实现原理</a>）。</p><p>&emsp;&emsp;CAS有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false。</p><p>&emsp;&emsp;普通的比较和CAS的区别主要是保证了原子性，前者在并发执行时是不安全的，原因和<a href="../2019051401.html" title="Title">并发和同步</a>中的银行例子一样，当判断生效后线程挂起，其它线程执行导致线程下次执行时状态已经不符合条件判断，但还是执行并返回了修改的结果。所以需要像<a href="../2019032902.html" title="Title">锁机制</a>那样给代码块加锁。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//普通的比较</span></span><br><span class="line">    <span class="keyword">if</span> (a == v)&#123;</span><br><span class="line">        v = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 比较obj的offset处内存位置中的值和期望的值，如果相同则更新。此更新是不可中断的。</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> obj 需要更新的对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> offset obj中整型field的偏移量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> expect 希望field中存在的值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> update 如果期望值expect与field的当前值相同，设置filed的值为这个新值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 如果field的值被更改返回true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> compareAndSetInt(Object o, <span class="keyword">long</span> offset,</span><br><span class="line">                                             <span class="keyword">int</span> expected,</span><br><span class="line">                                             <span class="keyword">int</span> x);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;CAS保证了比较和交换是一组原子操作，不会被中断执行。因为CAS是硬件级别的操作，所以效率比对普通的比较加锁要高一些。</p><hr><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a><strong>AtomicInteger</strong></h2><p>&emsp;&emsp;java.util.concurrent.atomic并发包下的原子操作类都是基于CAS实现的，有AtomicInteger、AtomicBoolean、AtomicLong等</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();<span class="comment">//Unsafe类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));<span class="comment">//对象域偏移</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> VALUE = U.objectFieldOffset(AtomicInteger.class, <span class="string">"value"</span>);<span class="comment">//对象域偏移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.getAndAddInt(<span class="keyword">this</span>, VALUE, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        unsafe.putOrderedInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> unsafe.<span class="title">getAndSetInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, newValue)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, expect, update)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, expect, update)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CAS实例-线程安全的计数器"><a href="#CAS实例-线程安全的计数器" class="headerlink" title="CAS实例-线程安全的计数器"></a><strong>CAS实例-线程安全的计数器</strong></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CAS</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicI = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);<span class="comment">//原子包装的整型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        final CAS cas = <span class="keyword">new</span> CAS();</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> ArrayList&lt;Thread&gt;(<span class="number">600</span>);<span class="comment">//线程集合</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;<span class="comment">//分别调用安全和不安全的计数器</span></span><br><span class="line">                        cas.count();</span><br><span class="line">                        cas.safeCount();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ts.<span class="keyword">add</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : ts) &#123;<span class="comment">//遍历执行所有线程</span></span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待所有线程执行完成</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : ts) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(cas.i);</span><br><span class="line">        System.<span class="keyword">out</span>.println(cas.atomicI.<span class="keyword">get</span>());</span><br><span class="line">        System.<span class="keyword">out</span>.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** * 使用CAS实现线程安全计数器 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = atomicI.<span class="keyword">get</span>();</span><br><span class="line">            boolean suc = atomicI.compareAndSet(i, ++i);<span class="comment">//预期值i，更新值++i</span></span><br><span class="line">            <span class="keyword">if</span> (suc) &#123;<span class="comment">//执行成功则跳出，否则循环尝试</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非线程安全计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line"><span class="number">991833</span></span><br><span class="line"><span class="number">1000000</span></span><br><span class="line"><span class="number">44</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;假设v初始为1，线程1和线程2各自读取并处理v的副本。</p><p>&emsp;&emsp;线程1执行到weakCompareAndSetInt(o, offset, v, v + delta)，线程切换。</p><p>&emsp;&emsp;线程2执行weakCompareAndSetInt(o, offset, v, v + delta)，此时内存v为1，所以更新为v+1，此时内存v为4，线程切换。</p><p>&emsp;&emsp;线程1恢复，执行weakCompareAndSetInt发现内存为4，自己expected为3，所以执行失败返回false。</p><p>&emsp;&emsp;执行v = getIntVolatile(o, offset);线程2的修改对于线程1来说是可见的，所以线程1可以了解线程2修改了v并已经结束，所以v更新为4，并继续执行weakCompareAndSetInt，成功后v更新为5。</p><p>&emsp;&emsp;以上过程不管有多少线程插队执行，CAS都保证了线程最终要在最新的内存数据上进行修改，保证了线程安全。</p><p>&emsp;&emsp;CAS并不是完美的，因为其终究是根据值是否修改来判断是否有进行操作，当出现ABA操作导致值未变化也会被CAS认为是未被修改过，当然在大部分使用CAS的场景下，ABA就可以被当作未修改来处理，如果需要区分时CAS也就不一定是此场景的最优选择了。</p><hr><h2 id="CAS实现原子操作的三大问题"><a href="#CAS实现原子操作的三大问题" class="headerlink" title="CAS实现原子操作的三大问题"></a><strong>CAS实现原子操作的三大问题</strong></h2><p>&emsp;&emsp;Java的并发包中有些并发框架也使用了自旋CAS来实现原子操作，如LinkedTransferQueue的Xfer()方法，CAS常用来实现乐观锁，即每次的数据操作都是CAS，只有判断当前执行过程中没有其它线程对数据进行修改时才将结果存入。</p><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a><strong>ABA问题</strong></h3><p>&emsp;&emsp;CAS操作值时要检查值有没有变化，所以如果值由A-&gt;B-&gt;A仍可以通过检测，实际是发生过变化的。</p><p>&emsp;&emsp;解决方法：如加入修改次数，版本号。1A-&gt;2B-&gt;3A。</p><p>&emsp;&emsp;Java 1.5后可以通过Atomic包中的AtomicStampedReference解决ABA问题。compareAndSet()会先检查当前引用是否等于预期引用，并检查当前标志是否等于预期标志，如果都相等，则以原子方式将引用和标志设置为给定的更新值。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean compareAndSet(V   expectedReference,</span><br><span class="line">                             V   <span class="keyword">new</span><span class="type">Reference</span>,</span><br><span class="line">                             int expectedStamp,</span><br><span class="line">                             int <span class="keyword">new</span><span class="type">Stamp</span>) &#123;</span><br><span class="line">    Pair&lt;V&gt; current = pair;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        expectedReference == current.reference &amp;&amp;</span><br><span class="line">        expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">        ((<span class="keyword">new</span><span class="type">Reference</span> == current.reference &amp;&amp;</span><br><span class="line">          <span class="keyword">new</span><span class="type">Stamp</span> == current.stamp) ||</span><br><span class="line">         casPair(current, Pair.of(<span class="keyword">new</span><span class="type">Reference</span>, <span class="keyword">new</span><span class="type">Stamp</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> boolean casPair(Pair&lt;V&gt; cmp, Pair&lt;V&gt; val) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, pairOffset, cmp, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a><strong>循环时间长开销大</strong></h3><p>&emsp;&emsp;自旋CAS长时间不能执行成功，会给CPU带来巨大的性能开销。</p><p>&emsp;&emsp;解决办法：JVM支持处理器提供的pause指令。</p><blockquote><p><strong>pause指令有两个作用：</strong></p><ol><li>延迟流水线执行指令(de-pipeline)，使CPU不会消耗过多的执行资源，延迟的时间根据具体的实现决定。</li><li>避免在退出循环时因为内存顺序冲突(Memory Order Violation)引起CPU流水线被清空(CPU Pipeline Flush)，从而提高了CPU的执行效率。</li></ol></blockquote><h3 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a><strong>只能保证一个共享变量的原子操作</strong></h3><p>&emsp;&emsp;当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性。</p><p>&emsp;&emsp;解决办法：可以用锁，或者是把多个共享变量合并成一个共享变量来操作。</p><p>&emsp;&emsp;比如，有两个共享变量i＝2，j=a，合并一下ij=2a，然后用CAS来操作ij。</p><p>&emsp;&emsp;从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的CAS原理。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="jvm" scheme="http://linyishui.top/tags/jvm/"/>
    
      <category term="cas" scheme="http://linyishui.top/tags/cas/"/>
    
  </entry>
  
  <entry>
    <title>try-catch，try-with-resource</title>
    <link href="http://linyishui.top/2019051101.html"/>
    <id>http://linyishui.top/2019051101.html</id>
    <published>2019-05-18T03:42:50.000Z</published>
    <updated>2019-05-18T10:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;try-catch是为了处理异常而设计的机制，可以结合<a href="../2019031601.html" title="Title">异常</a>相关知识一起学习。</p><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a><strong>try-catch</strong></h1><blockquote><p><strong>为什么要设计try-catch？</strong></p><p>&emsp;&emsp;程序需要有错误处理机制，所以有throws用来报错，也需要try-catch来处理错误。但try-catch需要被正确且合理的使用，需要每个开发人员搞懂原理和好的应用场景。</p><p>&emsp;&emsp;如一些人会只抛出异常，全部throw，这种做法是在躲避异常，不是一种好的编程习惯，对于程序来说异常和错误总是需要解决的。</p><p>&emsp;&emsp;而有一些人可能会在所有地方都try-catch，但并没有解决异常的能力没有真正的去处理异常，也就隐藏了BUG，同时也增加了try-catch的开发开销和性能开销，反而得不偿失。</p></blockquote><blockquote><p><strong>项目中应该使用try-catch的场景有哪些？</strong></p><p>&emsp;&emsp;1.当在业务模块遇到exception，一般会在底层throws，在业务顶层try-catch。比如登陆模块，我们实现了内部的登陆函数login()，那么就可能会有：UserNotFoundException、PwdNotMatchException等异常，如果在login()内try-catch，那么在表现层就无法详细的展示具体信息，当然总是会有解决办法的，比如返回errorcode，其相比直接throws让调用者处理来讲，至少首先灵活性差了，扩展性也不高，代码可复用性应该也比不上，这是我目前阶段的感受。</p><p>&emsp;&emsp;2.某些方法内需要进行一些处理，否则程序可能会崩溃或过度消耗资源，比如一些IO操作，网络操作。</p><p>&emsp;&emsp;3.需要对异常进行”翻译”、”记录”等情况，如隐藏一些数据库异常信息、记录异常日志。</p><p>&emsp;&emsp;建议初学者先避免使用try-catch，抛出异常让有经验的来擦屁股，在掌握try-catch以及异常的相关知识，并对项目有一定的理解后再尝试使用，或者按照项目设计的异常处理机制来处理。</p></blockquote><blockquote><p><strong>try-catch的优缺点？</strong></p><p>优点：</p><ol><li>增强了代码的鲁棒性。</li><li>比较灵活应对异常情况，提供解决方案。</li></ol><p>缺点：</p><ol><li>增加了代码的复杂度。</li><li>有一定的性能消耗。</li><li>在一定程度上会诱导初学者滥用。</li></ol></blockquote><h1 id="结构和执行顺序"><a href="#结构和执行顺序" class="headerlink" title="结构和执行顺序"></a><strong>结构和执行顺序</strong></h1><p>&emsp;&emsp;try-catch-finally结构如下，可以看作不同的模块。正常流程下会走try块，当try块发生catch定义的Exception时就跳至catch块，而finally则一定会被执行。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (ExceptionType1 ex1 | ExceptionType2 ex2)&#123;</span><br><span class="line">    <span class="comment">//handler for this exception type</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//一定执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解耦合，实现单一职能，且可以捕获finally中异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//code</span></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//一定执行</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">catch</span> (ExceptionType1 ex1 | ExceptionType2 ex2)&#123;</span><br><span class="line">    <span class="comment">//handler for this exception type</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以只有try-finally语句块</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;catch的异常可以合并，因为catch块只有发生异常时执行，而try内代码只有顺利的情况下才能全部执行，所以需要finally语句块可以保证某部分代码无论何种情况一定都会执行。比如读取文件流时，需要在退出方法前回收资源，最好的方法就是在finally语句块内执行，其执行顺序一直是最后且一定执行。</p><p>&emsp;&emsp;finally中代码会在return之前执行，若finally中也有return语句会覆盖其它地方的return。如下代码测试，分别计算1，2，3输出结果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"f(1): "</span> +f(<span class="number">1</span>));</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"f(2): "</span> +f(<span class="number">2</span>));</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"f(3): "</span> +f(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span>(<span class="params"><span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = n * n;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;结果如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">1</span>)</span></span>: <span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">2</span>)</span></span>: <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">3</span>)</span></span>: <span class="number">9</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;所以try-catch-finally执行顺序为：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. run try-code</span><br><span class="line">2.<span class="built_in"> if </span>has exception then<span class="built_in"> goto </span>3 else 6</span><br><span class="line">3. run catch-code</span><br><span class="line">4. run<span class="keyword"> final</span>ly-code</span><br><span class="line">5.<span class="built_in"> if </span>finally-code has<span class="built_in"> return </span>then<span class="built_in"> return-finally </span>else return-catch</span><br><span class="line">6. run<span class="keyword"> final</span>ly-code</span><br><span class="line">7.<span class="built_in"> if </span>finally-code has<span class="built_in"> return </span>then<span class="built_in"> return-finally </span>else return-try</span><br></pre></td></tr></table></figure></p><h1 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a><strong>try-with-resource</strong></h1><p>&emsp;&emsp;Java SE7 以后新增了带资源的try语句，当try块退出时会自动调用res.close。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resource res = ...)&#123;</span><br><span class="line">    work with res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//try-catch-finally关闭文件资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"/in.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        PrintWriter <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(<span class="string">"/out.txt"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">in</span>.hasNext())</span><br><span class="line">            <span class="keyword">out</span>.println(<span class="keyword">in</span>.next().toUpperCase());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//try-with-resource关闭文件资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"/in.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        PrintWriter <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(<span class="string">"/out.txt"</span>))&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">in</span>.hasNext())</span><br><span class="line">            <span class="keyword">out</span>.println(<span class="keyword">in</span>.next().toUpperCase());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反编译后得到</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] var0</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Scanner var1 = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"/in.txt"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">            Throwable var2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PrintWriter var3 = <span class="keyword">new</span> PrintWriter(<span class="string">"/out.txt"</span>);</span><br><span class="line">                Throwable var4 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">                        var3.println(var1.next().toUpperCase());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var29) &#123;</span><br><span class="line">                    var4 = var29;</span><br><span class="line">                    <span class="keyword">throw</span> var29;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (var4 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                var3.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable var28) &#123;</span><br><span class="line">                                var4.addSuppressed(var28);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            var3.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var31) &#123;</span><br><span class="line">                var2 = var31;</span><br><span class="line">                <span class="keyword">throw</span> var31;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;<span class="comment">//编译器自动生成资源关闭操作</span></span><br><span class="line">                <span class="keyword">if</span> (var1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            var1.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable var27) &#123;</span><br><span class="line">                            var2.addSuppressed(var27);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        var1.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException var33) &#123;</span><br><span class="line">            var33.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java核心技术 卷Ⅱ》</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/6dqFNzfSe88vYMW_r3s3Bw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/6dqFNzfSe88vYMW_r3s3Bw</a></p></blockquote><p><em>因博客主未标明不可转载，若内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      涉及内容：try-catch-finally，try-with-resource
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自动装箱和拆箱，可变长参数，数值字面量</title>
    <link href="http://linyishui.top/2019051001.html"/>
    <id>http://linyishui.top/2019051001.html</id>
    <published>2019-05-18T02:18:40.000Z</published>
    <updated>2019-05-18T03:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a><strong>自动装箱和拆箱</strong></h1><p>&emsp;&emsp;装箱：将基本类型用它们对应的引用类型包装起来。</p><p>&emsp;&emsp;拆箱：将包装类型转换为基本数据类型。</p><p>&emsp;&emsp;Java使用自动装箱和拆箱机制，节省了常用数值的内存开销和创建对象的开销，提高了效率，由编译器来完成，编译器会在编译期根据语法决定是否进行装箱和拆箱动作。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a><strong>场景</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装箱</span></span><br><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//编译器自动处理为-&gt; </span></span><br><span class="line"><span class="comment">//Integer i = Integer.valueOf(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拆箱</span></span><br><span class="line"><span class="keyword">int</span> i1 = i;</span><br><span class="line"><span class="comment">//编译器自动处理为-&gt; </span></span><br><span class="line"><span class="comment">//int i1 = i.intValue();</span></span><br></pre></td></tr></table></figure><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h2><p>&emsp;&emsp;也可以把包装类型的作用纳入：</p><ol><li>方便开发人员不用处理基本类型和包装类的转换过程</li><li>包装类扩展了基本类型，可以提供丰富的属性和API</li><li>包装类为泛型提供了支持</li><li>包装类把基本类型封装为了抽象对象，也就体现了对象的优点：更好的模拟现实</li></ol><h1 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a><strong>可变长参数</strong></h1><p>&emsp;&emsp;可变长参数在Java 1.5时引入，可以使方法将一个任意数目的值作为参数。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">print</span>(<span class="keyword">String</span>... strs)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span> : strs)</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;反编译后如下，String…编译为字符串数组String[]，数组长度为参数个数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class VarParm &#123;</span><br><span class="line">    <span class="keyword">public</span> VarParm() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] var0) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">print</span>(<span class="keyword">String</span>... var0) &#123;</span><br><span class="line">        <span class="keyword">String</span>[] var1 = var0;</span><br><span class="line">        <span class="keyword">int</span> var2 = var0.length;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">            <span class="keyword">String</span> var4 = var1[var3];</span><br><span class="line">            System.out.<span class="built_in">println</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数值字面量"><a href="#数值字面量" class="headerlink" title="数值字面量"></a><strong>数值字面量</strong></h1><p>&emsp;&emsp;在Java 7引入了数值字面量，允许在整型和浮点型数字中添加下划线“_”，在编译时会被擦除，用来方便阅读</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumLiteralValue</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>_000_000;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console: <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Decompile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumLiteralValue</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumLiteralValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] var0</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var1 = <span class="number">10000000</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/27657548" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27657548</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/6dqFNzfSe88vYMW_r3s3Bw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/6dqFNzfSe88vYMW_r3s3Bw</a></p></blockquote><p><em>因博客主未标明不可转载，若内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      涉及内容：自动装箱和拆箱，可变长参数，数值字面量
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型</title>
    <link href="http://linyishui.top/2019051701.html"/>
    <id>http://linyishui.top/2019051701.html</id>
    <published>2019-05-17T06:42:58.000Z</published>
    <updated>2019-07-12T08:42:18.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a><strong>Java内存模型</strong></h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p>&emsp;Java的并发采用的是<strong>共享内存模型</strong>(<em>什么是共享内存模型？</em>)，Java线程之间的通信总是<strong>隐式</strong>进行(<em>怎么才叫隐式的通信？</em>)，整个通信过程对程序员完全透明。</p><p>&emsp;并发编程要解决的两个关键问题：线程之间如何通信？线程之间如何同步？</p><h4 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a><strong>Java内存模型的抽象结构</strong></h4><p>&emsp;可以配合<a href="../2019050801.html" title="Title">Java内存区域和内存溢出异常</a>一起学习。</p><p>&emsp;首先我们应该知道，所有的<strong>实例域</strong>、<strong>静态域</strong>和<strong>数组元素</strong>都存储在堆内存中，堆内存在线程之间共享。可以将它们看作<strong>共享变量</strong>。而<strong>局部变量</strong>，<strong>方法定义参数</strong>和<strong>异常处理器参数</strong>这些则不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p><p>&emsp;Java内存模型定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM(Java内存模型)的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84.png" alt="Java内存模型抽象结构"></p><h4 id="线程之间如何通信"><a href="#线程之间如何通信" class="headerlink" title="线程之间如何通信"></a><strong>线程之间如何通信</strong></h4><p>&emsp;<strong>通信</strong>是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：<strong>共享内存</strong>和<strong>消息传递</strong>。</p><p>&emsp;在<strong>共享内存</strong>的并发模型里，线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通信。在<strong>消息传递</strong>的并发模型里，线程之间没有公共状态，线程之间必须通过发送消息来显式进行通信。</p><p>&emsp;Java线程之间的通信由<strong>Java内存模型</strong>控制，Java内存模型决定一个线程对共享变量的写入何时对另一个线程可见。</p><blockquote><p><strong>线程A和线程B通信步骤：</strong></p><ol><li>线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li><li>线程B到主内存中去读取线程A之前已更新过的共享变量。</li></ol></blockquote><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.png" alt="线程间通信"></p><p>&emsp;如图所示，本地内存A和本地内存B有主内存中共享变量x的副本。假设初始时，这3个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p><p>&emsp;从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序员提供内存可见性保证。</p><h4 id="线程之间如何同步"><a href="#线程之间如何同步" class="headerlink" title="线程之间如何同步"></a><strong>线程之间如何同步</strong></h4><p>&emsp;<strong>同步</strong>是指程序中用于控制不同线程间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p><h2 id="从源代码到指令序列的重排序"><a href="#从源代码到指令序列的重排序" class="headerlink" title="从源代码到指令序列的重排序"></a><strong>从源代码到指令序列的重排序</strong></h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>&emsp;在程序执行时，为了提高性能，编译器和处理器常常会对指令进行<strong>重排序</strong>。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a><strong>类型</strong></h4><blockquote><p>重排序分为3种类型：</p><ol><li>编译器优化的重排序：编译器在不改变单线程程序语义的前提下，重新安排语句的执行顺序。</li><li>指令级并行的重排序：现代处理器会采用指令级并行技术(ILP)来将多条指令重叠执行。如果不存在数据依赖性，则处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序：由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序中执行。</li></ol></blockquote><p>&emsp;软件从源码到最终执行的指令序列的排序过程：源代码-&gt;1.编译器优化重排序-&gt;2.指令级并行重排序-&gt;3.内存重排序-&gt;最终执行的指令序列</p><h4 id="隐患"><a href="#隐患" class="headerlink" title="隐患"></a><strong>隐患</strong></h4><p>&emsp;重排序会导致一个问题：<strong>内存可见性问题</strong>。</p><p>&emsp;比如类型1，编译器具有重排序规则，会禁止特定类型的编译器重排序。对于类型2和3，处理器的重排序规则要求Java编译器在生成指令序列时，插入特定类型的内存屏障（一组处理器指令，用来实现对内存操作的顺序限制）指令，通过<strong>内存屏障指令</strong>来禁止特定类型的处理器重排序。</p><p>&emsp;Java内存模型属于语言级别的内存模型，所以不同的编译器和处理器平台上可以提供一致的内存可见性保证。</p><h2 id="并发编程模型分类"><a href="#并发编程模型分类" class="headerlink" title="并发编程模型分类"></a><strong>并发编程模型分类</strong></h2><h4 id="读写缓冲区"><a href="#读写缓冲区" class="headerlink" title="读写缓冲区"></a><strong>读写缓冲区</strong></h4><blockquote><p>&emsp;处理器使用写缓冲区临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h4><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170101.png" alt="处理器操作内存的执行结果"></p><p>&emsp;处理器A和B同时把共享变量读入自己的写缓冲区(A1,B1)，然后再从内存中读取另一个共享变量(A2,B2)，最后才把缓存中的脏数据刷新到内存中(A3,B3)，所以得到的x=y=0。即处理器执行顺序为A1-&gt;A2，而内存执行顺序则是A2-&gt;A1，即被内存系统重排序了。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170102.png" alt="处理器和内存的交互"></p><p>&emsp;由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操作进行重排序。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170103.png" alt="处理器的重排序规则"></p><p>&emsp;“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。</p><p>&emsp;为了保证内存可见性，Java编译器在生成指令序列的适当位置会插入<strong>内存屏障指令</strong>来禁止特定类型的处理器重排序。</p><p>&emsp;JMM把内存屏障指令分为4类：</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170104.png" alt="内存屏障类型表"></p><p>&emsp;StoreLoad Barriers是一个“全能型”的屏障，它同时具有其他3个屏障的效果。现代的多处理器大多支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（Buffer Fully Flush）。</p><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a><strong>happens-before</strong></h2><p>&emsp;从JDK 5开始，新的JSR-133内存模型使用happens-before的概念来阐述操作之间的内存可见性。在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。</p><p>&emsp;与程序员密切相关的happens-before规则如下：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的<br>读。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li></ul><blockquote><p>两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。</p></blockquote><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170105.png" alt="happens-before与JMM的关系"></p><p>&emsp;如图所示，一个happens-before规则对应于一个或多个编译器和处理器重排序规则。对于Java程序员来说，happens-before规则简单易懂，它避免Java程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现方法。</p><h1 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a><strong>重排序</strong></h1><p>&emsp;<strong>重排序</strong>是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</p><h2 id="数据依赖性"><a href="#数据依赖性" class="headerlink" title="数据依赖性"></a><strong>数据依赖性</strong></h2><p>&emsp;若两个操作访问同一个变量，且一个为写操作，则两者间就存在<strong>数据依赖性</strong>。</p><ol><li>写后读：a = 1; b = a; 写一个变量后再读此变量。</li><li>写后写：a = 1; a = 2; 写一个变量后再写此变量。</li><li>读后写：a = b; a = 1; 读一个变量后再写此变量。</li></ol><p>&emsp;上述情况只要重排序改变执行顺序，必然会导致执行结果的改变。所以会导致重排序的编译器和处理器都会遵照一个原则：<strong>存在数据依赖性的两个操作不会被改变执行顺序</strong>。（只针对单个处理器和单个线程中执行的操作，多处理器多线程不考虑）</p><h2 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a><strong>as-if-serial语义</strong></h2><p>&emsp;as-if-serial语义：表示无论如何重排序，单线程的执行结果都不能被改变。所以为了遵守as-if-serial语义，编译器和处理器要遵守<strong>数据依赖性</strong>。</p><p>&emsp;如以下情况：A，B，C三个操作，AC和BC分别存在数据依赖性，所以C不能被重排序到AB前面，执行的顺序就可能有ABC和BAC两种，但不会影响最终的结果。这类保护机制会让开发者有种错觉，程序是按照代码的顺序执行的，但实际上并不准确。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>; <span class="comment">// A</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">1.0</span>; <span class="comment">// B</span></span><br><span class="line"><span class="keyword">double</span> area = pi * r * r; <span class="comment">// C</span></span><br></pre></td></tr></table></figure><h2 id="程序顺序规则"><a href="#程序顺序规则" class="headerlink" title="程序顺序规则"></a><strong>程序顺序规则</strong></h2><p>&emsp;根据<strong>happens-before</strong>的程序顺序规则，ABC操作有三个happens-before关系：</p><ol><li>A happens-before B</li><li>B happens-before C</li><li>A happens-before C</li></ol><p>&emsp;3由1和2传递可得，虽然A happens-before B，但操作A并不需要对B可见，且重排序后不会导致结果改变，所以Java内存模型允许此类重排序。主要目的就是尽量的提高并行度。</p><h2 id="重排序对多线程的影响"><a href="#重排序对多线程的影响" class="headerlink" title="重排序对多线程的影响"></a><strong>重排序对多线程的影响</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReorderExample</span> </span>&#123;       </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;      </span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标记，标识变量a是否已被写入       </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">        a = <span class="number">1</span>;                  <span class="comment">// 1           </span></span><br><span class="line">        flag = <span class="keyword">true</span>;            <span class="comment">// 2       </span></span><br><span class="line">    &#125;       </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;            <span class="comment">// 3               </span></span><br><span class="line">            <span class="keyword">int</span> i =  a * a;    <span class="comment">// 4               </span></span><br><span class="line">            ……           </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;当由线程A和B同时工作，A执行writer()，B执行reader()，那么B是否可见A对a的写入呢？可能看到也可能看不到。</p><p>&emsp;首先1和2以及3和4没有数据依赖性，所以可进行重排序。</p><p>&emsp;当2-&gt;1时，有可能先标记写入执行操作2，然后B执行3读取变量，发现已写入就执行4，但其实操作1还未执行导致多线程程序的语义因为重排序而被破坏。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170106.png" alt="程序执行时序图"></p><p>&emsp;当4-&gt;3时，首先操作3和4存在控制依赖关系，会影响指令序列执行的并行度，所以编译器和处理器会采用<strong>猜测执行</strong>来客服控制相关性对并行度的影响。所以4可能会先执行并将结果保存到一个名为<strong>重排序缓冲</strong>(Recorder Buffer，ROB)的硬件缓存中。当3执行为真时再把结果写回。所以这种情况明显会导致多线程程序的语义因为重排序而被破坏。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170107.png" alt="程序执行时序图"></p><h1 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a><strong>顺序一致性</strong></h1><p>&emsp;顺序一致性内存模型是一个理论参考模型，在设计的时候，处理器的内存模型和编程语言的内存模型都会以顺序一致性内存模型作为参照。</p><h2 id="数据竞争与顺序一致性"><a href="#数据竞争与顺序一致性" class="headerlink" title="数据竞争与顺序一致性"></a><strong>数据竞争与顺序一致性</strong></h2><blockquote><p>Java内存模型对数据竞争定义：</p><p>&emsp;在一个线程中写一个变量，在另一个线程读同一个变量，而且写和读没有通过同步来排序。</p></blockquote><p>&emsp;当代码中存在数据竞争时，程序的执行结果往往会与开发者所预估的结果相左，所以Java内存模型对正确同步的多线程程序的内存一致性做了如下保证：</p><p>&emsp;如果程序是正确同步的，程序的执行会具有顺序一致性——即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。此处的同步是广义上的同步，包括如常用同步语句synchronized、volatile和final的正确使用。</p><h2 id="顺序一致性内存模型"><a href="#顺序一致性内存模型" class="headerlink" title="顺序一致性内存模型"></a><strong>顺序一致性内存模型</strong></h2><p>&emsp;两个特性：</p><ol><li>一个线程中的所有操作必须按照程序的顺序执行。</li><li>（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。</li></ol><p>&emsp;顺序一致性内存有一个单一的全局内存，此内存通过一个左右摆动的开关可以联通任意的一个线程，每个线程必须按照程序的顺序来执行内存的读/写操作。任意时间点只有最多一个线程可以连接内存，所以并行执行的多个线程的读写操作会被此开关串行化。</p><p>&emsp;假设有两个线程A和B，分别有3个操作，执行顺序分别为：A1-&gt;A2-&gt;A3，B1-&gt;B2-&gt;B3。当使用监视器锁来同步两个线程时，在顺序一致性模型中的执行效果如下：</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170108.png" alt="顺序一致性模型的一种执行效果"></p><p>&emsp;如果没有对线程作同步，则在顺序一致性模型中的执行效果如下：</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170109.png" alt="顺序一致性模型中的另一种执行效果"></p><p>&emsp;未同步程序在顺序一致性模型中虽然整体执行顺序是无序的，但所有线程都只能看到一个一致的整体执行顺序，是因为顺序一致性内存模型中的每个操作必须立即对任意线程可见。</p><p>&emsp;但对于Java内存模型，未同步程序在JMM中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致。比如，在当前线程把写过的数据缓存在本地内存中，在没有刷新到主内存之前，这个写操作仅对当前线程可见；从其他线程的角度来观察，会认为这个写操作根本没有被当前线程执行。只有当前线程把本地内存中写过的数据刷新到主内存之后，这个写操作才能对其他线程可见。在这种情况下，当前线程和其他线程看到的操作执行顺序将不一致。</p><h2 id="同步程序的顺序一致性内存模型"><a href="#同步程序的顺序一致性内存模型" class="headerlink" title="同步程序的顺序一致性内存模型"></a><strong>同步程序的顺序一致性内存模型</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;       </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;      </span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标记，标识变量a是否已被写入       </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;       <span class="comment">//获取锁    </span></span><br><span class="line">        a = <span class="number">1</span>;                  <span class="comment">// 1           </span></span><br><span class="line">        flag = <span class="keyword">true</span>;            <span class="comment">// 2       </span></span><br><span class="line">    &#125;                                         <span class="comment">//释放锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;       <span class="comment">//获取锁 </span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;            <span class="comment">// 3               </span></span><br><span class="line">            <span class="keyword">int</span> i =  a * a;    <span class="comment">// 4               </span></span><br><span class="line">            ……           </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;                                         <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在上面示例代码中，假设A线程执行writer()方法后，B线程执行reader()方法。这是一个正确同步的多线程程序。根据Java内存模型规范，该程序的执行结果将与该程序在顺序一致性模型中的执行结果相同。下面是该程序在两个内存模型中的执行时序对比图：</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170110.png" alt="两个内存模型中的执行时序对比图"></p><p>&emsp;顺序一致性模型中，所有操作完全按程序的顺序串行执行。而在Java内存模型中，临界区内的代码可以重排序（但Java内存模型允许临界区内的代码“逸出”到临界区之外，那样会破坏监视器的语义）。Java内存模型会在退出临界区和进入临界区这两个关键时间点做一些特别处理，使得线程在这两个时间点具有与顺序一致性模型相同的内存视图（具体细节后文会说明）。虽然线程A在临界区内做了重排序，但由于监视器互斥执行的特性，这里的线程B根本无法“观察”到线程A在临界区内的重排序。这种重排序既提高了执行效率，又没有改变程序的执行结果。</p><h2 id="未同步程序的执行特性"><a href="#未同步程序的执行特性" class="headerlink" title="未同步程序的执行特性"></a><strong>未同步程序的执行特性</strong></h2><p>&emsp;对于未同步和不能正确同步的多线程程序，Java内存模型只能提供最小安全性：线程执行时读取到的值，要么是之前某个线程的值，要么是默认值(0, Null, False)，Java内存模型保证线程读操作读到的值不会无中生有(Out Of Thin Air)的冒出来。</p><p>&emsp;为了实现最小安全性，JVM在堆上分配对象时，首先会对内存空间进行清零，然后才会在上面分配对象（JVM内部同步这两个操作），所以在已清零的内存空间分配对象时，域的默认初始化实际上已经完成了。</p><blockquote><p>为什么Java内存模型不保证未同步程序的执行结果与顺序一致性模型执行结果一致？</p><p>&emsp;因为若要保持一致，Java内存模型需要禁止大量的处理器和编译器优化，会对程序的执行性能造成很大的影响。而且未同步程序在顺序一致性模型中执行时，整体是无序的，执行结果很难预知。最后，保证两者的一致性意义并不大。</p></blockquote><p>&emsp;未同步程序在两个模型的执行差异：</p><ol><li>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而Java内存模型不保证单线程内的操作会按程序的顺序执行（比如上面正确同步的多线程程序在临界区内的重排序）。</li><li>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而Java内存模型不保证所有线程能看到一致的操作执行顺序。</li><li>Java内存模型不保证对64位的long型和double型变量的写操作具有原子性，而顺序一致性模型保 证对所有的内存读/写操作都具有原子性。</li></ol><h4 id="为什么Java内存模型不保证对64位的long型和double型变量的写操作具有原子性？"><a href="#为什么Java内存模型不保证对64位的long型和double型变量的写操作具有原子性？" class="headerlink" title="为什么Java内存模型不保证对64位的long型和double型变量的写操作具有原子性？"></a><strong>为什么Java内存模型不保证对64位的long型和double型变量的写操作具有原子性？</strong></h4><p>&emsp;<strong>处理器</strong>和<strong>内存</strong>之间通过<strong>总线</strong>来传递数据，数据传递的过程被称为<strong>总线事务</strong>(Bus Transaction)，包括读事务和写事务。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务都会读/写内存中一个或多个物理上连续的字。关键的是：总线会同步试图并发使用总线的事务，在一个处理器执行总线事务的期间，总线会禁止其他处理器和I/O设备执行内存的读/写。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170111.png" alt="总线的工作机制"></p><p>&emsp;处理器A、B、C同时向总线发起总线事务，总线仲裁(Bus Arbitration)会对竞争做出裁决，确保所有处理器能公平的访问内存。此工作机制可以把所有处理器对内存的访问以串行化的方式来执行，确保了单个总线事务之中内存读/写操作的原子性。</p><p>&emsp;在一些32位的处理器上保证对64位数据的写操作的原子性需要比较大的开销，所以为了照顾这些处理器，Java语言规范鼓励但并不强制要求JVM对64位的long型和double型变量的写操作具有原子性。当JVM在此类处理器上运行时，可能会把一个64的long型和double型变量拆分为两个32位的写操作来执行，那么这两个写操作可能会在不同的总线事务上执行，所以就不在具有原子性了。</p><p>当单个内存操作不具有原子性时，可能会有奇怪的现象发生：</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170112.png" alt="总线事务执行的时序图"></p><p>处理器A写一个long型变量，同时处理器B要读取这个变量，因为处理器A中的64位写操作被拆分为2个32位写操作，并被分配到不同的写事务中执行，而处理器B中的64位读操作被分配到单个读事务中执行。此时处理器B就只能看到被”写了一半”的无效值。（JSR-133之前的内存模型允许64位读操作也进行拆分，JSR-133后规定读操作都必须有原子性）</p><h2 id="volatile的内存语义"><a href="#volatile的内存语义" class="headerlink" title="volatile的内存语义"></a><strong>volatile的内存语义</strong></h2><p>参考<a href="../2019040201.html" title="Title">volatile</a>相关章节。</p><h2 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a><strong>锁的内存语义</strong></h2><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java内存模型相关概念，顺序一致性，重排序，同步原语等。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="jvm" scheme="http://linyishui.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>原子操作的实现原理</title>
    <link href="http://linyishui.top/2019051601.html"/>
    <id>http://linyishui.top/2019051601.html</id>
    <published>2019-05-16T03:10:56.000Z</published>
    <updated>2019-05-23T09:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a><strong>原子性</strong></h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p>&emsp;&emsp;<strong>原子</strong>(atomic)是不能再被切割的最小粒子。</p><p>&emsp;&emsp;<strong>原子操作</strong>是不能被中断的一个或一系列操作。</p><h2 id="CPU常用术语"><a href="#CPU常用术语" class="headerlink" title="CPU常用术语"></a><strong>CPU常用术语</strong></h2><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/CPU%E6%9C%AF%E8%AF%AD.png" alt="CPU术语"></p><hr><h2 id="一、CPU实现原子操作"><a href="#一、CPU实现原子操作" class="headerlink" title="一、CPU实现原子操作"></a><strong>一、CPU实现原子操作</strong></h2><ol><li><p>简单读写：处理器保证从系统内存中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。</p></li><li><p>复杂操作：处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p></li></ol><p>非原子操作：如比较常用的读改写操作，最经典的i++就是，要分步执行读取、修改、写入操作。</p><h3 id="总线锁"><a href="#总线锁" class="headerlink" title="总线锁"></a><strong>总线锁</strong></h3><p>&emsp;&emsp;处理器可以通过总线锁来保证原子性，即通过在总线上输出LOCK #信号，使其他处理器的请求阻塞，此处理器就可以独占共享内存了。</p><p>&emsp;&emsp;因为总线锁封闭了处理器和内存间的通信，造成这个阶段其他处理器无法工作的局面，这是很大的性能开销，所以一些场合可以用<strong>缓存锁定</strong>来代替总线锁定。</p><h3 id="缓存锁定"><a href="#缓存锁定" class="headerlink" title="缓存锁定"></a><strong>缓存锁定</strong></h3><p>&emsp;&emsp;谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效。</p><p><strong>无法使用缓存锁定的情况：</strong></p><ol><li>CPU不支持缓存锁定</li><li>操作的数据无法被缓存到处理器的缓存区，或操作的数据跨了多个缓存行。</li></ol><h3 id="缓存一致性机制"><a href="#缓存一致性机制" class="headerlink" title="缓存一致性机制"></a><strong>缓存一致性机制</strong></h3><p>&emsp;&emsp;简单说就是：当某处理器对缓存中的数据进行了操作之后，通知其他处理器放弃储存在它们内部的缓存，或者从主内存中重新读取</p><blockquote><p>PS: 频繁使用的内存会缓存在处理器的L1、L2和L3高速缓存里，以便减少处理器和内存的交互。</p></blockquote><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE.png" alt="缓存一致性机制"></p><blockquote><p><strong>MESI协议</strong>(Modified、Exclusive、Share or Invalid)</p><p>Modified、Exclusive、Share or Invalid即缓存行的四个状态：</p><ol><li>Modified-<strong>被修改</strong>：处于此状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。</li><li>Exclusive-<strong>独占</strong>：处于此状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。</li><li>Share-<strong>共享</strong>：处于此状态的数据在多个CPU中都有缓存，且与内存一致。</li><li>Invalid-<strong>无效</strong>：本CPU中的这份缓存已经无效。</li></ol><p>此协议规定：</p><ul><li>一个处于Modified状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。 </li><li>一个处于Share状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。 </li><li>一个处于Exclusive状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。</li></ul></blockquote><p>&emsp;&emsp;当某CPU读取数据时，若其缓存行的状态为Invalid，则需要从内存中读取数据，然后把状态改为Share；如果不是Invalid，则可以直接读取缓存中的数据。但还需要同时判断其他CPU的监听结果，如果其他CPU也有此数据的缓存，并处于Modified状态，则要等待其将数据更新回内存后，才能继续读取。</p><p>&emsp;&emsp;当某CPU写入数据时，只能在状态为Modified和Exclusive时才允许执行，否则需要发送<strong>RFO指令</strong>（Read Or Ownership，这是一种总线事务），通知其他CPU使其缓存无效，会有一定的性能开销，写入后将状态转换为Modified。</p><h3 id="指令支持"><a href="#指令支持" class="headerlink" title="指令支持"></a><strong>指令支持</strong></h3><p>&emsp;&emsp;CPU提供了一些Lock前缀的指令来支持两种锁定：</p><ul><li>位测试和修改指令：BTS、BTR、BTC</li><li>交换指令：XADD、CMPXCHG</li><li>操作和逻辑指令：ADD、OR等</li></ul><p>&emsp;&emsp;这些指令都会使被操作的内存区域加锁。</p><hr><h2 id="二、Java实现原子操作"><a href="#二、Java实现原子操作" class="headerlink" title="二、Java实现原子操作"></a><strong>二、Java实现原子操作</strong></h2><p>&emsp;&emsp;在Java中可以通过<strong>锁机制</strong>和<strong>循环CAS</strong>的方式来实现原子操作。</p><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a><strong>锁机制</strong></h3><p>&emsp;&emsp;可以参考<a href="../2019032902.html" title="Title">锁机制</a></p><p>&emsp;&emsp;锁机制保证了只有获得锁的线程才有权操作被锁定的内存区域，。JVM内部实现了很多种锁机制，有偏向锁、轻量级锁和互斥锁。有意思的是除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。</p><h3 id="循环CAS"><a href="#循环CAS" class="headerlink" title="循环CAS"></a><strong>循环CAS</strong></h3><p>&emsp;&emsp;可以参考<a href="../2019051801.html" title="Title">CAS原理</a></p><p>&emsp;&emsp;循环CAS保证了共享变量的原子性操作。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><blockquote><p><a href="http://www.cnblogs.com/mengheng/p/3491092.html" target="_blank" rel="noopener">http://www.cnblogs.com/mengheng/p/3491092.html</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      原子操作的实现原理，简单介绍了缓存一致性机制
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="jvm" scheme="http://linyishui.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>线程QA</title>
    <link href="http://linyishui.top/2019051501.html"/>
    <id>http://linyishui.top/2019051501.html</id>
    <published>2019-05-15T02:21:37.000Z</published>
    <updated>2019-05-22T02:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a><strong>Q&amp;A</strong></h1><blockquote><p><strong>1. 线程与进程的区别？</strong></p><p>&emsp;&emsp;进程是操作系统分配资源的最小单元，线程则是操作系统调度的最小单元。一个程序至少有一个进程，一个进程至少有一个线程。</p></blockquote><blockquote><p><strong>2. 上下文切换？</strong></p><p>&emsp;&emsp;操作系统通过将单个CPU的时间片分配给多个进程来达到并行处理的效果，多线程使用单个或少于线程数CPU时，需要轮转使用CPU。</p><p>&emsp;&emsp;不同线程切换CPU时，因为当前线程任务并没有完成，需要保存线程的运行状态，以便再下次切回时能够继续执行，在此过程中发生的切换数据即上下文切换，其目的是为了方便线程从中断点恢复执行。</p></blockquote><blockquote><p><strong>3. 什么是线程调度器和时间分片？</strong></p><p>&emsp;&emsp;线程调度器(Thread Scheduler)是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。 线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。</p><p>&emsp;&emsp;时间分片(Time Slicing)是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者线程等待的时间。</p></blockquote><blockquote><p><strong>4. 线程之间是如何通信的？</strong></p><p>&emsp;&emsp;共享变量，中断。当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait() otify() otifyAll()方法可以用于线程间通信关于资源的锁的状态。</p></blockquote><blockquote><p><strong>5. notify()与notifyAll()区别？</strong></p><p>&emsp;&emsp;notifyAll()可以唤醒所有等待的线程，notify()只能唤醒一个</p></blockquote><blockquote><p><strong>6. wait()与sleep()区别？</strong></p><p>&emsp;&emsp;等待时wait会释放锁，而sleep一直持有锁。Wait通常被用于线程间交互，sleep通常被用于暂停执行。wait()方法会释放CPU执行权和占有的锁。</p><p>&emsp;&emsp;sleep(long)方法仅释放CPU使用权，锁仍然占用；线程被放入超时等待队列，与yield相比，它会使线程较长时间得不到运行。</p><p>&emsp;&emsp;yield()方法仅释放CPU执行权，锁仍然占用，线程会被放入就绪队列，会在短时间内再次执行。</p><p>&emsp;&emsp;wait和notify必须配套使用，即必须使用同一把锁调用；</p><p>&emsp;&emsp;wait和notify必须放在一个同步块中调用wait和notify的对象必须是他们所处同步块的锁对象。</p></blockquote><blockquote><p><strong>7. 为什么wait和notify方法要在同步块中调用？</strong></p><p>&emsp;&emsp;Java API强制要求这样做，非同步块内调用会抛出IllegalMonitorStateException异常。</p><p>&emsp;&emsp;当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。避免wait和notify之间产生竞态条件。</p></blockquote><blockquote><p><strong>8. 为什么弃用stop()？</strong></p><p>&emsp;&emsp;</p></blockquote><blockquote><p><strong>9. 为什么wait, notify 和 notifyAll这些方法不在thread类里面？</strong></p><p>&emsp;&emsp;一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。Java的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法。</p></blockquote><blockquote><p><strong>10. 为什么Thread类的sleep()和yield ()方法是静态的？</strong></p><p>&emsp;&emsp;Thread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。</p></blockquote><blockquote><p><strong>11. 如何确保main()方法所在的线程是Java程序最后结束的线程？</strong></p><p>&emsp;&emsp;可以使用Thread类的join()方法来确保所有程序创建的线程在main()方法退出前结束。</p></blockquote><blockquote><p><strong>12. 为什么你应该在循环中检查等待条件?</strong></p><p>&emsp;&emsp;处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。</p></blockquote><blockquote><p><strong>13. 什么是ThreadLocal变量？</strong></p><p>&emsp;&emsp;ThreadLocal是Java里一种特殊的变量。每个线程都有一个ThreadLocal就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用ThreadLocal让SimpleDateFormat变成线程安全的，因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。</p></blockquote><blockquote><p><strong>14. 在java中守护线程和本地线程区别？</strong></p><p>&emsp;&emsp;java中的线程分为两种：守护线程（Daemon）和用户线程（User）。</p><p>任何线程都可以设置为守护线程和用户线程，两者的区别：</p><p>&emsp;&emsp;唯一的区别是判断虚拟机(JVM)何时离开，Daemon是为其他线程提供服务，如果全部的User Thread已经撤离，Daemon 没有可服务的线程，JVM撤离。也可以理解为守护线程是JVM自动创建的线程（但不一定），用户线程是程序创建的线程；比如JVM的垃圾回收线程是一个守护线程，当所有线程已经撤离，不再产生垃圾，守护线程自然就没事可干了，当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开。只要有任何非守护线程还在运行，程序就不会终止。必须在线程启动之前调用setDaemon()方法，才能把它设置为守护线程。 注意： 后台进程在不执行finally子句的情况下就会终止其run()方法。比如：JVM的垃圾回收线程就是Daemon线程，Finalizer也是守护线程。</p><p>扩展：</p><p>&emsp;&emsp;Thread Dump打印出来的线程信息，含有daemon字样的线程即为守护进程，可能会有：服务守护进程、编译守护进程、windows下的监听Ctrl+break的守护进程、Finalizer守护进程、引用处理守护进程、GC守护进程。</p></blockquote><blockquote><p><strong>15. Java中interrupted 和 isInterrupted方法的区别？</strong></p><p>&emsp;&emsp;interrupt方法用于中断线程。调用该方法的线程的状态为将被置为”中断”状态。 注意：线程中断仅仅是置线程的中断状态位，不会停止线程。需要用户自己去监视线程的状态为并做处理。支持线程中断的方法（也就是线程中断后会抛出interruptedException的方法）就是在监视线程的中断状态，一旦线程的中断状态被置为“中断状态”，就会抛出中断异常。</p><p>&emsp;&emsp;interrupted 查询当前线程的中断状态，并且清除原状态。如果一个线程被中断了，第一次调用interrupted则返回true，第二次和后面的就返回false了。</p><p>&emsp;&emsp;isInterrupted 仅仅是查询当前线程的中断状态</p></blockquote><blockquote><p><strong>16. 什么是Callable和Future?</strong></p><p>&emsp;&emsp;Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。可以认为是带有回调的Runnable。</p><p>&emsp;&emsp;Future接口表示异步任务，是还没有完成的任务给出的未来结果。所以说Callable用于产生结果，Future用于获取结果。</p></blockquote><blockquote><p><strong>17. java中有几种方法可以实现一个线程？</strong></p><p>&emsp;&emsp;•    继承 Thread 类</p><p>&emsp;&emsp;•    实现 Runnable 接口</p><p>&emsp;&emsp;•    实现 Callable 接口 + FutureTask，需要实现的是 call() 方法</p><p>&emsp;&emsp;•    线程池</p></blockquote><blockquote><p><strong>18. 为什么在Java中不推荐使用线程组？</strong></p><p>&emsp;&emsp;在<strong>未捕获异常的处理器</strong>章节有提到现在不推荐使用线程组，因为有更好的<strong>线程池</strong>，线程组自己不是线程安全的，且其stop等方法会造成死锁等安全问题。前者是为了方便线程的管理，后者是为了管理线程的生命周期，复用线程，减少创建销毁线程的开销。</p><p>&emsp;&emsp;创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从JDK1.5开始，Java API提供了Executor框架让你可以创建不同的线程池。</p></blockquote><blockquote><p><strong>19. 如何停止一个正在运行的线程？</strong></p><p>&emsp;&emsp;•    使用共享变量的方式，在这种方式中，之所以引入共享变量，是因为该变量可以被多个执行相同任务的线程用来作为是否中断的信号，通知中断线程的执行。</p><p>&emsp;&emsp;•    使用interrupt方法终止线程，如果一个线程由于等待某些事件的发生而被阻塞，又该怎样停止该线程呢？这种情况经常会发生，比如当一个线程由于需要等候键盘输入而被阻塞，或者调用Thread.join()方法，或者Thread.sleep()方法，在网络中调用ServerSocket.accept()方法，或者调用了DatagramSocket.receive()方法时，都有可能导致线程阻塞，使线程处于处于不可运行状态时，即使主程序中将该线程的共享变量设置为true，但该线程此时根本无法检查循环标志，当然也就无法立即中断。这里我们给出的建议是，不要使用stop()方法，而是使用Thread提供的interrupt()方法，因为该方法虽然不会中断一个正在运行的线程，但是它可以使一个被阻塞的线程抛出一个中断异常，从而使线程提前结束阻塞状态，退出堵塞代码。</p></blockquote><blockquote><p><strong>20. 什么是Executors框架？</strong></p><p>&emsp;&emsp;Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。</p><p><strong>21. 为什么要使用Executor线程池框架 ？</strong></p><ol><li>每次执行任务创建线程 new Thread()比较消耗性能，创建一个线程是比较耗时、耗资源的。 </li><li>调用 new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制的创建，线程之间的相互竞争会导致过多占用系统资源而导致系统瘫痪，还有线程之间的频繁交替也会消耗很多系统资源。 </li><li>直接使用new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、定时定期执行、线程中断等都不便实现。</li></ol><p><strong>22. 使用Executor线程池框架的优点？</strong></p><ol><li>能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。 </li><li>可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。 </li><li>框架中已经有定时、定期、单线程、并发数控制等功能。 </li></ol><p>&emsp;&emsp;Executors 工具类的不同方法按照我们的需求创建了不同的线程池，来满足业务的需求。</p><p>&emsp;&emsp;Executor 接口对象能执行我们的线程任务。</p><p>&emsp;&emsp;ExecutorService接口继承了Executor接口并进行了扩展，提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值。</p><p>&emsp;&emsp;使用ThreadPoolExecutor 可以创建自定义线程池。</p><p>&emsp;&emsp;Future 表示异步计算的结果，他提供了检查计算是否完成的方法，以等待计算的完成，并可以使用get()方法获取计算的结果。</p><p>&emsp;&emsp; 综上所述使用线程池框架Executor能更好的管理线程、提供系统资源使用率。</p></blockquote><blockquote><p><strong>23. Java中用到的线程调度算法是什么？</strong></p><p>&emsp;&emsp;采用时间片轮转的方式。可以设置线程的优先级，会映射到下层的系统上面的优先级上，如非特别需要，尽量不要用，防止线程饥饿。</p><p>&emsp;&emsp;计算机通常只有一个CPU,在任意时刻只能执行一条机器指令,每个线程只有获得CPU的使用权才能执行指令.所谓多线程的并发运行,其实是指从宏观上看,各个线程轮流获得CPU的使用权,分别执行各自的任务.在运行池中,会有多个处于就绪状态的线程在等待CPU,JAVA虚拟机的一项任务就是负责线程的调度,线程调度是指按照特定机制为多个线程分配CPU的使用权.</p><p>&emsp;&emsp;有两种调度模型：分时调度模型和抢占式调度模型。</p><p>&emsp;&emsp;分时调度模型是指让所有的线程轮流获得cpu的使用权,并且平均分配每个线程占用的CPU的时间片这个也比较好理解。</p><p>&emsp;&emsp;java虚拟机采用抢占式调度模型，是指优先让可运行池中优先级高的线程占用CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用CPU。处于运行状态的线程会一直运行，直至它不得不放弃CPU。</p></blockquote><blockquote><p><strong>24. 什么是FutureTask?使用ExecutorService启动任务。</strong></p><p>&emsp;&emsp;在Java并发程序中FutureTask表示一个可以取消的异步运算。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才能取回，如果运算尚未完成get方法将会阻塞。一个FutureTask对象可以对调用了Callable和Runnable的对象进行包装，由于FutureTask也是调用了Runnable接口所以它可以提交给Executor来执行。</p></blockquote><blockquote><p><strong>25. 什么是并发容器的实现？</strong></p><p>&emsp;&emsp;何为同步容器：可以简单地理解为通过synchronized来实现同步的容器，如果有多个线程调用同步容器的方法，它们将会串行执行。比如Vector，Hashtable，以及Collections.synchronizedSet，synchronizedList等方法返回的容器。</p><p>&emsp;&emsp;可以通过查看Vector，Hashtable等这些同步容器的实现代码，可以看到这些容器实现线程安全的方式就是将它们的状态封装起来，并在需要同步的方法上加上关键字synchronized。</p><p>&emsp;&emsp;并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性，例如在ConcurrentHashMap中采用了一种粒度更细的加锁机制，可以称为分段锁，在这种锁机制下，允许任意数量的读线程并发地访问map，并且执行读操作的线程和写操作的线程也可以并发的访问map，同时允许一定数量的写操作线程并发地修改map，所以它可以在并发环境下实现更高的吞吐量。</p></blockquote><blockquote><p><strong>26. 多线程同步和互斥有几种实现方法，都是什么？</strong></p><p>&emsp;&emsp;线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。</p><p>&emsp;&emsp;线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步。</p><p>&emsp;&emsp;线程间的同步方法大体可分为两类：用户模式和内核模式。顾名思义，内核模式就是指利用系统内核对象的单一性来进行同步，使用时需要切换内核态与用户态，而用户模式就是不需要切换到内核态，只在用户态完成操作。<br>用户模式下的方法有：原子操作（例如一个单一的全局变量），临界区。内核模式下的方法有：事件，信号量，互斥量。</p></blockquote><blockquote><p><strong>27. 为什么代码会重排序？</strong></p><p>&emsp;&emsp;在执行程序时，为了提供性能，处理器和编译器常常会对指令进行重排序，但是不能随意重排序，不是你想怎么排序就怎么排序，它需要满足以下两个条件：</p><p>&emsp;&emsp;在单线程环境下不能改变程序运行的结果；</p><p>&emsp;&emsp;存在数据依赖关系的不允许重排序</p><p>&emsp;&emsp;需要注意的是：重排序不会影响单线程环境的执行结果，但是会破坏多线程的执行语义。</p></blockquote><blockquote><p><strong>28. 同步方法和同步块，哪个是更好的选择？</strong></p><p>&emsp;&emsp;同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</p><p>&emsp;&emsp;同步块更要符合开放调用的原则，只在需要锁住的代码块锁住相应的对象，这样从侧面来说也可以避免死锁。</p></blockquote><blockquote><p><strong>29. 什么是Java Timer 类？如何创建一个有特定时间间隔的任务？</strong></p><p>&emsp;&emsp;java.util.Timer是一个工具类，可以用于安排一个线程在未来的某个特定时间执行。Timer类可以用安排一次性任务或者周期任务。</p><p>&emsp;&emsp;java.util.TimerTask是一个实现了Runnable接口的抽象类，我们需要去继承这个类来创建我们自己的定时任务并使用Timer去安排它的执行。</p><p>&emsp;&emsp;目前有开源的Qurtz可以用来创建定时任务。</p></blockquote><blockquote><p><strong>30. 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</strong></p><p>&emsp;&emsp;当你调用start()方法时你将创建新的线程，并且执行在run()方法里的代码。 </p><p>&emsp;&emsp;但是如果你直接调用run()方法，它不会创建新的线程也不会执行调用线程的代码，只会把run方法当作普通方法去执行。</p></blockquote><blockquote><p><strong>31. 如何确保线程安全？</strong></p><p>&emsp;&emsp;在Java中可以有很多方法来保证线程安全——同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile关键字，使用不变类和线程安全类。</p></blockquote><blockquote><p><strong>32. 怎么检测一个线程是否拥有锁？</strong></p><p>&emsp;&emsp;在java.lang.Thread中有一个方法叫holdsLock()，它返回true如果当且仅当当前线程拥有某个具体对象的锁。</p></blockquote><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/58117761" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/58117761</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/58265081" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/58265081</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的线程QA
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>并发和同步</title>
    <link href="http://linyishui.top/2019051401.html"/>
    <id>http://linyishui.top/2019051401.html</id>
    <published>2019-05-14T02:21:23.000Z</published>
    <updated>2019-05-22T03:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="并发编程的三个问题"><a href="#并发编程的三个问题" class="headerlink" title="并发编程的三个问题"></a><strong>并发编程的三个问题</strong></h2><ul><li>原子性</li><li>可见性</li><li>有序性</li></ul><p>&emsp;&emsp;原子性：即一个或多个操作，要么全部执行，要么全不执行。保证一系列操作的原子性，要么加锁，要么通过CAS即实现乐观锁的方法，在修改时比较此时数据是否和之前读的时候一致。</p><p>&emsp;&emsp;可见性：多个线程访问同一个变量时，一个线程修改了此变量，其他线程也能立即看到最新的值。</p><p>&emsp;&emsp;有序性：即程序执行的顺序按代码的先后顺序，JVM执行代码时可能会因为指令重排序导致执行顺序和代码顺序不一致，但JVM会保证最终结果一致，JVM会让指令依赖的上一条指令先执行，而不会在上条执行前执行依赖于其的指令。但多线程时可能会有问题，某一指令并不依赖于任何指令，但其执行顺序如果和编程者所安排的不一致，可能会导致逻辑错误，在不该执行的时候执行，不该终止的时候终止。</p><hr><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a><strong>同步</strong></h1><p>&emsp;&emsp;在实际应用场景中，多个线程往往需要共享同一数据的存取，当多个线程都有对数据进行修改就会导致数据异常，这种情况叫<strong>竞争条件</strong>(race condition)。</p><p><em>以下测试代码来自corejava源代码</em></p><p>&emsp;&emsp;实现一个银行类来存储账户集合，并通过多线程不断进行存取金额，若运行正确，总金额应该一直保持不变。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bank</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> final <span class="keyword">double</span>[] accounts;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Bank</span>(<span class="params"><span class="keyword">int</span> n, <span class="keyword">double</span> initialBalance</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">      Arrays.fill(accounts, initialBalance);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">from</span>, <span class="keyword">int</span> to, <span class="keyword">double</span> amount</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (accounts[<span class="keyword">from</span>] &lt; amount) <span class="keyword">return</span>;</span><br><span class="line">      System.<span class="keyword">out</span>.print(Thread.currentThread());</span><br><span class="line">      accounts[<span class="keyword">from</span>] -= amount;</span><br><span class="line">      System.<span class="keyword">out</span>.printf(<span class="string">" %10.2f from %d to %d"</span>, amount, <span class="keyword">from</span>, to);</span><br><span class="line">      accounts[to] += amount;</span><br><span class="line">      System.<span class="keyword">out</span>.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> a : accounts)</span><br><span class="line">         sum += a;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accounts.length;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnsynchBankTest</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> NACCOUNTS = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">double</span> INITIAL_BALANCE = <span class="number">1000</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">double</span> MAX_AMOUNT = <span class="number">1000</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> DELAY = <span class="number">10</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Bank bank = <span class="keyword">new</span> Bank(NACCOUNTS, INITIAL_BALANCE);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NACCOUNTS; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">int</span> fromAccount = i;</span><br><span class="line">         Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                  <span class="keyword">int</span> toAccount = (<span class="keyword">int</span>) (bank.size() * Math.random());</span><br><span class="line">                  <span class="keyword">double</span> amount = MAX_AMOUNT * Math.random();</span><br><span class="line">                  bank.transfer(fromAccount, toAccount, amount);</span><br><span class="line">                  Thread.sleep((<span class="keyword">int</span>) (DELAY * Math.random()));</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;            </span><br><span class="line">         &#125;;</span><br><span class="line">         Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">         t.start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行结果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-23,5,main]</span>     148<span class="selector-class">.04</span> <span class="selector-tag">from</span> 23 <span class="selector-tag">to</span> 78 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:  100000<span class="selector-class">.00</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-50,5,main]</span>     584<span class="selector-class">.19</span> <span class="selector-tag">from</span> 50 <span class="selector-tag">to</span> 22 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:  100000<span class="selector-class">.00</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-84,5,main]</span>     250<span class="selector-class">.77</span> <span class="selector-tag">from</span> 84 <span class="selector-tag">to</span> 12 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:  100000<span class="selector-class">.00</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-59,5,main]</span>     664<span class="selector-class">.33</span> <span class="selector-tag">from</span> 59 <span class="selector-tag">to</span> 32<span class="selector-tag">Thread</span><span class="selector-attr">[Thread-2,5,main]</span>     723<span class="selector-class">.99</span> <span class="selector-tag">from</span> 2 <span class="selector-tag">to</span> 4 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:   99335<span class="selector-class">.67</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-27,5,main]</span>     606<span class="selector-class">.12</span> <span class="selector-tag">from</span> 27 <span class="selector-tag">to</span> 25 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:   99335<span class="selector-class">.67</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[Thread-5,5,main]</span>     647<span class="selector-class">.61</span> <span class="selector-tag">from</span> 5 <span class="selector-tag">to</span> 76 <span class="selector-tag">Total</span> <span class="selector-tag">Balance</span>:   99335<span class="selector-class">.67</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为何总金额会有异常状态呢？</p><p>&emsp;&emsp;回顾上面所谈到的概念：并发特性。</p><p>&emsp;&emsp;测试例子中对于账户的更新操作是：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accounts<span class="string">[from]</span> -= amount;</span><br><span class="line">accounts<span class="string">[to]</span> += amount;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此指令并非一个原子操作，可以被分解为：1.将accounts[to]加载到寄存器。2.增加amount。3.将结果写回accounts[to]。</p><p>&emsp;&emsp;假设有线程1和2同时执行此指令，线程1执行步骤1和2，然后被剥离运行状态，线程2被唤醒并执行了这一系列指令，然后切换线程1执行完步骤3。所以线程1返回的结果会覆盖掉线程2的操作，导致最终金额不匹配</p><p>&emsp;&emsp;为了避免这种情况，保证线程安全，需要满足并发特性，所以就有了<a href="../2019032902.html" title="Title">锁机制</a>。</p>]]></content>
    
    <summary type="html">
    
      介绍Java中的并发和同步
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Thread类源码剖析</title>
    <link href="http://linyishui.top/2019051301.html"/>
    <id>http://linyishui.top/2019051301.html</id>
    <published>2019-05-13T10:18:15.000Z</published>
    <updated>2019-05-22T03:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类体"><a href="#类体" class="headerlink" title="类体"></a><strong>类体</strong></h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">//实现Runnable接口</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="属性和静态域"><a href="#属性和静态域" class="headerlink" title="属性和静态域"></a><strong>属性和静态域</strong></h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;<span class="comment">//私有静态native方法，实现方法命名的解耦</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();<span class="comment">//静态块，确保创建对象前先调用registerNatives()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String name;<span class="comment">//线程名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>            priority;<span class="comment">//线程优先级</span></span><br><span class="line"><span class="keyword">private</span> Thread         threadQ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span>           eetop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>     single_step;<span class="comment">//是否单步执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>     daemon = <span class="keyword">false</span>;<span class="comment">//是否守护线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>     stillborn = <span class="keyword">false</span>;<span class="comment">//虚拟机状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Runnable <span class="keyword">target</span>;<span class="comment">//将会被执行的Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ThreadGroup group;<span class="comment">//线程所属的线程组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader contextClassLoader;<span class="comment">//线程对应的类加载器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccessControlContext inheritedAccessControlContext;<span class="comment">//线程继承的访问控制环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadInitNumber;<span class="comment">//自动给匿名线程编号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">nextThreadNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> threadInitNumber++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;<span class="comment">//线程对应的ThreadLocal值，此Map由ThreadLocal维护</span></span><br><span class="line"></span><br><span class="line">ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;<span class="comment">//线程对应的可继承ThreadLocal值，此Map由InheritableThreadLocal维护</span></span><br><span class="line"><span class="comment">//为子线程提供从父线程那里继承的值</span></span><br><span class="line"><span class="comment">//在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，以获得父线程所具有的值</span></span><br><span class="line"><span class="comment">//创建一个线程时如果保存了所有 InheritableThreadLocal 对象的值，那么这些值也将自动传递给子线程</span></span><br><span class="line"><span class="comment">//如果一个子线程调用 InheritableThreadLocal 的 get() ，那么它将与它的父线程看到同一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> stackSize;<span class="comment">//线程请求的堆栈大小，一些VM会无视</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> nativeParkEventPointer;<span class="comment">//在native线程终止后仍保持的JVM私有状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> tid;<span class="comment">//每个线程的唯一ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> threadSeqNumber;<span class="comment">//用来生成线程ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> threadStatus = <span class="number">0</span>;<span class="comment">//线程状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">long</span> <span class="title">nextThreadID</span><span class="params">()</span> </span>&#123;<span class="comment">//得到下个线程的ID</span></span><br><span class="line">    <span class="keyword">return</span> ++threadSeqNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> Object parkBlocker;<span class="comment">//中断阻塞器，当线程发生IO中断时，需要在线程中断状态后调用此对象的interrupt()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Interruptible blocker;<span class="comment">//阻塞器锁，用来处理阻塞情况</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object blockerLock = <span class="keyword">new</span> Object();<span class="comment">//阻断锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blockedOn</span><span class="params">(Interruptible b)</span> </span>&#123;<span class="comment">//通过java.nio的sun.misc.SharedSecrets调用，设置blocker</span></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        blocker = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;<span class="comment">//最小优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;<span class="comment">//默认优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;<span class="comment">//最大优先级</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StackTraceElement[] EMPTY_STACK_TRACE</span><br><span class="line">    = <span class="keyword">new</span> StackTraceElement[<span class="number">0</span>];<span class="comment">//空堆栈跟踪元素数组</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION =</span><br><span class="line">                <span class="keyword">new</span> RuntimePermission(<span class="string">"enableContextClassLoaderOverride"</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Thread</span>() &#123;<span class="comment">//默认构造器</span></span><br><span class="line">       init(<span class="built_in">null</span>, <span class="built_in">null</span>, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(Runnable target) &#123;</span><br><span class="line">       init(<span class="built_in">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">Thread</span>(Runnable target, AccessControlContext acc) &#123;</span><br><span class="line">       init(<span class="built_in">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>, acc, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(ThreadGroup <span class="keyword">group</span>, Runnable target) &#123;</span><br><span class="line">       init(<span class="keyword">group</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(<span class="built_in">String</span> name) &#123;</span><br><span class="line">       init(<span class="built_in">null</span>, <span class="built_in">null</span>, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(ThreadGroup <span class="keyword">group</span>, <span class="built_in">String</span> name) &#123;</span><br><span class="line">       init(<span class="keyword">group</span>, <span class="built_in">null</span>, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(Runnable target, <span class="built_in">String</span> name) &#123;</span><br><span class="line">       init(<span class="built_in">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(ThreadGroup <span class="keyword">group</span>, Runnable target, <span class="built_in">String</span> name) &#123;</span><br><span class="line">       init(<span class="keyword">group</span>, target, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Thread</span>(ThreadGroup <span class="keyword">group</span>, Runnable target, <span class="built_in">String</span> name,</span><br><span class="line">                 long stackSize) &#123;</span><br><span class="line">       init(<span class="keyword">group</span>, target, name, stackSize);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="native函数"><a href="#native函数" class="headerlink" title="native函数"></a><strong>native函数</strong></h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function">Thread <span class="title">currentThread</span><span class="params">()</span></span>;<span class="comment">//返回当前正在执行的线程对象的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;<span class="comment">//可以向调度程序提示当前程序可以让出对处理器的使用，调度器可以忽略此提示。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。cpu会从众多的可执行态里选择，也就是说，当前也就是刚刚的那个线程还是有可能会被再次执行到的，并不是说一定会执行其他线程而该线程在下一次中不会执行到了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;<span class="comment">//使当前线程休眠一定时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;<span class="comment">//native启动线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;<span class="comment">//判断是否有线程被中断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span></span>;<span class="comment">//判断此线程是否alive，只要已启动并且未死亡即存活。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">holdsLock</span><span class="params">(Object obj)</span></span>;<span class="comment">//仅当当前线程在指定的对象上持有monitor lock时返回true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> StackTraceElement[][] dumpThreads(Thread[] threads);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> Thread[] getThreads();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">setPriority0</span><span class="params">(<span class="keyword">int</span> newPriority)</span></span>;<span class="comment">//设置线程优先级</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">stop0</span><span class="params">(Object o)</span></span>;<span class="comment">//停止线程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">suspend0</span><span class="params">()</span></span>;<span class="comment">// 线程挂起(暂停)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">resume0</span><span class="params">()</span></span>;<span class="comment">//将一个挂起线程复活继续执行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">interrupt0</span><span class="params">()</span></span>;<span class="comment">//该线程的中断状态将被设置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">setNativeName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="function"><span class="keyword">int</span> <span class="title">countStackFrames</span><span class="params">()</span></span>;<span class="comment">//弃用</span></span><br></pre></td></tr></table></figure><hr><h1 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a><strong>普通函数</strong></h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a><strong>常用</strong></h2><h3 id="init"><a href="#init" class="headerlink" title="init()"></a><strong>init()</strong></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable <span class="keyword">target</span>, String name, <span class="keyword">long</span> stackSize)</span> </span>&#123;<span class="comment">//用AccessControlContext初始化一个线程</span></span><br><span class="line">    init(g, <span class="keyword">target</span>, name, stackSize, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程初始化.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> g 线程组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target Runnable接口目标对象提供run()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 线程名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stackSize 所需堆栈大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> acc AccessControlContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inheritThreadLocals 若为真则继承thread-locals的初始值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> init(ThreadGroup g, Runnable <span class="keyword">target</span>, String name,</span><br><span class="line">                  <span class="keyword">long</span> stackSize, AccessControlContext acc,</span><br><span class="line">                  <span class="keyword">boolean</span> inheritThreadLocals) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;<span class="comment">//线程name不允许为null</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    Thread parent = currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">    SecurityManager security = System.getSecurityManager();<span class="comment">//获取系统的安全管理器SecurityManager</span></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;<span class="comment">//若线程组为空</span></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;<span class="comment">//且SecurityManager不为空，则根据SecurityManager获取线程组</span></span><br><span class="line">            g = security.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;<span class="comment">//若SecurityManager也没取到线程组，则直接继承当前线程的线程组</span></span><br><span class="line">            g = parent.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.checkAccess();<span class="comment">//一定要检查访问权限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;<span class="comment">//SecurityManager不为空时，检查是否有必要的权限</span></span><br><span class="line">        <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.addUnstarted();<span class="comment">//增加线程组的未启动线程计数</span></span><br><span class="line">    <span class="comment">//未启动的线程不会添加到线程组中，以便在从不启动的情况下可以收集这些线程，但必须对它们进行计数，以便不会破坏其中包含未启动线程的守护进程线程组。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化成员属性</span></span><br><span class="line">    <span class="comment">//每个线程都有一个优先级，高优先级线程的执行优先于低优先级线程。</span></span><br><span class="line">    <span class="comment">//每个线程都可以或不可以标记为一个守护程序。</span></span><br><span class="line">    <span class="comment">//当某个线程中运行的代码创建一个新 Thread 对象时，该新线程的初始优先级被设定为创建线程的优先级，</span></span><br><span class="line">    <span class="comment">//并且当且仅当创建线程是守护线程时，新线程才是守护程序</span></span><br><span class="line">    <span class="keyword">this</span>.group = g;</span><br><span class="line">    <span class="keyword">this</span>.daemon = parent.isDaemon();</span><br><span class="line">    <span class="keyword">this</span>.priority = parent.getPriority();</span><br><span class="line">    <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">    <span class="keyword">this</span>.inheritedAccessControlContext =</span><br><span class="line">            acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">    setPriority(priority);</span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.inheritableThreadLocals =</span><br><span class="line">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line">    tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h3><p>&emsp;&emsp;在中断状态被置位时调用sleep()方法并不会使线程休眠，反而会清除此状态并抛出InterruptedException，若在如上循环中加入sleep()，则没有必要用isInterrupted()，因为不会检测中断状态。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程不会失去监视器的所有权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> sleep(<span class="keyword">long</span> <span class="built_in">millis</span>, <span class="built_in">int</span> nanos) <span class="keyword">throws</span> InterruptedException &#123;<span class="comment">//使当前线程休眠一定时间，millis为毫秒，nanos为纳秒</span></span><br><span class="line">    <span class="comment">//参数检查</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">millis</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//纳秒会按规则进到毫秒</span></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; <span class="built_in">millis</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">millis</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="built_in">millis</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最多等待给定毫秒，有可能线程死亡，当参数为0表示永远等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="built_in">join</span>(<span class="keyword">long</span> <span class="built_in">millis</span>)</span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">millis</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">millis</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;<span class="comment">//当给定0，且线程存活，则一直调用wait(0)一直等待</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;<span class="comment">//线程存活，等待给定时间，直到到底时间或线程死亡</span></span><br><span class="line">            <span class="keyword">long</span> delay = <span class="built_in">millis</span> - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使当前线程休眠一定时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="built_in">join</span>(<span class="keyword">long</span> <span class="built_in">millis</span>, <span class="built_in">int</span> nanos)</span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">millis</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; <span class="built_in">millis</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">millis</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">join</span>(<span class="built_in">millis</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前线程一直休眠，直到死亡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="built_in">join</span>() <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="built_in">join</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="start-和run"><a href="#start-和run" class="headerlink" title="start()和run()"></a><strong>start()和run()</strong></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;<span class="comment">//使线程进入可执行状态，告知线程管理器此线程已准备完毕，等待被调用run()</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)<span class="comment">//检查线程状态</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">    group.add(<span class="keyword">this</span>);<span class="comment">//告知线程组此线程准备启动，将线程加到线程组中</span></span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();<span class="comment">//预启动线程</span></span><br><span class="line">        started = <span class="keyword">true</span>;<span class="comment">//标识已启动</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;<span class="comment">//start0()执行失败</span></span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);<span class="comment">//线程组做相应处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//若线程由Runnable对象构造，则调用对应run()，否则什么都不做，继承Thread时应该重写此方法。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">target</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">target</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a><strong>Interrupt</strong></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中断线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 若此线程在调用&#123;Object.wait(),join(),sleep()&#125;方法时被阻塞，则其中断状态会被清除，并抛出异常InterruptedException.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 若线程在执行基于&#123;java.nio.channels.InterruptibleChannel&#125;上的IO操作时被阻塞，则此通道Channel会被关闭，设置线程的中断状态，线程会收到异常&#123;java.nio.channels.ClosedByInterruptException&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 若线程在选择器&#123;<span class="doctag">@link</span> java.nio.channels.Selector&#125;阻塞，则设置线程的中断状态，并立即从选择操作返回，可能会带有非零值，就像调用了&#123;java.nio.channels.Selector#wakeup wakeup&#125;方法一样。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 非以上情况，设置线程的中断状态，中断一个非alive线程没有任何效果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread())<span class="comment">//若线程不是在中断自己，则需要检查权限</span></span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        Interruptible b = blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">//只是设置中断标志</span></span><br><span class="line">            b.interrupt(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试当前线程(current thread)是否已中断</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 此方法会清除线程的中断状态，也就意味着若无间断的连续两次调用此方法，第二次调用就会返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试此线程(this thread)是否已中断，不改变线程的中断状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">false</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Thread <span class="keyword">implements</span> Runnable &#123;<span class="comment">//实现Runnable接口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> yield();<span class="comment">//不太常用，可以向调度程序提示当前程序可以让出对处理器的使用，调度器可以忽略此提示，用来改善多线程对CPU的过度使用。</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Object clone() <span class="keyword">throws</span> CloneNotSupportedException &#123;<span class="comment">//克隆出一个线程</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> exit() &#123;<span class="comment">//由系统调用，可以让线程在实际退出前可以有机会清理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">group</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">group</span>.threadTerminated(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">group</span> = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        target = <span class="keyword">null</span>;</span><br><span class="line">        threadLocals = <span class="keyword">null</span>;</span><br><span class="line">        inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line">        inheritedAccessControlContext = <span class="keyword">null</span>;</span><br><span class="line">        blocker = <span class="keyword">null</span>;</span><br><span class="line">        uncaughtExceptionHandler = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改此线程的优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> setPriority(<span class="keyword">int</span> newPriority) &#123;</span><br><span class="line">        ThreadGroup g;</span><br><span class="line">        checkAccess();<span class="comment">//检查权限</span></span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;<span class="comment">//正确性检查</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;<span class="comment">//能获取到线程组，newPriority也要根据线程组最大限制调整</span></span><br><span class="line">            <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">                newPriority = g.getMaxPriority();</span><br><span class="line">            &#125;</span><br><span class="line">            setPriority0(priority = newPriority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程的优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> getPriority() &#123;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  更改此线程的线程名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> setName(String name) &#123;</span><br><span class="line">        checkAccess();<span class="comment">//检查权限</span></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">            setNativeName(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程的线程名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程所属线程组，若线程已死亡，则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ThreadGroup getThreadGroup() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">group</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前线程的线程组和其子组中所有活动线程的估计数量，即递归迭代当前线程所属线程组所有子组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> activeCount() &#123;</span><br><span class="line">        <span class="keyword">return</span> currentThread().getThreadGroup().activeCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前线程所属线程组及其子组的所有活动线程复制到指定的数组中，如果数组长度不够，超过的会忽略，若一定要获取所有元素，请先检查线程数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> enumerate(Thread tarray[]) &#123;</span><br><span class="line">        <span class="keyword">return</span> currentThread().getThreadGroup().enumerate(tarray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印当前线程的堆栈跟踪到标准错误流中，仅用于调试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> dumpStack() &#123;</span><br><span class="line">        <span class="keyword">new</span> Exception(<span class="string">"Stack trace"</span>).printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明此线程为守护线程或用户线程，若运行的唯一一个线程为守护线程时，JVM会退出。此函数只能在线程声明启动前被调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> setDaemon(<span class="keyword">boolean</span> on) &#123;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        daemon = on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试此线程是否为守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isDaemon() &#123;</span><br><span class="line">        <span class="keyword">return</span> daemon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认当前正在运行的线程是否有修改此线程的权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> checkAccess() &#123;</span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;<span class="comment">//如果能取得系统安全管理器，则通过管理器检查此线程权限。</span></span><br><span class="line">            security.checkAccess(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程的字符串表示：线程名+优先级+线程组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">        ThreadGroup <span class="keyword">group</span> = getThreadGroup();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">group</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Thread["</span> + getName() + <span class="string">","</span> + getPriority() + <span class="string">","</span> +</span><br><span class="line">                           <span class="keyword">group</span>.getName() + <span class="string">"]"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Thread["</span> + getName() + <span class="string">","</span> + getPriority() + <span class="string">","</span> +</span><br><span class="line">                            <span class="string">""</span> + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程的ContextClassLoader，此加载器由线程创建者提供，以供加载类和资源时在此线程中运行的代码使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @CallerSensitive</span><br><span class="line">    <span class="keyword">public</span> ClassLoader getContextClassLoader() &#123;</span><br><span class="line">        <span class="keyword">if</span> (contextClassLoader == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;<span class="comment">//检查权限</span></span><br><span class="line">            ClassLoader.checkClassLoaderPermission(contextClassLoader,</span><br><span class="line">                                                   Reflection.getCallerClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contextClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置此线程的ContextClassLoader，创建线程时可以设置其ContextClassLoader，允许创建者通过getContextClassLoader获取合适的类加载器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setContextClassLoader(ClassLoader cl) &#123;</span><br><span class="line">        SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">"setContextClassLoader"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        contextClassLoader = cl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程堆栈转储的堆栈跟踪元素数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> StackTraceElement[] getStackTrace() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">            <span class="comment">// check for getStackTrace permission</span></span><br><span class="line">            SecurityManager security = System.getSecurityManager();</span><br><span class="line">            <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">                security.checkPermission(</span><br><span class="line">                    SecurityConstants.GET_STACK_TRACE_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// optimization so we do not call into the vm for threads that</span></span><br><span class="line">            <span class="comment">// have not yet started or have terminated</span></span><br><span class="line">            <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> EMPTY_STACK_TRACE;</span><br><span class="line">            &#125;</span><br><span class="line">            StackTraceElement[][] stackTraceArray = dumpThreads(<span class="keyword">new</span> Thread[] &#123;<span class="keyword">this</span>&#125;);</span><br><span class="line">            StackTraceElement[] stackTrace = stackTraceArray[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// a thread that was alive during the previous isAlive call may have</span></span><br><span class="line">            <span class="comment">// since terminated, therefore not having a stacktrace.</span></span><br><span class="line">            <span class="keyword">if</span> (stackTrace == <span class="keyword">null</span>) &#123;</span><br><span class="line">                stackTrace = EMPTY_STACK_TRACE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stackTrace;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Don't need JVM help for current thread</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> Exception()).getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回所有活动线程的堆栈跟踪元素映射，键为线程，值为StackTraceElement元素，其表示对应线程的堆栈转储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Thread, StackTraceElement[]&gt; getAllStackTraces() &#123;</span><br><span class="line">        <span class="comment">// check for getStackTrace permission</span></span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            security.checkPermission(</span><br><span class="line">                SecurityConstants.GET_STACK_TRACE_PERMISSION);</span><br><span class="line">            security.checkPermission(</span><br><span class="line">                SecurityConstants.MODIFY_THREADGROUP_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get a snapshot of the list of all threads</span></span><br><span class="line">        Thread[] threads = getThreads();</span><br><span class="line">        StackTraceElement[][] traces = dumpThreads(threads);</span><br><span class="line">        Map&lt;Thread, StackTraceElement[]&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;(threads.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            StackTraceElement[] stackTrace = traces[i];</span><br><span class="line">            <span class="keyword">if</span> (stackTrace != <span class="keyword">null</span>) &#123;</span><br><span class="line">                m.put(threads[i], stackTrace);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else terminated so we don't put it in the map</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** cache of subclass security audit results */</span></span><br><span class="line">    <span class="comment">/* Replace with ConcurrentReferenceHashMap when/if it appears in a future</span></span><br><span class="line"><span class="comment">     * release */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Caches &#123;</span><br><span class="line">        <span class="comment">/** cache of subclass security audit results */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;WeakClassKey,<span class="keyword">Boolean</span>&gt; subclassAudits =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** queue for WeakReferences to audited subclasses */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;<span class="keyword">Class</span>&lt;?&gt;&gt; subclassAuditsQueue =</span><br><span class="line">            <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证是否可以在不违反安全约束的情况下构造此实例，子类不允许重写安全敏感的非final方法，否则会检查EnableContextClassLoaderOverride运行时权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isCCLOverridden(<span class="keyword">Class</span>&lt;?&gt; cl) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cl == Thread.<span class="keyword">class</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        processQueue(Caches.subclassAuditsQueue, Caches.subclassAudits);</span><br><span class="line">        WeakClassKey key = <span class="keyword">new</span> WeakClassKey(cl, Caches.subclassAuditsQueue);</span><br><span class="line">        <span class="keyword">Boolean</span> result = Caches.subclassAudits.get(key);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">Boolean</span>.valueOf(auditSubclass(cl));</span><br><span class="line">            Caches.subclassAudits.putIfAbsent(key, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定子类的反射，验证其是否重写了安全敏感的非final方法，若重写返回true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> auditSubclass(<span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt; subcl) &#123;</span><br><span class="line">        <span class="keyword">Boolean</span> result = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Boolean</span>&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">Boolean</span> run() &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">Class</span>&lt;?&gt; cl = subcl;</span><br><span class="line">                         cl != Thread.<span class="keyword">class</span>;</span><br><span class="line">                         cl = cl.getSuperclass())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            cl.getDeclaredMethod(<span class="string">"getContextClassLoader"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">Boolean</span>.<span class="keyword">TRUE</span>;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">Class</span>&lt;?&gt;[] params = &#123;ClassLoader.<span class="keyword">class</span>&#125;;</span><br><span class="line">                            cl.getDeclaredMethod(<span class="string">"setContextClassLoader"</span>, params);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">Boolean</span>.<span class="keyword">TRUE</span>;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> result.booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回线程的ID，线程ID是一个唯一且为正的整型，在线程的生命周期里不能被修改，但线程死亡后可以复用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> getId() &#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程状态，这些状态是JVM状态而不对应任何操作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 包括：</span></span><br><span class="line"><span class="comment">     *     &#123;@link #NEW&#125; 尚未启动的线程</span></span><br><span class="line"><span class="comment">     *     &#123;@link #RUNNABLE&#125; 在JVM中执行的线程处于此状态</span></span><br><span class="line"><span class="comment">     *     &#123;@link #BLOCKED&#125; 等待监视器锁被阻塞的线程处于此状态</span></span><br><span class="line"><span class="comment">     *     &#123;@link #WAITING&#125; 无限的等待另一个线程执行特定操作的线程处于此状态</span></span><br><span class="line"><span class="comment">     *     &#123;@link #TIMED_WAITING&#125; 在指定的等待时间内等待另一个线程执行操作的线程处于此状态</span></span><br><span class="line"><span class="comment">     *     &#123;@link #TERMINATED&#125; 已退出的线程处于此状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> enum State &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">NEW</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">         * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">         * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">         * such as processor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">         * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">         * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">         * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">         * &#123;@link Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">         * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">         * following methods:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">         * perform a particular action.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">         * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">         * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;@link LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">         * The thread has completed execution.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此线程的状态，此方法用来监视线程的系统状态，而不是用来作同步控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> State getState() &#123;</span><br><span class="line">        <span class="comment">// get current thread state</span></span><br><span class="line">        <span class="keyword">return</span> sun.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略了一些异常处理器函数等</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> stop() &#123;<span class="comment">//已弃用，因为不安全</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> destroy() &#123;<span class="comment">//已弃用</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> suspend() &#123;<span class="comment">//已弃用</span></span><br><span class="line">        checkAccess();</span><br><span class="line">        suspend0();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> resume() &#123;<span class="comment">//已弃用</span></span><br><span class="line">        checkAccess();</span><br><span class="line">        resume0();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java中Thread类的源码剖析
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>日志</title>
    <link href="http://linyishui.top/2019050901.html"/>
    <id>http://linyishui.top/2019050901.html</id>
    <published>2019-05-09T03:37:30.000Z</published>
    <updated>2019-05-17T10:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="日志" scheme="http://linyishui.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="diary" scheme="http://linyishui.top/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域和内存溢出异常</title>
    <link href="http://linyishui.top/2019050801.html"/>
    <id>http://linyishui.top/2019050801.html</id>
    <published>2019-05-08T11:02:04.000Z</published>
    <updated>2019-05-23T08:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、运行时数据区域"><a href="#一、运行时数据区域" class="headerlink" title="一、运行时数据区域"></a><strong>一、运行时数据区域</strong></h1><h2 id="1-程序计数器（Program-Counter-Register）"><a href="#1-程序计数器（Program-Counter-Register）" class="headerlink" title="1. 程序计数器（Program Counter Register）"></a><strong>1. 程序计数器（Program Counter Register）</strong></h2><p>&emsp;&emsp;程序计数器就是当前线程所执行字节码的<strong>行号指示器</strong>，字节码解释器通过改变计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖程序计数器。</p><p>&emsp;&emsp;为了支持多线程间上下文切换，在线程恢复时能恢复到执行位置，每个线程都会有独立的程序计数器，所以程序计数器是<strong>线程私有</strong>内存。</p><h2 id="2-虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#2-虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="2. 虚拟机栈（Java Virtual Machine Stacks）"></a><strong>2. 虚拟机栈（Java Virtual Machine Stacks）</strong></h2><p>&emsp;&emsp;虚拟机栈描述Java方法执行的内存模型：每个方法在执行时会创建一个<strong>栈帧</strong>，用来存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>&emsp;&emsp;虚拟机栈是<strong>线程私有</strong>内存。</p><p>&emsp;&emsp;<strong>局部变量表</strong>用来存放编译阶段可知的各种<strong>基本数据类型</strong>，<strong>对象引用类型</strong>，和<strong>returnAdress类型</strong>。</p><p>&emsp;&emsp;虚拟机规范规定此内存区域的两种异常：</p><ol><li>StackOverflowError 线程请求的栈深度超过虚拟机所允许的深度。</li><li>OutOfMemoryError 虚拟机动态扩展时无法申请到足够的内存。</li></ol><h2 id="3-本地方法栈（Native-Method-Stack）"><a href="#3-本地方法栈（Native-Method-Stack）" class="headerlink" title="3. 本地方法栈（Native Method Stack）"></a><strong>3. 本地方法栈（Native Method Stack）</strong></h2><p>&emsp;&emsp;本地方法栈类似于虚拟机栈，区别是虚拟机栈为虚拟机执行Java方法(字节码)服务，本地方法栈则为Native方法服务，甚至二者可以合并为一个方法栈。</p><h2 id="4-Java堆（Java-Heap）"><a href="#4-Java堆（Java-Heap）" class="headerlink" title="4. Java堆（Java Heap）"></a><strong>4. Java堆（Java Heap）</strong></h2><p>&emsp;&emsp;Java堆是一块<strong>线程共享</strong>的内存区域，堆就是用来存放所有的对象实例，所以<strong>所有的对象实例和数组都要在堆上分配</strong>（不绝对）。</p><p>&emsp;&emsp;垃圾回收管理主要发生在Java堆，所以也叫GC堆。内存回收的收集器采用的是分代收集算法：可以把GC堆分为<strong>新生代</strong>和<strong>老年代</strong>，更细分的话可以分为<strong>Eden空间</strong>、<strong>From Survivor空间</strong>、<strong>To Survivor空间</strong>等。从内存分配的角度看，Java堆可以分出一些线程私有的<strong>分配缓冲区</strong>。无论怎样划分，堆存储的都是对象实例。</p><h2 id="5-方法区（Method-Area）"><a href="#5-方法区（Method-Area）" class="headerlink" title="5. 方法区（Method Area）"></a><strong>5. 方法区（Method Area）</strong></h2><p>&emsp;&emsp;方法区是<strong>线程共享</strong>的内存区域，用来存储被VM加载的类信息、常量、静态常量、即时编译器编译后的代码等数据。方法区实际上可以看作堆的一个逻辑部分，但它的别名叫非堆(Non-Heap)，应该是为了和堆区域区分一下。方法区有时被叫做<strong>永久代</strong>，原因就是HotSpot的垃圾收集分代把方法区也纳入范围，GC收集器可以像管理Java堆一样管理方法区这块内存区域，而不用再为方法区再编写内存管理代码，但永久代的设计更容易遇到内存溢出的问题，所以在1.7之后的版本就把字符串常量池移到了堆中。</p><h2 id="6-运行时常量池（Runtime-Constant-Pool）"><a href="#6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="6. 运行时常量池（Runtime Constant Pool）"></a><strong>6. 运行时常量池（Runtime Constant Pool）</strong></h2><p>&emsp;&emsp;运行时常量池是方法区的一部分，</p><p>&emsp;&emsp;Class文件除了包含类的版本、字段、方法、接口等描述信息外，还有一项就是常量池（Constant Pool Table），用来存放编译期生成的各种字面量和符号引用，常量池表的数据在类加载后会进入运行时常量池存放。除了符号引用外，一般也会把翻译出来的直接引用存储在运行时常量池中。</p><p>&emsp;&emsp;除了编译时获取的常量外，运行时也可以将新生成的常量放入运行时常量池，比较常用的就是String.intern()</p><h2 id="7-直接内存（Direct-Memory）"><a href="#7-直接内存（Direct-Memory）" class="headerlink" title="7. 直接内存（Direct Memory）"></a><strong>7. 直接内存（Direct Memory）</strong></h2><p>&emsp;&emsp;直接内存并不是虚拟机规范中定义的内存区域，但这部分内存会被频繁使用，如NIO类引入了一种基于Channel通道于Buffer缓冲区的新I/O方式，其使用Native函数库直接分配堆外内存区域，然后再通过存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样就避免了一直在Java堆和Native堆中来回复制数据，从而提高了性能。</p><p>&emsp;&emsp;因为不属于虚拟机定义的内存区域，所以直接内存只受计算机本身内存大小和处理器寻址空间的限制，配置服务器虚拟机参数时需要考虑到这一部分区域，否则可能会在动态扩展时导致内存溢出。</p><blockquote><p>更多可以参考：<a href="../2019032501.html" title="Title">IO和NIO</a></p></blockquote><hr><h1 id="二、虚拟机中对象生命过程"><a href="#二、虚拟机中对象生命过程" class="headerlink" title="二、虚拟机中对象生命过程"></a><strong>二、虚拟机中对象生命过程</strong></h1><h2 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1. 对象的创建"></a><strong>1. 对象的创建</strong></h2><p>&emsp;&emsp;在Java语言中，表面上看就是通过new关键字创建一个对象，在虚拟机中经历了一个怎样的过程？</p><h3 id="1-虚拟机在执行到new指令时，首先要检查此指令的参数能否在常量池定位到一个类的符号引用，同时检查这个符号引用所代表的类是否已经被加载、解析和初始化过。"><a href="#1-虚拟机在执行到new指令时，首先要检查此指令的参数能否在常量池定位到一个类的符号引用，同时检查这个符号引用所代表的类是否已经被加载、解析和初始化过。" class="headerlink" title="1. 虚拟机在执行到new指令时，首先要检查此指令的参数能否在常量池定位到一个类的符号引用，同时检查这个符号引用所代表的类是否已经被加载、解析和初始化过。"></a><strong>1. 虚拟机在执行到new指令时，首先要</strong>检查<strong>此指令的参数能否在常量池定位到一个类的符号引用，同时检查这个符号引用所代表的类是否已经被加载、解析和初始化过。</strong></h3><p>&emsp;&emsp;&emsp;&emsp;如果没有，则执行类的加载过程，详细请看博客<a href="../2019050801.html" title="Title">类的加载机制</a>。</p><h3 id="2-在类加载检查通过后，虚拟机会为新生的对象分配内存，在类加载后就可以确认所需内存大小。"><a href="#2-在类加载检查通过后，虚拟机会为新生的对象分配内存，在类加载后就可以确认所需内存大小。" class="headerlink" title="2. 在类加载检查通过后，虚拟机会为新生的对象分配内存，在类加载后就可以确认所需内存大小。"></a><strong>2. 在类加载检查通过后，虚拟机会为新生的对象</strong>分配内存<strong>，在类加载后就可以确认所需内存大小。</strong></h3><blockquote><p>&emsp;假设Java堆中的内存是规整的，分配内存就是将指针在空闲区域挪动对象大小的距离，这类分配方式叫<strong>指针碰撞</strong>。</p><p>&emsp;如果Java堆中内存并不规整，虚拟机就需要维护一个列表来记录可用的内存块，在分配时查询此表，找到足够大的空闲空间放置对象，并更新表内数据，这类分配方式叫<strong>空闲列表</strong>。</p><p>&emsp;Java堆是否规整由垃圾收集器是否由压缩整理功能决定，在使用Serial、ParNew等带Compact过程的收集器时使用<strong>指针碰撞</strong>，而使用CMS这类基于Mark-Sweep算法的收集器时，采用<strong>空闲列表</strong>。</p></blockquote><blockquote><p><strong>在划分空间时需要考虑线程安全问题：</strong></p><p>&emsp;比如给对象A分配内存，但指针还未来得及修改，此时对象B同时使用了指针来分配内存。</p><p>&emsp;解决方案一般如下：</p><ol><li>对分配内存空间的动作进行同步处理，虚拟机采用CAS+失败重试的方式来保证操作的原子性。</li><li>把内存分配的动作按照线程划分在不同的空间中进行，即每个线程都预先在Java堆中预先分配一小块内存区域，叫做<strong>本地线程分配缓冲（TLAB）</strong>，线程在自己的TLAB上面分配内存，只有当TLAB用完要分配新的TLAB时再同步锁定，虚拟机是否使用TLAB可以根据参数-XX:+/-UserTLAB来设定。</li></ol><p>&emsp;内存分配完成后，虚拟机会将被分配的内存区域初始化为<strong>0值</strong>(不包括对象头)，若采用TLAB可以提前到分配TLAB时进行，这一操作使对象在未被赋值的情况下可以被访问其对应数据类型的0值。</p></blockquote><h3 id="3-虚拟机对对象进行必要的设置，如对象所属类、对象哈希码、类的元数据信息、对象的GC分代年龄信息等。然后把这些信息存放在对象头（Object-Header）中。"><a href="#3-虚拟机对对象进行必要的设置，如对象所属类、对象哈希码、类的元数据信息、对象的GC分代年龄信息等。然后把这些信息存放在对象头（Object-Header）中。" class="headerlink" title="3. 虚拟机对对象进行必要的设置，如对象所属类、对象哈希码、类的元数据信息、对象的GC分代年龄信息等。然后把这些信息存放在对象头（Object Header）中。"></a><strong>3. 虚拟机对对象进行必要的</strong>设置<strong>，如对象所属类、对象哈希码、类的元数据信息、对象的GC分代年龄信息等。然后把这些信息存放在</strong>对象头（Object Header）<strong>中。</strong></h3><p>&emsp;&emsp;&emsp;&emsp;此过程结束，对VM来说对象已经创建完成，对于Java程序而言才刚刚开始，然后就是初始化&lt; init &gt;，此时所有字段都还为<strong>0</strong>。</p><h3 id="4-执行对象的-lt-init-gt-方法，把对象按开发设计进行初始化。"><a href="#4-执行对象的-lt-init-gt-方法，把对象按开发设计进行初始化。" class="headerlink" title="4. 执行对象的&lt; init &gt;方法，把对象按开发设计进行初始化。"></a><strong>4. 执行对象的&lt; init &gt;方法，把对象按开发设计进行初始化。</strong></h3><h2 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2. 对象的内存布局"></a><strong>2. 对象的内存布局</strong></h2><p>&emsp;&emsp;在HotSpot虚拟机中，对象在内存中存储的布局分为3块区域：<strong>对象头</strong>（Header）、<strong>实例数据</strong>（Instance Data）和<strong>对齐填充</strong>（Padding）。</p><h3 id="2-1-对象头"><a href="#2-1-对象头" class="headerlink" title="2.1 对象头"></a><strong>2.1 对象头</strong></h3><p>&emsp;&emsp;对象头，包括两部分信息，第一部分存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分被叫做<strong>Mark Word</strong></p><table><thead><tr><th style="text-align:left">存储内容</th><th style="text-align:center">标志位</th><th style="text-align:center">状态</th></tr></thead><tbody><tr><td style="text-align:left">对象哈希码、对象分代年龄</td><td style="text-align:center">01</td><td style="text-align:center">未锁定</td></tr><tr><td style="text-align:left">指向锁记录的指针</td><td style="text-align:center">00</td><td style="text-align:center">轻量级锁定</td></tr><tr><td style="text-align:left">指向重量级锁的指针</td><td style="text-align:center">10</td><td style="text-align:center">膨胀（重量级锁定）</td></tr><tr><td style="text-align:left">空，不需要记录信息</td><td style="text-align:center">11</td><td style="text-align:center">GC标记</td></tr><tr><td style="text-align:left">偏向线程ID、偏向时间戳、对象分代年龄</td><td style="text-align:center">01</td><td style="text-align:center">可偏向</td></tr></tbody></table><p>&emsp;&emsp;第二部分是类型指针，即对象指向它的类元数据的指针，VM通过这个指针确定此对象是哪个类的实例。</p><p>&emsp;&emsp;此外若对象是Java数组时，对象头需要记录数组长度，VM可以根据对象的元数据来确定Java对象大小，对于数组则无法确定。</p><h3 id="2-2-实例数据"><a href="#2-2-实例数据" class="headerlink" title="2.2 实例数据"></a><strong>2.2 实例数据</strong></h3><p>&emsp;&emsp;实例数据部分就是对象的具体信息，即类中定义的各类型信息，包含父类继承的，此部分的存储顺序会受<strong>虚拟机分配策略参数</strong>和字段在Java源码中定义顺序的影响。HotSpot的默认顺序：longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers）。</p><h3 id="2-3-对齐填充"><a href="#2-3-对齐填充" class="headerlink" title="2.3 对齐填充"></a><strong>2.3 对齐填充</strong></h3><p>&emsp;&emsp;没有其它含义，只是起占位符的作用，因为HosSpot VM要求对象起始地址必须是8字节的整数倍，也就是对象大小必须是8字节的整数倍，对象头刚好是8或16，当实例数据部分不对齐时就需要此部分来填充。</p><h2 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a><strong>3. 对象的访问定位</strong></h2><p>&emsp;&emsp;如何访问对象？Java定义了reference类型规定了一个指向对象的引用，如何定位和访问堆中对象的物理位置需要VM的实现。主流的访问方式是<strong>句柄</strong>和<strong>直接指针</strong>。</p><h3 id="3-1-句柄"><a href="#3-1-句柄" class="headerlink" title="3.1 句柄"></a><strong>3.1 句柄</strong></h3><p>&emsp;&emsp;Java堆会划分一块内存作为句柄池，reference类型存储对象的<strong>句柄地址</strong>，句柄则包含了对象的实例数据和类型数据的具体地址信息。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/%E9%80%9A%E8%BF%87%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt="通过句柄访问对象"></p><h3 id="3-2-直接指针"><a href="#3-2-直接指针" class="headerlink" title="3.2 直接指针"></a><strong>3.2 直接指针</strong></h3><p>&emsp;&emsp;Java堆布局时需要考虑到访问类型数据的信息，所以reference类型存储的是<strong>对象的堆地址</strong></p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/%E9%80%9A%E8%BF%87%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt="通过直接指针访问对象"></p><p>&emsp;&emsp;句柄的优势是reference存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference类型则无需修改。</p><p>&emsp;&emsp;直接指针的优势是速度更快，节省了一次指针定位的时间开销，因为对象的访问是很频繁的，所以此类开销是很可观的，HotSpot采用直接指针访问。</p><hr><h1 id="三、内存溢出"><a href="#三、内存溢出" class="headerlink" title="三、内存溢出"></a><strong>三、内存溢出</strong></h1><p>&emsp;&emsp;Java的内存区域除了程序计数器外都有发生OutOfMemoryError异常的可能：</p><h3 id="1-Java堆溢出"><a href="#1-Java堆溢出" class="headerlink" title="1. Java堆溢出"></a><strong>1. Java堆溢出</strong></h3><p>&emsp;&emsp;当对象数量超过堆的容量限制产生OOM异常，java.lang.OutOfMemoryError: Java heap space</p><p>&emsp;&emsp;解决方案是通过内存分析工具分析此时内存存储快照中，对象是否是必要的，确认是内存泄露还是内存溢出。</p><p>&emsp;&emsp;如果是内存泄露，可以通过工具进一步查看泄露对象到GC Roots的引用链，所以可以找到泄露对象通过怎样的路径与GC Roots关联导致垃圾收集器无法回收此对象。</p><p>&emsp;&emsp;如果不存在内存泄露，也就是对象都是必要的，就需要检查虚拟机的堆参数（-Xmx与-Xms），看一下是否可以调整一下，检查是否有些可以优化的部分，来减少一些对象的生命周期。降低运行时的内存消耗。</p><h3 id="2-虚拟机栈和本地方法栈溢出"><a href="#2-虚拟机栈和本地方法栈溢出" class="headerlink" title="2. 虚拟机栈和本地方法栈溢出"></a><strong>2. 虚拟机栈和本地方法栈溢出</strong></h3><p>&emsp;&emsp;HotSpot不区分虚拟机栈和本地方法栈，栈容量只由-Xss参数设定。</p><p>&emsp;&emsp;Java虚拟机规范规定了两种异常：1.如果线程请求的栈深度大于虚拟机所允许的最大深度，抛出StackOverflowError异常。2.如果虚拟机在扩展栈时无法申请到足够的内存空间，抛出OutOfMemoryError异常。</p><p>&emsp;&emsp;若栈空间无法继续分配时，如何确定是内存太小还是栈空间太大？</p><p>&emsp;&emsp;通过一些实验证明，在单线程时，无论是栈帧太大还是虚拟机栈容量太小，当内存无法分配时VM都会抛出StackOverflowError异常。多线程时可能会因为创建线程分配资源的问题产生内存溢出异常，此时内存溢出异常和栈空间大小没有太大关系，而且若不能减少线程数时只能通过减少最大堆和栈容量来换取更多的线程。</p><h3 id="3-方法去和运行时常量池溢出"><a href="#3-方法去和运行时常量池溢出" class="headerlink" title="3. 方法去和运行时常量池溢出"></a><strong>3. 方法去和运行时常量池溢出</strong></h3><p>&emsp;&emsp;运行时常量池是方法区的一部分，通过String.intern()方法来测试。</p><blockquote><p>&emsp;String.intern()方法作用：当字符串常量池中已包含某个String对象的字符串，就返回池中此字符串的String对象；否则要将此String对象包含的字符串添加到常量池中，并返回其引用。在1.6版本前常量池在永久代中，可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小。</p><p>更多可以参考：<a href="../2018122501.html" title="Title">Java字符串内存分配-字符串常量池</a>，<a href="../2019030101.html" title="Title">String的intern方法详解</a>等</p></blockquote><p>&emsp;&emsp;循环调用String.intern()创建字符串对象，会抛出java.lang.OutOfMemoryError: PermGen space异常提示运行时常量池溢出，PermGen space表示了运行时常量池属于方法区/永久代的一部分。</p><p>&emsp;&emsp;通过CGLib字节码技术在运行时动态生成类，模拟方法区溢出场景，因为类要被垃圾回收是比较苛刻的，所以如果需要大量生成类时一定要注意类的回收情况。</p><h3 id="4-本机内存溢出"><a href="#4-本机内存溢出" class="headerlink" title="4. 本机内存溢出"></a><strong>4. 本机内存溢出</strong></h3><p>&emsp;&emsp;Direct Memory容量可以根据-XX: MaxDirectMemorySize指定，默认等于-Xmx数值。</p><p>&emsp;&emsp;通过反射获取Unsafe实例进行内存分配，模拟内存溢出场景，会抛出java.lang.OutOfMemoryError，如果内存溢出时堆转储文件（Heap dump）很小没有异常，且有用到NIO时可以考虑此情况。</p><blockquote><p>更多可以参考：<a href="../2018121801.html" title="Title">Java反射</a>，<a href="../2019040501.html" title="Title">Unsafe类详解</a></p></blockquote><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《深入理解Java虚拟机》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      简单介绍Java虚拟机中的Java内存区域和内存溢出异常。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="jvm" scheme="http://linyishui.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>抽象类，接口，注解</title>
    <link href="http://linyishui.top/2019050501.html"/>
    <id>http://linyishui.top/2019050501.html</id>
    <published>2019-05-05T09:17:22.000Z</published>
    <updated>2019-06-11T02:37:16.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><strong>抽象类</strong></h1><p>&emsp;&emsp;如字面意义，就是抽象的类，通过abstract关键字声明某个类或方法是抽象的。</p><p>&emsp;&emsp;抽象类可以包含抽象方法、域、实例方法等，当然在抽象的类中放置具体的数据和方法似乎有些违背其抽象的定义，但在程序设计时一般建议把最通用的域和方法放到顶层基类中，而不用刻意的考虑是否是抽象类。</p><p>&emsp;&emsp;抽象类的扩展可以通过两种方式：</p><ol><li>抽象类定义部分抽象方法或不定义任何抽象方法，这样的话子类就必须是抽象类，要负责声明部分抽象方法</li><li>抽象类定义全部的抽象方法，子类就可以是正常类，无需再声明为抽象类。</li></ol><p>&emsp;&emsp;抽象类不能被实例化，但可以声明抽象类型变量。</p><blockquote><p>类似下列调用a.method()；变量a是抽象类型或接口等都是合法的，因为它们不能实例化，所以会去调用子类或实现类对象。</p></blockquote><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a><strong>简述</strong></h2><p>&emsp;&emsp;接口不是类，是对类的一组需求描述，接口定义了一系列行为等，实现此接口的类就必须要包含接口定义的方法。通过implements关键字为类声明要实现哪些接口。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h2><ol><li>接口不是类，接口没有实例，所以不能在接口内引用实例域，也不能通过new去实例化，但可以声明接口变量</li><li>接口不能包含实例域，但可以定义常量，在Java8以后也可以实现方法</li><li>Java8以后也可以声明静态方法，静态方法有些破坏接口的抽象概念，但并不违法</li><li>可以通过在接口引入静态方法或直接实现方法来舍掉伴随类，如常用工具类Collections-Collection</li><li>接口中所有方法自动设置为public，但在类中实现此方法时依然要显示声明public，否则仍为default</li><li>接口中的域自动设为public static final</li><li>接口和类一样可以通过继承来扩展</li><li>类可以实现多个接口，为Java带来了极大的灵活性</li><li>接口的意义之一就是服务于Java的强类型特性，为编译器检查提供遍历。</li><li>可以通过default为接口方法提供一个默认实现，当然每次类实现时会覆盖它</li></ol><h2 id="解决默认方法冲突"><a href="#解决默认方法冲突" class="headerlink" title="解决默认方法冲突"></a><strong>解决默认方法冲突</strong></h2><p>&emsp;&emsp;当在接口中将某方法定义为默认，又在超类或其它接口中定义了同样的方法，则遵从以下规则：</p><ol><li>超类有限，超类若提供了具体方法，则相同参数的默认方法会被忽略</li><li>接口冲突，类实现的多个接口中有同参数同名的方法，其中有默认方法，类会同时得到两个方法，由程序员来实现此方法解决二义性，若没有默认方法，则不存在冲突。</li></ol><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a><strong>回调</strong></h2><p>&emsp;&emsp;回调是一种常见的设计模式，指定在发生某个事件时采取什么动作，如定时作业，Java中有一个Timer类，可以在一定的时间间隔后发出通告。如果我们构造一个定时器，需要设置一个时间间隔，并告知定时器在到达时间时要做哪些操作。</p><p>&emsp;&emsp;如何告知定时器执行操作？一些语言可以直接指定一个函数名，定时器会周期的调用它，Java则是采用面向对象的方法，它会将某个类的对象传递给定时器，然后定时器会调用此对象的方法，因为对象相比方法来说可以携带更多的信息，因此相比传递函数传递对象会更灵活。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ActionListener</span>&#123;<span class="comment">//通过此接口告知定时器要调用的方法，ActionEvent提供了事件的相关信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">actionPerformed</span>(<span class="params">ActionEvent <span class="keyword">event</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a><strong>比较</strong></h2><p>&emsp;&emsp;当需要对对象数组进行排序时，会要求对象实现了Comparable接口，保证了对象是可比较的，排序实际上就是比较交换。当如String等Java提供的类或是不应该覆盖compareTo()方法的类需要有另外一种排序规则时，可以通过比较器Comparator定义一个排序规则，再通过Arrays等工具类进行排序。</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a><strong>克隆</strong></h2><p>&emsp;&emsp;当要克隆一个对象时，要保证对象实现了Cloneable接口，此接口会要求类提供一个安全的clone方法。对象克隆更多内容可以参考<a href="../2018083001.html" title="Title">Java对象克隆</a></p><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a><strong>接口和抽象类</strong></h2><p>&emsp;&emsp;区别：</p><ol><li>从设计层面来看抽象类更像是对整个类的抽象，接口则是对行为的约束</li><li>抽象类受限于类不支持多继承，而接口则可以实现多重继承</li></ol><hr><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a><strong>注解</strong></h1><p>&emsp;&emsp;注解是一种标签，告知工具一些信息，使工具可以在源码层次上操作，或处理编译器放置注解的类文件。在Java中类似修饰符，如public等，可以修饰类或成员方法属性，以及局部变量。</p><p>&emsp;&emsp;常见的注解如下：</p><ol><li>@Test 表示类或方法需要测试，并在测试后删除代码，避免在打包时和其它代码装在一起。</li><li>@Override</li></ol><p>&emsp;&emsp;注解可以包含元素，如@Test(timeout = “10000”)，可以被工具读取。</p><p>&emsp;&emsp;注解通过创建注解接口的形式创建，@interface标识注解。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(<span class="type">RetentionPolicy</span>.<span class="type">RUNTIME</span>)</span><br><span class="line"><span class="meta">@Target</span>(&#123;<span class="type">ElementType</span>.<span class="type">METHOD</span>&#125;)<span class="comment">//@Retention和@Target是元注解，标识@Test，使其只能修饰方法，且在虚拟机加载类文件时仍可以保留下来。</span></span><br><span class="line">public <span class="meta">@interface</span> <span class="type">Test</span> &#123;</span><br><span class="line">    <span class="type">Class</span>&lt;? <span class="keyword">extends</span> <span class="type">Throwable</span>&gt; expected() <span class="keyword">default</span> <span class="type">Test</span>.<span class="type">None</span>.<span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    long timeout() <span class="keyword">default</span> <span class="number">0</span>L;<span class="comment">//注解可以指定的参数</span></span><br><span class="line"></span><br><span class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">None</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">None</span>() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a><strong>用处</strong></h2><p>&emsp;&emsp;基本用处：</p><ol><li>附属文件的自动生成，如部署描述符或bean信息类等</li><li>测试，日志，事务语义等代码的自动生成</li></ol><p>&emsp;&emsp;如实现一个监听器，一般通过匿名内部类的方式去创建，就可以通过设计一个注解，标识某个方法，当事件方式时就调用此方法。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    Button button = <span class="keyword">new</span> Button();</span><br><span class="line">    button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            doSomeThing();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过注解实现</span></span><br><span class="line">    <span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> ActionListenerFor &#123;</span><br><span class="line">        <span class="function">String <span class="title">source</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionListenerFor</span>(source = <span class="string">"button"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionListenerInstaller</span></span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Processes all ActionListenerFor annotations in the given object.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj an object whose methods may have ActionListenerFor annotations</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">processAnnotations</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//枚举出对象接收到的所有方法</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">         <span class="keyword">for</span> (Method m : cl.getDeclaredMethods())&#123;<span class="comment">//获取每个方法的ActionListenerFor注解对象，并分别处理</span></span><br><span class="line">            ActionListenerFor a = m.getAnnotation(ActionListenerFor.class);<span class="comment">//通过AnnotationElement接口所提供方法获得注解对象；方法、构造器、域、类和包都实现了此接口</span></span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)&#123;</span><br><span class="line">               Field f = cl.getDeclaredField(a.source());<span class="comment">////通过source()获得源成员域，此处只针对成员域，而没有考虑成员变量</span></span><br><span class="line">               f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">               addListener(f.get(obj), obj, m);<span class="comment">//为每个方法添加一个监听器</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (ReflectiveOperationException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Adds an action listener that calls a given method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> source the event source to which an action listener is added</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param the implicit parameter of the method that the listener calls</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> m the method that the listener calls</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> addListener(Object source, <span class="keyword">final</span> Object param, <span class="keyword">final</span> Method m)</span><br><span class="line">         <span class="keyword">throws</span> ReflectiveOperationException&#123;</span><br><span class="line">      InvocationHandler <span class="keyword">handler</span> = <span class="keyword">new</span> InvocationHandler()&#123;<span class="comment">//构造代理，通过反射机制处理注解</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method mm, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">               <span class="function"><span class="keyword">return</span> m.<span class="title">invoke</span><span class="params">(param)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">      Object listener = Proxy.newProxyInstance(<span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">new</span> Class[] &#123; java.awt.event.ActionListener.class &#125;, <span class="keyword">handler</span>);</span><br><span class="line">      Method adder = source.getClass().getMethod(<span class="string">"addActionListener"</span>, ActionListener.class);</span><br><span class="line">      adder.invoke(source, listener);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注解没有处理机制的话和注释也没有太大的区别，实现注解一般会用到代理机制等，可以参考<a href="../2019031501.html" title="Title">代理</a></p><h2 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a><strong>注解语法</strong></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解结构</span></span><br><span class="line">modifers @<span class="keyword">interface</span> <span class="title">AnnotationName</span>&#123;</span><br><span class="line">    elementDeclaration1</span><br><span class="line">    elementDeclaration2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//元素声明</span></span><br><span class="line"><span class="function">type <span class="title">elementName</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="function">type <span class="title">elementName</span>(<span class="params"></span>) <span class="keyword">default</span> <span class="keyword">value</span></span>;</span><br><span class="line"><span class="comment">//注解调用</span></span><br><span class="line">@AnnotationName(elementName1 = value1, elementName2 = value2, ...)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;elementName1名字为value时可以忽略元素名和等号直接赋值，称为单值注解。</p><p>&emsp;&emsp;所有的注解接口都隐式的扩展自java.lang.annotation.Annotation接口，其为正常接口，而非注解。所有的注解接口都无法再扩展，只能扩展自此接口。</p><p>&emsp;&emsp;注解接口和接口的一个区别就是：注解接口不用提供实现类，而是通过代理机制来生产代理类和对象。</p><blockquote><p>注解元素就是方法声明，其类型只能为：基本类型，String，Class，enum，注解类型，元素为前者的数组。</p></blockquote><blockquote><p>注解内可以含有：包，类（包括enum），接口（包括注解接口），方法，构造器，实例域（包括enum常量），局部变量，参数变量。</p></blockquote><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a><strong>元注解</strong></h2><table><thead><tr><th style="text-align:center">注解接口</th><th style="text-align:left">应用场合</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>Deprecated|全部|将项标记为过时的<br>SuppressWarnings|除了包和注解以外的所有情况|阻止某个给定类型的警告信息<br>Override|方法|检查该方法是否覆盖了某个超类方法<br>PostConstruct|方法|被标记的方法应该在构造之后或移除之前立即被调用<br>PreDestroy||<br>Resource|类、接口、方法、域|在类或接口上：标记为在其它地方要用到的资源。在方法或域上：为”注入”标记<br>Resources|类、接口|一个资源数组<br>Generated|全部|供代码生成工具使用<br>Target|注解|指明可以应用这个注解的哪些项<br>Retention|注解|指明此注解可以保留多久<br>Documented|注解|指明此注解应该包含在注解项的文档中<br>Inherited|注解|指明当这个注解应用于一个类时，能够自动被子类继承</p><p>&emsp;&emsp;用于编译时的注解：@Deprecated、@SuppressWarnings、@Override、@Generated</p><p>&emsp;&emsp;用于管理资源的注解：@PostConstruct、@Resource</p><h2 id="源码级注解处理"><a href="#源码级注解处理" class="headerlink" title="源码级注解处理"></a><strong>源码级注解处理</strong></h2><p>&emsp;&emsp;可以通过注解来自动生成一些代码，如实现Java的Bean信息类，可以通过注解@Property来标记属性的获取器和设置器。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Property</span></span><br><span class="line"><span class="function">String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Property</span>(editor=<span class="string">"TitlePositionEditor"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTitlePosition</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    titlePosition = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为了能自动生成BeanClass信息类，需要完成下列任务：</p><ol><li>编写一个源文件BeanClassBeanInfo.java，继承SimpleBeanInfo，覆盖getPropertyDescriptors()方法。</li><li>对于被注解的方法，去掉get和set前缀，小写化剩余部分可以恢复属性名。</li><li>对于每个属性编写一条用于构建PropertyDescriptor的语句。</li><li>若此属性具有一个编辑器，则要编写一个方法调用setPropertyEditorClass。</li><li>编写代码返回一个包含所有属性描述符的数组。</li></ol><p>&emsp;&emsp;通过一个实例实现@Property对应的注解处理器BeanInfoAnnotationProcessor</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">@SupportedAnnotationTypes(<span class="string">"annotation.Property"</span>)</span><br><span class="line">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span><br><span class="line">public <span class="keyword">class</span> BeanInfoAnnotationProcessor extends AbstractProcessor &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理注解声明</span></span><br><span class="line"><span class="comment">     * @param annotations 本轮要处理的注解集</span></span><br><span class="line"><span class="comment">     * @param rounEnv 包含当前处理轮次的有关信息的RoundEnv引用</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(<span class="keyword">Set</span>&lt;? extends TypeElement&gt; annotations, RoundEnvironment rounEnv) &#123;</span><br><span class="line">        <span class="keyword">for</span> (TypeElement t : annotations)&#123;<span class="comment">//迭代遍历注解过的方法</span></span><br><span class="line">            Map&lt;String,Property&gt; props = new LinkedHashMap&lt;&gt;();</span><br><span class="line">            String beanClassName = null;</span><br><span class="line">            <span class="keyword">for</span>(Element <span class="keyword">e</span> : rounEnv.getElementsAnnotatedWith(t))&#123;</span><br><span class="line">                String mname = <span class="keyword">e</span>.getSimpleName().<span class="keyword">toString</span>();</span><br><span class="line">                String[] prefixes = &#123;<span class="string">"get"</span>,<span class="string">"set"</span>,<span class="string">"is"</span>&#125;;<span class="comment">//剥离定义的前缀</span></span><br><span class="line">                boolean found = false;</span><br><span class="line">                <span class="keyword">for</span>(int i = 0; !found &amp;&amp; i &lt; prefixes.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(mname.startsWith(prefixes[i]))&#123;</span><br><span class="line">                        found = true;</span><br><span class="line">                        int start = prefixes[i].<span class="built_in">length</span>();</span><br><span class="line">                        String name = Introspector.decapitalize(mname.substring(start));<span class="comment">//转换小写，得到属性名</span></span><br><span class="line">                        props.put(name,<span class="keyword">e</span>.getAnnotation(Property.<span class="keyword">class</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!found)&#123;<span class="comment">//未找到合法的注释属性</span></span><br><span class="line">                    processingEnv.getMessager().printMessage(Diagnostic.Kind.<span class="keyword">ERROR</span>,</span><br><span class="line">                            <span class="string">"@Property must be applied to getXxx, setXxx, or isXxx method"</span>,<span class="keyword">e</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(beanClassName == null)&#123;</span><br><span class="line">                    beanClassName = ((TypeElement) <span class="keyword">e</span>.getEnclosingElement()).getQualifiedName().<span class="keyword">toString</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span>(beanClassName != null)&#123;</span><br><span class="line">                    writeBeanInfoFile(beanClassName,props);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (IOException <span class="keyword">ex</span>)&#123;</span><br><span class="line">                <span class="keyword">ex</span>.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void writeBeanInfoFile(String beanClassName, Map&lt;String,Property&gt; props)throws IOException&#123;<span class="comment">//编写源文件，生成XxxBeanInfo，processingEnv可以访问各种处理服务</span></span><br><span class="line">        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(beanClassName + <span class="string">"BeanInfo"</span>);</span><br><span class="line">        PrintWriter <span class="keyword">out</span> = new PrintWriter(sourceFile.openWriter());</span><br><span class="line">        int i = beanClassName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; 0)&#123;</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"package "</span>);</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(beanClassName.substring(0,i));</span><br><span class="line">            <span class="keyword">out</span>.println(<span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"public class "</span>);</span><br><span class="line">        <span class="keyword">out</span>.<span class="keyword">print</span>(beanClassName.substring(i + 1));</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"BeanInfo extends java.beans.SimpleBeanInfo"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"    public java.beans.PropertyDescriptor[] getPropertyDescriptors()&#123;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"        try&#123;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Property&gt; <span class="keyword">e</span> : props.entrySet())&#123;</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"            java.beans.PropertyDescriptor "</span>);</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="keyword">e</span>.getKey());</span><br><span class="line">            <span class="keyword">out</span>.println(<span class="string">"Descriptor"</span>);</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"            = new java.beans.PropertyDescriptor(\"</span>");</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="keyword">e</span>.getKey());</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\"</span>,");</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(beanClassName);</span><br><span class="line">            <span class="keyword">out</span>.println(<span class="string">".class);"</span>);</span><br><span class="line">            String <span class="keyword">ed</span> = <span class="keyword">e</span>.getValue().editor().<span class="keyword">toString</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">ed</span>.equals(<span class="string">""</span>))&#123;</span><br><span class="line">                <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"            "</span>);</span><br><span class="line">                <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="keyword">e</span>.getKey());</span><br><span class="line">                <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"Descriptor.setPropertyEditorClass("</span>);</span><br><span class="line">                <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="keyword">ed</span>);</span><br><span class="line">                <span class="keyword">out</span>.println(<span class="string">".class);"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"            return new java.beans.PropertyDescriptor[]&#123;"</span>);</span><br><span class="line">        boolean first = true;</span><br><span class="line">        <span class="keyword">for</span>(String p : props.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(first) first = false;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">out</span>.println();</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"            "</span>);</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(p);</span><br><span class="line">            <span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"Descriptor"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">out</span>.println();</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"            &#125;;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"        &#125;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"        catch (java.beans.IntrospectionException e)&#123;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"            e.printStackTrace();"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"            return null;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"        &#125;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"    &#125;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.println(<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="keyword">out</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;被注解文件ChartBean</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ChartBean</span> <span class="keyword">extends</span> <span class="title">JComponent</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the title property.</span></span><br><span class="line"><span class="comment">     * @return the chart title.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Property</span></span><br><span class="line">    public <span class="type">String</span> getTitle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过编译生成对应ChartBeanBeanInfo.java等文件</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;javac  -encoding UTF-<span class="number">8</span> <span class="keyword">annotation</span>/BeanInfoAnnotationProcessor.java</span><br><span class="line">&gt;javac  -XprintRounds -processor <span class="keyword">annotation</span>.BeanInfoAnnotationProcessor <span class="keyword">annotation</span>/ChartBean.java</span><br><span class="line"></span><br><span class="line">循环 <span class="number">1</span>:</span><br><span class="line">        输入文件: &#123;<span class="keyword">annotation</span>.ChartBean&#125;</span><br><span class="line">        注释: [java.lang.Override, <span class="keyword">annotation</span>.Property]</span><br><span class="line">        最后一个循环: <span class="literal">false</span></span><br><span class="line">循环 <span class="number">2</span>:</span><br><span class="line">        输入文件: &#123;<span class="keyword">annotation</span>.ChartBeanBeanInfo&#125;</span><br><span class="line">        注释: []</span><br><span class="line">        最后一个循环: <span class="literal">false</span></span><br><span class="line">循环 <span class="number">3</span>:</span><br><span class="line">        输入文件: &#123;&#125;</span><br><span class="line">        注释: []</span><br><span class="line">        最后一个循环: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注解会未标注的方法创建ChartBeanBeanInfo文件，并实现getPropertyDescriptors()函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ChartBeanBeanInfo</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">beans</span>.<span class="title">SimpleBeanInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    public java.beans.<span class="type">PropertyDescriptor</span>[] getPropertyDescriptors()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            java.beans.<span class="type">PropertyDescriptor</span> titleDescriptor</span><br><span class="line">            = <span class="keyword">new</span> java.beans.<span class="type">PropertyDescriptor</span>(<span class="string">"title"</span>,annotation.<span class="type">ChartBean</span>.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> java.beans.<span class="type">PropertyDescriptor</span>[]&#123;</span><br><span class="line"></span><br><span class="line">            titleDescriptor</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (java.beans.<span class="type">IntrospectionException</span> e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节码级注解处理"><a href="#字节码级注解处理" class="headerlink" title="字节码级注解处理"></a><strong>字节码级注解处理</strong></h2><p>&emsp;&emsp;字节码级注解处理会一直存在于类文件中。</p><p>&emsp;&emsp;假如某类的hacode()方法有以下注解：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line"><span class="variable">@LogEntry</span>(logger = <span class="string">"global"</span>)</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">super</span><span class="selector-class">.hashCode</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当此方法被调用时，会打印类似日志消息：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Aug</span> <span class="number">17</span>, <span class="number">2004</span> <span class="number">9</span>:<span class="number">32</span>:<span class="number">59</span> PM <span class="keyword">Item </span>hashCode</span><br><span class="line"><span class="symbol">FINER</span>: <span class="meta">ENTRY</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;为了实现此注解功能，需要完成下列任务：</p><ol><li>加载类文件中的字节码。</li><li>定位所有的方法。</li><li>对于每个方法，检查其是不是有一个@LogEntry注解。</li><li>如果有，则在方法开始部分添加以下字节码。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ldc loggerName</span><br><span class="line">invokestatic java<span class="regexp">/util/</span>logging<span class="regexp">/Logger.getLogger:(Ljava/</span>lang<span class="regexp">/String;)Ljava/u</span>til<span class="regexp">/logging/</span>Logger;</span><br><span class="line">ldc className</span><br><span class="line">ldc methodName</span><br><span class="line">invokevirtual java<span class="regexp">/util/</span>logging<span class="regexp">/Logger.entering:(Ljava/</span>lang<span class="regexp">/String;Ljava/</span>lang<span class="regexp">/String;)V</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;BCEL即字节码工程类库，即可以处理类文件的特殊类库。ASM则是一个java字节码操纵框架，可以用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javac annotation/set/Item.java</span><br><span class="line">javac -classpath .:asm-<span class="number">6.2</span><span class="selector-class">.jar</span> annotation/bytecodeAnnotations/EntryLogger</span><br><span class="line">javap -c Item.java</span><br><span class="line">javac -classpath .:asm-<span class="number">6.2</span><span class="selector-class">.jar</span> annotation/bytecodeAnnotations/EntryLogger set.Item</span><br><span class="line"></span><br><span class="line">javac -classpath .:asm-<span class="number">6.2</span><span class="selector-class">.jar</span> annotation/bytecodeAnnotations/EntryLoggerAgent</span><br><span class="line">jar</span><br><span class="line"></span><br><span class="line">javac annotation/set/SetTest.java</span><br><span class="line">java -javaagent:annotation/bytecodeAnnotations/EntryLoggingAgent.jar=set<span class="selector-class">.Item</span> -classpath .:asm-<span class="number">6.2</span><span class="selector-class">.jar</span> set.SetTest</span><br></pre></td></tr></table></figure><h2 id="emsp-emsp-在加载时修改字节码，Java5以后可以通过代理的方式，通过监视程序运行，检验后调用类转换器修改字节码，将结果直接返回给JVM加载，即即使字节码修改。"><a href="#emsp-emsp-在加载时修改字节码，Java5以后可以通过代理的方式，通过监视程序运行，检验后调用类转换器修改字节码，将结果直接返回给JVM加载，即即使字节码修改。" class="headerlink" title="&emsp;&emsp;在加载时修改字节码，Java5以后可以通过代理的方式，通过监视程序运行，检验后调用类转换器修改字节码，将结果直接返回给JVM加载，即即使字节码修改。"></a>&emsp;&emsp;在加载时修改字节码，Java5以后可以通过代理的方式，通过监视程序运行，检验后调用类转换器修改字节码，将结果直接返回给JVM加载，即<strong>即使字节码修改</strong>。</h2><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java语言规范》</p></blockquote><blockquote><p>《Java核心技术 卷Ⅰ》</p></blockquote><blockquote><p>《Java核心技术 卷Ⅱ》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      接口，抽象类，注解
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>算法复习 (二) 查找-篇Ⅱ</title>
    <link href="http://linyishui.top/2019042901.html"/>
    <id>http://linyishui.top/2019042901.html</id>
    <published>2019-04-29T08:50:58.000Z</published>
    <updated>2019-04-29T08:58:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      查找篇Ⅱ包括：平衡查找树等内容
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="algorithm" scheme="http://linyishui.top/tags/algorithm/"/>
    
  </entry>
  
</feed>
