<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沂水博客</title>
  
  <subtitle>编程和心历记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linyishui.top/"/>
  <updated>2019-09-19T07:53:42.247Z</updated>
  <id>http://linyishui.top/</id>
  
  <author>
    <name>沂水</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Condition接口及实现原理</title>
    <link href="http://linyishui.top/2019081601.html"/>
    <id>http://linyishui.top/2019081601.html</id>
    <published>2019-08-16T07:13:38.000Z</published>
    <updated>2019-09-19T07:53:42.247Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Condition接口"><a href="#Condition接口" class="headerlink" title="Condition接口"></a><strong>Condition接口</strong></h1><p>&emsp;任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括wait()、wait(long timeout)、notify()以及notifyAll()方法，这些方法与synchronized同步关键字配合，可以实现等待/通知模式。Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式，但是这两者在使用方式以及功能特性上还是有差别的。</p><p>&emsp;通过对比Object的监视器方法和Condition接口，可以更详细地了解Condition的特性，对比项与结果如下表所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160120.jpg" alt="Object的监视器方法与Condition接口的对比"></p><hr><h2 id="Condition接口与示例"><a href="#Condition接口与示例" class="headerlink" title="Condition接口与示例"></a><strong>Condition接口与示例</strong></h2><p>&emsp;Condition定义了等待/通知两种类型的方法，当前线程调用这些方法时，需要提前获取到Condition对象关联的锁。Condition对象是由Lock对象（调用Lock对象的newCondition()方法）创建出来的，换句话说，Condition是依赖Lock对象的。</p><p>&emsp;Condition的使用方式比较简单，需要注意在调用方法前获取锁，使用方式如下列代码所示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Condition condition = <span class="keyword">lock</span>.newCondition();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionWait</span>(<span class="params"></span>) throws InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        condition.<span class="keyword">await</span>();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">lock</span>.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionSignal</span>(<span class="params"></span>) throws InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        condition.signal();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">lock</span>.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;如示例所示，一般都会将Condition对象作为成员变量。当调用await()方法后，当前线程会释放锁并在此等待，而其他线程调用Condition对象的signal()方法，通知当前线程后，当前线程才从await()方法返回，并且在返回前已经获取了锁。</p><p>&emsp;Condition定义的（部分）方法以及描述如下表所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160121.jpg" alt="Condition的（部分）方法以及描述"></p><p>&emsp;获取一个Condition必须通过Lock的newCondition()方法。下面通过一个有界队列的示例来深入了解Condition的使用方式。有界队列是一种特殊的队列，当队列为空时，队列的获取操作将会阻塞获取线程，直到队列中有新增元素，当队列已满时，队列的插入操作将会阻塞插入线程，直到队列出现“空位”，如下列代码所示。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class BoundedQueue&lt;T&gt; &#123;</span><br><span class="line">    <span class="built_in">private</span> Object[] <span class="built_in">items</span>;</span><br><span class="line">    <span class="comment">// 添加的下标，删除的下标和数组当前数量</span></span><br><span class="line">    <span class="built_in">private</span> int addIndex, removeIndex, <span class="built_in">count</span>;</span><br><span class="line">    <span class="built_in">private</span> <span class="built_in">Lock</span> <span class="built_in">lock</span> = new ReentrantLock();</span><br><span class="line">    <span class="built_in">private</span> Condition notEmpty = <span class="built_in">lock</span>.newCondition();</span><br><span class="line">    <span class="built_in">private</span> Condition notFull = <span class="built_in">lock</span>.newCondition();</span><br><span class="line">    public BoundedQueue(int <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="built_in">items</span> = new Object[<span class="built_in">size</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加一个元素，如果数组满，则添加线程进入等待状态，直到有"空位"</span></span><br><span class="line">    public void add(T t) throws InterruptedException &#123;</span><br><span class="line">        <span class="built_in">lock</span>.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">count</span> == <span class="built_in">items</span>.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            <span class="built_in">items</span>[addIndex] = t;</span><br><span class="line">            <span class="keyword">if</span> (++addIndex == <span class="built_in">items</span>.length)</span><br><span class="line">                addIndex = <span class="number">0</span>;</span><br><span class="line">            ++<span class="built_in">count</span>;</span><br><span class="line">            notEmpty.signal();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="built_in">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 由头部删除一个元素，如果数组空，则删除线程进入等待状态，直到有新添加元素</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    public T remove() throws InterruptedException &#123;</span><br><span class="line">        <span class="built_in">lock</span>.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">count</span> == <span class="number">0</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            Object x = <span class="built_in">items</span>[removeIndex];</span><br><span class="line">            <span class="keyword">if</span> (++removeIndex == <span class="built_in">items</span>.length)</span><br><span class="line">                removeIndex = <span class="number">0</span>;</span><br><span class="line">            --<span class="built_in">count</span>;</span><br><span class="line">            notFull.signal();</span><br><span class="line">            return (T) x;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="built_in">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;上述示例中，BoundedQueue通过add(T t)方法添加一个元素，通过remove()方法移出一个元素。以添加方法为例。</p><p>&emsp;首先需要获得锁，目的是确保数组修改的可见性和排他性。当数组数量等于数组长度时，表示数组已满，则调用notFull.await()，当前线程随之释放锁并进入等待状态。如果数组数量不等于数组长度，表示数组未满，则添加元素到数组中，同时通知等待在notEmpty上的线程，数组中已经有新元素可以获取。</p><p>&emsp;在添加和删除方法中使用while循环而非if判断，目的是防止过早或意外的通知，只有条件符合才能够退出循环。回想之前提到的等待/通知的经典范式，二者是非常类似的。</p><hr><h2 id="Condition的实现分析"><a href="#Condition的实现分析" class="headerlink" title="Condition的实现分析"></a><strong>Condition的实现分析</strong></h2><p>&emsp;ConditionObject是同步器AbstractQueuedSynchronizer的内部类，因为Condition的操作需要获取相关联的锁，所以作为同步器的内部类也较为合理。每个Condition对象都包含着一个队列（以下称为等待队列），该队列是Condition对象实现等待/通知功能的关键。</p><p>&emsp;下面将分析Condition的实现，主要包括：等待队列、等待和通知，下面提到的Condition如果不加说明均指的是ConditionObject。</p><h3 id="1-等待队列"><a href="#1-等待队列" class="headerlink" title="1.等待队列"></a><strong>1.等待队列</strong></h3><p>&emsp;等待队列是一个FIFO的队列，在队列中的每个节点都包含了一个线程引用，该线程就是在Condition对象上等待的线程，如果一个线程调用了Condition.await()方法，那么该线程将会释放锁、构造成节点加入等待队列并进入等待状态。事实上，节点的定义复用了同步器中节点的定义，也就是说，同步队列和等待队列中节点类型都是同步器的静态内部类AbstractQueuedSynchronizer.Node。</p><p>&emsp;一个Condition包含一个等待队列，Condition拥有首节点（firstWaiter）和尾节点（lastWaiter）。当前线程调用Condition.await()方法，将会以当前线程构造节点，并将节点从尾部加入等待队列，等待队列的基本结构如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160122.jpg" alt="等待队列的基本结构"></p><p>&emsp;如图所示，Condition拥有首尾节点的引用，而新增节点只需要将原有的尾节点nextWaiter指向它，并且更新尾节点即可。上述节点引用更新的过程并没有使用CAS保证，原因在于调用await()方法的线程必定是获取了锁的线程，也就是说该过程是由锁来保证线程安全的。</p><p>&emsp;在Object的监视器模型上，一个对象拥有一个同步队列和等待队列，而并发包中的Lock（更确切地说是同步器）拥有一个同步队列和多个等待队列，其对应关系如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160123.jpg" alt="同步队列与等待队列"></p><p>&emsp;如图所示，Condition的实现是同步器的内部类，因此每个Condition实例都能够访问同步器提供的方法，相当于每个Condition都拥有所属同步器的引用。</p><h3 id="2-等待"><a href="#2-等待" class="headerlink" title="2.等待"></a><strong>2.等待</strong></h3><p>&emsp;调用Condition的await()方法（或者以await开头的方法），会使当前线程进入等待队列并释放锁，同时线程状态变为等待状态。当从await()方法返回时，当前线程一定获取了Condition相关联的锁。</p><p>&emsp;如果从队列（同步队列和等待队列）的角度看await()方法，当调用await()方法时，相当于同步队列的首节点（获取了锁的节点）移动到Condition的等待队列中。</p><p>&emsp;Condition的await()方法，如下列代码所示。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public final void await() throws InterruptedException &#123;</span><br><span class="line">    if (Thread.interrupted())</span><br><span class="line">    throw new InterruptedException();</span><br><span class="line">    // 当前线程加入等待队列</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">node</span> = addConditionWaiter();</span><br><span class="line">    // 释放同步状态，也就是释放锁</span><br><span class="line">    int savedState = fullyRelease(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">    int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">    while (!isOnSyncQueue(<span class="keyword">node</span><span class="title">)) &#123;</span></span><br><span class="line"><span class="title">        LockSupport</span>.park(this);</span><br><span class="line">        if ((interruptMode = checkInterruptWhileWaiting(<span class="keyword">node</span><span class="title">)) != 0</span>)</span><br><span class="line">            break;</span><br><span class="line">    &#125;    </span><br><span class="line">    if (acquireQueued(<span class="keyword">node</span><span class="title">, savedState</span>) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    if (<span class="keyword">node</span>.<span class="title">nextWaiter</span> != null)</span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">    if (interruptMode != <span class="number">0</span>)</span><br><span class="line">        reportInterruptAfterWait(interruptMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;调用该方法的线程成功获取了锁的线程，也就是同步队列中的首节点，该方法会将当前线程构造成节点并加入等待队列中，然后释放同步状态，唤醒同步队列中的后继节点，然后当前线程会进入等待状态。</p><p>&emsp;当等待队列中的节点被唤醒，则唤醒节点的线程开始尝试获取同步状态。如果不是通过其他线程调用Condition.signal()方法唤醒，而是对等待线程进行中断，则会抛出InterruptedException。</p><p>&emsp;如果从队列的角度去看，当前线程加入Condition的等待队列，该过程如下图示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160124.jpg" alt="当前线程加入等待队列"></p><p>&emsp;如图所示，同步队列的首节点并不会直接加入等待队列，而是通过addConditionWaiter()方法把当前线程构造成一个新的节点并将其加入等待队列中。</p><h3 id="3-通知"><a href="#3-通知" class="headerlink" title="3.通知"></a><strong>3.通知</strong></h3><p>&emsp;调用Condition的signal()方法，将会唤醒在等待队列中等待时间最长的节点（首节点），在唤醒节点之前，会将节点移到同步队列中。</p><p>&emsp;Condition的signal()方法，如下列代码所示。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;调用该方法的前置条件是当前线程必须获取了锁，可以看到signal()方法进行了isHeldExclusively()检查，也就是当前线程必须是获取了锁的线程。接着获取等待队列的首节点，将其移动到同步队列并使用LockSupport唤醒节点中的线程。</p><p>&emsp;节点从等待队列移动到同步队列的过程如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160125.jpg" alt="节点从等待队列移动到同步队列"></p><p>&emsp;通过调用同步器的enq(Node node)方法，等待队列中的头节点线程安全地移动到同步队列。当节点移动到同步队列后，当前线程再使用LockSupport唤醒该节点的线程。</p><p>&emsp;被唤醒后的线程，将从await()方法中的while循环中退出（isOnSyncQueue(Node node)方法返回true，节点已经在同步队列中），进而调用同步器的acquireQueued()方法加入到获取同步状态的竞争中。</p><p>&emsp;成功获取同步状态（或者说锁）之后，被唤醒的线程将从先前调用的await()方法返回，此时该线程已经成功地获取了锁。</p><p>&emsp;Condition的signalAll()方法，相当于对等待队列中的每个节点均执行一次signal()方法，效果就是将等待队列中所有节点全部移动到同步队列中，并唤醒每个节点的线程。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的并发包中Condition接口相关内容：Condition接口与示例，Condition的实现分析：1.等待队列，2.等待，3.通知。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>LockSupport工具</title>
    <link href="http://linyishui.top/2019081501.html"/>
    <id>http://linyishui.top/2019081501.html</id>
    <published>2019-08-15T07:12:42.000Z</published>
    <updated>2019-09-19T07:45:19.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LockSupport工具"><a href="#LockSupport工具" class="headerlink" title="LockSupport工具"></a><strong>LockSupport工具</strong></h1><p>&emsp;回顾<a href="../2019040401.html" title="Title">同步器AQS的实现原理</a>，当需要阻塞或唤醒一个线程的时候，都会使用LockSupport工具类来完成相应工作。LockSupport定义了一组的公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能，而LockSupport也成为构建同步组件的基础工具。</p><p>&emsp;LockSupport定义了一组以park开头的方法用来阻塞当前线程，以及unpark(Thread thread)方法来唤醒一个被阻塞的线程。Park有停车的意思，假设线程为车辆，那么park方法代表着停车，而unpark方法则是指车辆启动离开，这些方法以及描述如下表所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160118.jpg" alt="LockSupport提供的阻塞和唤醒方法"></p><p>&emsp;在Java 6中，LockSupport增加了park(Object blocker)、parkNanos(Object blocker,long nanos)和parkUntil(Object blocker,long deadline)3个方法，用于实现阻塞当前线程的功能，其中参数blocker是用来标识当前线程在等待的对象（以下称为阻塞对象），该对象主要用于问题排查和系统监控。</p><p>&emsp;下面的示例中，将对比parkNanos(long nanos)方法和parkNanos(Object blocker,long nanos)方法来展示阻塞对象blocker的用处，代码片段和线程dump（部分）如下表所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160119.jpg" alt="Blocker在线程dump中的作用"></p><p>&emsp;从表的线程dump结果可以看出，代码片段的内容都是阻塞当前线程10秒，但从线程dump结果可以看出，有阻塞对象的parkNanos方法能够传递给开发人员更多的现场信息。这是由于在Java 5之前，当线程阻塞（使用synchronized关键字）在一个对象上时，通过线程dump能够查看到该线程的阻塞对象，方便问题定位，而Java 5推出的Lock等并发工具时却遗漏了这一点，致使在线程dump时无法提供阻塞对象的信息。因此，在Java 6中，LockSupport新增了上述3个含有阻塞对象的park方法，用以替代原有的park方法。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的并发包中LockSupport工具相关内容。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>锁Q&amp;A</title>
    <link href="http://linyishui.top/2019081401.html"/>
    <id>http://linyishui.top/2019081401.html</id>
    <published>2019-08-14T02:40:27.000Z</published>
    <updated>2019-09-17T02:43:17.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a><strong>Q&amp;A</strong></h2><blockquote><p><strong>什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？</strong></p><p>&emsp;阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。</p><p>&emsp;这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。</p><p>&emsp;阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><p>&emsp;JDK7提供了7个阻塞队列。分别是：</p><p>&emsp;* ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。</p><p>&emsp;* LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。</p><p>&emsp;* PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。</p><p>&emsp;* DelayQueue：一个使用优先级队列实现的无界阻塞队列。</p><p>&emsp;* SynchronousQueue：一个不存储元素的阻塞队列。</p><p>&emsp;* LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</p><p>&emsp;* LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</p><p>&emsp;Java 5之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作和线程同步可以实现生产者，消费者模式，主要的技术就是用好，wait ,notify,notifyAll,sychronized这些关键字。而在java 5之后，可以使用阻塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，安全方面也有保障。</p><p>&emsp;BlockingQueue接口是Queue的子接口，它的主要用途并不是作为容器，而是作为线程同步的的工具，因此他具有一个很明显的特性，当生产者线程试图向BlockingQueue放入元素时，如果队列已满，则线程被阻塞，当消费者线程试图从中取出一个元素时，如果队列为空，则该线程会被阻塞，正是因为它所具有这个特性，所以在程序中多个线程交替向BlockingQueue中放入元素，取出元素，它可以很好的控制线程之间的通信。</p><p>&emsp;阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析。</p></blockquote><blockquote><p><strong>互斥锁和自旋锁、信号量的区别？</strong></p><p>&emsp;互斥锁也可以叫互斥量，广义上讲可以值所有实现互斥作用的同步机制。狭义上讲指的就是mutex这种特定的二元锁机制。互斥锁的作用就是互斥，mutual exclusive，是用来保护临界区(critical section)的 。所谓临界区就是代码的一个区间，如果两个线程同时执行就有可能出问题，所以需要互斥锁来保护。</p><p>&emsp;信号量（semaphore） 是一种更高级的同步机制，mutex（互斥锁） 可以说是 semaphore（信号量） 在仅取值0/1时的特例。Semaphore可以有更多的取值空间，用来实现更加复杂的同步，而不单单是线程间互斥。</p><p>&emsp;自旋锁 是一种 互斥锁 的实现方式而已，相比一般的互斥锁会在等待期间放弃cpu，自旋锁（spinlock） 则是不断循环并测试锁的状态，这样就一直占着cpu。所以相比于自旋锁和信号量，在申请锁失败的话，自旋锁会不断的查询，申请线程不会进入休眠，信号量和互斥锁如果申请锁失败的话线程进入休眠，如果申请锁被释放后会唤醒休眠的线程。</p><p>&emsp;同步锁 好像没啥特殊说法，你可以理解为能实现同步作用的都可以叫同步锁，比如信号量。最后，不要钻这些名词的牛角尖，更重要的是理解这些东西背后的原理，叫什么名字并没有什么好说的。这些东西在不同的语言和平台上又有可能会有不同的叫法，其实本质上就这么回事。</p></blockquote><p>未完待续..</p>]]></content>
    
    <summary type="html">
    
      锁相关内容问与答
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
      <category term="Q&amp;A" scheme="http://linyishui.top/tags/Q-A/"/>
    
  </entry>
  
  <entry>
    <title>条件等待队列</title>
    <link href="http://linyishui.top/2019081301.html"/>
    <id>http://linyishui.top/2019081301.html</id>
    <published>2019-08-13T01:08:52.000Z</published>
    <updated>2019-09-19T07:54:15.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="条件等待队列"><a href="#条件等待队列" class="headerlink" title="条件等待队列"></a><strong>条件等待队列</strong></h1><p>&emsp;当多个线程 await() 在同一个条件变量上时，会形成一个条件等待队列。同一个锁可以创建多个条件变量，就会存在多个条件等待队列。这个队列和 AQS 的队列结构很接近，只不过它不是双向队列，而是单向队列。队列中的节点和 AQS 等待队列的节点是同一个类，但是节点指针不是 prev 和 next，而是 nextWaiter。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class AQS &#123;</span><br><span class="line">  ...</span><br><span class="line">  class ConditionObject &#123;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">firstWaiter</span>;  // 指向第一个节点</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">lastWaiter</span>;  // 指向第二个节点</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  class <span class="keyword">Node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    static</span> final int CONDITION = -<span class="number">2</span>;</span><br><span class="line">    static final int SIGNAL = -<span class="number">1</span>;</span><br><span class="line">    Thread thread;  // 当前等待的线程</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">nextWaiter</span>;  // 指向下一个条件等待节点</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span> <span class="title">prev</span>;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">next</span>;</span><br><span class="line">    int waitStatus;  // waitStatus = CONDITION</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160107.jpg" alt=""></p><p>&emsp;ConditionObject 是 AQS 的内部类，这个对象里会有一个隐藏的指针 this$0 指向外部的 AQS 对象，ConditionObject 可以直接访问 AQS 对象的所有属性和方法（加锁解锁）。位于条件等待队列里的所有节点的 waitStatus 状态都被标记为 CONDITION，表示节点是因为条件变量而等待。</p><hr><h1 id="队列转移"><a href="#队列转移" class="headerlink" title="队列转移"></a><strong>队列转移</strong></h1><p>&emsp;当条件变量的 signal() 方法被调用时，条件等待队列的头节点线程会被唤醒，该节点从条件等待队列中被摘走，然后被转移到 AQS 的等待队列中，准备排队尝试重新获取锁。这时节点的状态从 CONDITION 转为 SIGNAL，表示当前节点是被条件变量唤醒转移过来的。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class AQS &#123;</span><br><span class="line">  ...</span><br><span class="line">  boolean transferForSignal(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">    // 重置节点状态</span><br><span class="line">    if (!<span class="keyword">node</span>.<span class="title">compareAndSetWaitStatus</span>(<span class="keyword">Node</span>.<span class="title">CONDITION</span>, <span class="number">0</span>))</span><br><span class="line">      return <span class="literal">false</span></span><br><span class="line">    <span class="keyword">Node</span> <span class="title">p</span> = enq(<span class="keyword">node</span><span class="title">); // 进入 AQS</span> 等待队列</span><br><span class="line">    int ws = p.waitStatus;</span><br><span class="line">    // 再修改状态为SIGNAL</span><br><span class="line">    if (ws &gt; <span class="number">0</span> || !p.compareAndSetWaitStatus(ws, <span class="keyword">Node</span>.<span class="title">SIGNAL</span>))</span><br><span class="line">       LockSupport.unpark(<span class="keyword">node</span>.<span class="title">thread</span>);</span><br><span class="line">       return <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;被转移的节点的 nextWaiter 字段的含义也发生了变更，在条件队列里它是下一个节点的指针，在 AQS 等待队列里它是共享锁还是互斥锁的标志。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190316/201903160108.jpg" alt="Java 并发包常用类库依赖结构"></p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java核心技术 卷Ⅰ》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的条件等待队列相关内容：条件等待队列和队列转移
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>Lock接口</title>
    <link href="http://linyishui.top/2019081201.html"/>
    <id>http://linyishui.top/2019081201.html</id>
    <published>2019-08-12T08:36:10.000Z</published>
    <updated>2019-09-19T09:47:11.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a><strong>Lock</strong></h1><p>&emsp;Lock提供了和synchronized类似的同步功能，但需要显式的获取和释放锁，缺少了便捷性，但增加了锁获取与释放的可操作性、可中断的获取锁以 及超时获取锁等多种synchronized关键字所不具备的同步特性。</p><h2 id="第一节-创建和使用Lock"><a href="#第一节-创建和使用Lock" class="headerlink" title="第一节 创建和使用Lock"></a><strong>第一节 创建和使用Lock</strong></h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock()<span class="comment">;</span></span><br><span class="line"><span class="keyword">lock</span>.<span class="keyword">lock</span>()<span class="comment">;</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//不要将获取锁的过程放入try块，若获取锁时发生异常，异常抛出也会导致锁的释放</span></span><br><span class="line">&#125;finally &#123;</span><br><span class="line">    <span class="comment">//保证释放</span></span><br><span class="line">    <span class="keyword">lock</span>.unlock()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第二节-Lock接口源码"><a href="#第二节-Lock接口源码" class="headerlink" title="第二节 Lock接口源码"></a><strong>第二节 Lock接口源码</strong></h2><p>&emsp;Lock是一个接口，它定义了锁获取和释放的基本操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;Lock的API如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190601/201906010102.png" alt="Lock的API"></p><hr><h2 id="第三节-Lock具备synchronized没有的特性"><a href="#第三节-Lock具备synchronized没有的特性" class="headerlink" title="第三节 Lock具备synchronized没有的特性"></a><strong>第三节 Lock具备synchronized没有的特性</strong></h2><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190601/201906010101.png" alt="Lock接口提供的synchronized关键字不具备的主要特性"></p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的并发包中Lock接口相关内容：显式获取和释放锁，Lock接口，Lock所具备的synchronized没有的特性等。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>自学习</title>
    <link href="http://linyishui.top/2019081101.html"/>
    <id>http://linyishui.top/2019081101.html</id>
    <published>2019-08-11T08:23:41.000Z</published>
    <updated>2019-09-16T09:01:45.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要学习锁机制，可能浅学会更加容易一些，但脱离的理论和底层细节，在知识点的理解上面就会有不确定的偏差值，久而久之点和点之间矛盾越来越多，知识也没有了统一性了，所以在回顾锁的应用之前，要先学习一下Java中怎么定义和实现锁这个东西的。</p><p>&emsp;学习一个知识点的时候，习惯上我会先搞清楚几个问题：</p><blockquote><ol><li><strong>为什么我要用这个技术？</strong> </li></ol><p>&emsp;确定学习必要性，理由可以如：当前工作需要，准备面试，个人兴趣等。编程的知识内容太多了，而我们的时间是有限的，所以不管是为了工作还是怎样高效的学习都是很有必要的，还有就是不要急于”跳级”学习，由基础开始由浅到深，身边有很多同学Java基础还未掌握好就开始学架构，分布式，服务集群等，一方面是当前不大可能有工作需要，另一方面是代码量和项目经验没有达到一定程度的情况下，可能不会那么容易的理解这些知识，因人而异吧，请在学习前根据自身情况做好规划，这还是蛮重要的。</p></blockquote><blockquote><ol start="2"><li>我怎么去使用这个技术？</li></ol><p>&emsp;学习一个技术，首先就是要会使用它，就像学数学公式一样，可能你不理解它的原理，也没精力或没能力去推理证明，但对于考试来说可能你只要会用就已经足够了。对于工作也是一样，往往我们学一个技术，要先能把它”跑起来”，然后在固定的场景下我们就可以解决一些问题了，但很多人可能就只停留在这个阶段了。这个程度连”了解xx技术”的水平都还没到，不然面试时可能就全是”用过XX吗？”，可能会是很荒诞的一个场景。</p></blockquote><blockquote><ol start="3"><li>如果有其它可以实现同样功能的技术，他们之间的优缺点是什么？引申一下就是什么场景下用什么技术？</li></ol><p>&emsp;不了解一个知识前，我们肯定是总结不出其优缺点，更别说和其它技术的对比了。但因为开发这类工作的特点，就是进度总是比较赶的，总会遇到陌生的难题，也算是工作和学习的区别之一吧，没有时间给你去闷头弄清楚这个，所以我个人会习惯在深入学习前，先查阅资料了解一下技术的相关背景，然后了解一下前人的使用经验，个人感觉这样会节省很多时间来应付一些比较紧急或不太重要的情况。</p></blockquote><p>&emsp;如果一个知识点能够准确回答以上三个问题，表示我已经基本能够正确的使用这个知识点了，大不了就多花点功夫在测试上嘛，但为了能串联知识，加强记忆，真正的掌握一项技术，在有多余时间和精力的情况下还需要再理解更深层的问题：</p><blockquote><ol><li>这个技术怎么运转的？或者说它的工作流程或工作原理是怎样的？</li></ol><p>&emsp;了解一下技术的每一步执行，弄清楚其底层实现，尝试自己手动实现一下。</p></blockquote><blockquote><ol start="2"><li>为什么会这样设计？</li></ol><p>&emsp;再清楚了技术是怎样运作之后，可以思考一下为什么会这样设计？比如是根据什么样的场景或需求所以这样设计，在怎样的情况下使用可能这样的设计会变得糟糕等。</p></blockquote><blockquote><ol start="3"><li>与其相关的知识点有哪些？</li></ol><p>&emsp;了解了以上内容后，对于单个知识点可以说已经掌握了，知识间都是相互联系的，我们为了方便学习而划分为一个个的学科，一个个的章节，一个个的知识点，当知识间可以串联起来汇聚为知识海后就可以成为我们的核心技能了，这是我目前努力的目标。</p></blockquote><p>&emsp;在工作以后，对于学习一定要有一个深刻的意识，即考虑经济效益，知识是没有边界的，人的精力和时间却是很有限的，我们在学习特别是工作后的学习中一定要做好规划，怎样保持适合自己的学习节奏？既能保持一定的学习频率和强度，利用好时间，又能在自己的职业生涯上实现快速的成长？是一个值得深思熟虑的问题。</p><p>&emsp;对于我来讲，现在的方法就是</p><ol><li>先确立一个目标：在短时间内保持一定深度的质量下快速学完Java后端开发技术栈。</li><li>然后制订一个自己会执行的计划：在工作之中留意知识的整理，并通过实战有一定的认知之后，在工作之余抽时间整理为博客文章，根据记忆曲线定期的回顾所整理的内容。</li><li>在一定的积累之后通过项目开发的方式把知识内容再一次的融入到某个自己的项目中，这个项目没有特定的业务需求，只有技术需求。</li></ol>]]></content>
    
    <summary type="html">
    
      闲谈，不泛用
    
    </summary>
    
      <category term="个人记录" scheme="http://linyishui.top/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="other" scheme="http://linyishui.top/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>线程实际应用</title>
    <link href="http://linyishui.top/2019081001.html"/>
    <id>http://linyishui.top/2019081001.html</id>
    <published>2019-08-10T07:38:35.000Z</published>
    <updated>2019-09-19T08:10:02.310Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="等待超时模式"><a href="#等待超时模式" class="headerlink" title="等待超时模式"></a><strong>等待超时模式</strong></h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a><strong>场景</strong></h2><p>&emsp;调用方法后需要等待一段时间，若时间内可以得到结果，则立即返回结果，否则超时返回默认结果。</p><p>&emsp;等待/通知模式无法做到超时等待，步骤为加锁、条件循环和处理逻辑。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a><strong>内容</strong></h2><p>&emsp;超时则需要添加一个时间段T，所以可以得到等待时间为T，超时的时间节点为nowTime+T。所以在原等待/通知模式上可以加入一个超时处理，在等待返回后判断是否超时即可。</p><p>&emsp;伪代码如下：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对当前对象加锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">long</span> mills) <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">    <span class="keyword">long</span> future = System.currentTimeMills() + mills;</span><br><span class="line">    <span class="keyword">long</span> remaining = mills;</span><br><span class="line">    <span class="comment">//当超时大于0并且result返回值不满足要求</span></span><br><span class="line">    <span class="keyword">while</span> ((result == <span class="keyword">null</span>) &amp;&amp; remaining &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        wait(remaining);</span><br><span class="line">        remaining = future - System.currentTimeMills();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;即使方法执行时间很长，也不会”永久”阻塞调用者，而是会按时返回。</p><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a><strong>数据库连接池</strong></h1><h2 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a><strong>场景</strong></h2><p>&emsp;模拟从连接池中获取、使用和释放连接的过程。而客户端获取连接的过程被设定为等待超时模式。所以在一定时间若无法获取到可用连接，就会返回给客户端null。</p><h2 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a><strong>内容</strong></h2><p>&emsp;ConnectionPool.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接池：通过构造函数初始化连接的最大上限，通过一个双向队列来维护连接，</span></span><br><span class="line"><span class="comment"> * 调用方需要先调用fetchConnection(long)方法来指定在多少毫秒内超时获取连接，</span></span><br><span class="line"><span class="comment"> * 当连接使用完毕后，需要调用releaseConnection(Connection)方法将连接放回线程池。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向队列-维护连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> initialSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(initialSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; initialSize;i++)&#123;</span><br><span class="line">                pool.addLast(ConnectionDriver.createConnection());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (pool)&#123;</span><br><span class="line">                <span class="comment">// 连接释放后需要进行通知，这样其他消费者能够感知到连接池中已经归还了一个连接</span></span><br><span class="line">                pool.addLast(connection);</span><br><span class="line">                pool.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在mills内无法获取到连接，将会返回null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Connection <span class="title">fetchConnection</span><span class="params">(<span class="keyword">long</span> mills)</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (pool)&#123;</span><br><span class="line">            <span class="comment">// 完全超时</span></span><br><span class="line">            <span class="keyword">if</span>(mills &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> (pool.isEmpty())&#123;</span><br><span class="line">                    pool.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">return</span> pool.<span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line">                <span class="keyword">long</span> remaining = mills;</span><br><span class="line">                <span class="keyword">while</span> (pool.isEmpty() &amp;&amp; remaining &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    pool.wait(remaining);</span><br><span class="line">                    remaining = future - System.currentTimeMillis();</span><br><span class="line">                &#125;</span><br><span class="line">                Connection result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(!pool.isEmpty())&#123;</span><br><span class="line">                    result = pool.removeFirst();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;ConnectionDriver.java</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * 通过动态代理实现了Connection接口，代理只实现了在commit方法调用时休眠100毫秒</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConnectionDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public <span class="built_in">Object</span> invoke(<span class="built_in">Object</span> proxy, Method method, <span class="built_in">Object</span>[] args) throws Throwable &#123;</span><br><span class="line">            <span class="keyword">if</span>(method.getName().equals(<span class="string">"commit"</span>))&#123;</span><br><span class="line">                TimeUnit.MICROSECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个Connection的代理，在commit时休眠100毫秒</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">final</span> Connection createConnection()&#123;</span><br><span class="line">        <span class="keyword">return</span> (Connection) Proxy.newProxyInstance(ConnectionDriver.<span class="keyword">class</span>.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123; Connection.<span class="keyword">class</span>&#125;,<span class="keyword">new</span> ConnectionHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;ConnectionPoolTest.java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户端ConnectionRunner获取、使用、最后释放连接的过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ConnectionPoolTest &#123;</span><br><span class="line">    <span class="keyword">static</span> ConnectionPool pool = <span class="keyword">new</span> ConnectionPool(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//保证所有ConnectionRunner能够同时开始</span></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//main线程将会等待所有ConnectionRunner结束后才能继续执行</span></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//线程数量，可以修改线程数量进行观察</span></span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">10</span>;</span><br><span class="line">        end = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">20</span>;</span><br><span class="line">        AtomicInteger got = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        AtomicInteger notGot = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; threadCount;i++)&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ConnectionRunner(<span class="keyword">count</span>,got,notGot),<span class="string">"ConnectionRunnerThread"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        start.countDown();</span><br><span class="line">        end.await();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"total invoke: "</span> + (threadCount * <span class="keyword">count</span>));</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"got connection: "</span> + got);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"not got connection "</span> + notGot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> ConnectionRunner <span class="keyword">implements</span> Runnable&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span>;</span><br><span class="line">        AtomicInteger got;</span><br><span class="line">        AtomicInteger notGot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ConnectionRunner(<span class="keyword">int</span> <span class="keyword">count</span>, AtomicInteger got, AtomicInteger notGot) &#123;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">count</span> = <span class="keyword">count</span>;</span><br><span class="line">            <span class="keyword">this</span>.got = got;</span><br><span class="line">            <span class="keyword">this</span>.notGot = notGot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//从线程池中获取连接，如果1000ms内无法获取到，将会返回null</span></span><br><span class="line">                <span class="comment">//分别统计连接获取的数量got和未获取到的数量notGot</span></span><br><span class="line">                start.await();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">count</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    Connection connection = pool.fetchConnection(<span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            connection.createStatement();</span><br><span class="line">                            connection.commit();</span><br><span class="line">                        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                            pool.releaseConnection(connection);</span><br><span class="line">                            got.incrementAndGet();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        notGot.incrementAndGet();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">count</span>--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            end.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;执行结果如下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total invoke: 200</span><br><span class="line">got connection: 200</span><br><span class="line"><span class="keyword">not</span> got<span class="built_in"> connection </span>0</span><br></pre></td></tr></table></figure><p>&emsp;上述事例中使用了CountDownLatch来确保ConnectionRunnerThread能够同时开始执行，并且在全部执行结束后，才使main线程从等待状态返回。当前设定的场景是10个线程同时运行获取连接池中的连接，通过调节线程数量来观察未获取到连接的情况。线程数、总获取次数、获取到的数量、未获取到的数量以及未获取到的比率，如表所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170157.png" alt="线程数量与连接获取的关系"></p><p>&emsp;从表中的数据统计可以看出，在资源一定的情况下（连接池中的10个连接），随着客户端线程的逐步增加，客户端出现超时无法获取连接的比率不断升高。虽然客户端线程在这种超时获取的模式下会出现连接无法获取的情况，但是它能够保证客户端线程不会一直挂在连接获取的操作上，而是“按时”返回，并告知客户端连接获取出现问题，是系统的一种自我保护机制。数据库连接池的设计也可以复用到其他的资源获取的场景，针对昂贵资源（比如数据库连接）的获取都应该加以超时限制。</p><h1 id="线程池技术及其示例"><a href="#线程池技术及其示例" class="headerlink" title="线程池技术及其示例"></a><strong>线程池技术及其示例</strong></h1><h2 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a><strong>场景</strong></h2><p>&emsp;对于服务端的程序，经常面对的是客户端传入的短小（执行时间短、工作内容较为单一）任务，需要服务端快速处理并返回结果。如果服务端每次接受到一个任务，创建一个线程，然后进行执行，这在原型阶段是个不错的选择，但是面对成千上万的任务递交进服务器时，如果还是采用一个任务一个线程的方式，那么将会创建数以万记的线程，这不是一个好的选择。因为这会使操作系统频繁的进行线程上下文切换，无故增加系统的负载，而线程的创建和消亡都是需要耗费系统资源的，也无疑浪费了系统资源。</p><p>&emsp;线程池技术能够很好地解决这个问题，它预先创建了若干数量的线程，并且不能由用户直接对线程的创建进行控制，在这个前提下重复使用固定或较为固定数目的线程来完成任务的执行。这样做的好处是，一方面，消除了频繁创建和消亡线程的系统资源开销，另一方面，面对过量任务的提交能够平缓的劣化。</p><h2 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a><strong>内容</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 执行一个Job，这个Job需要实现Runnable</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span></span>;</span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 增加工作者线程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">    <span class="comment">// 减少工作者线程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">    <span class="comment">// 得到正在等待执行的任务数量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;客户端可以通过execute(Job)方法将Job提交入线程池执行，而客户端自身不用等待Job的执行完成。除了execute(Job)方法以外，线程池接口提供了增大/减少工作者线程以及关闭线程池的方法。这里工作者线程代表着一个重复执行Job的线程，而每个由客户端提交的Job都将进入到一个工作队列中等待工作者线程的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadPool</span>&lt;<span class="title">Job</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">ThreadPool</span>&lt;<span class="title">Job</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 线程池最大限制数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_WORKER_NUMBERS = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 线程池默认的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WORKER_NUMBERS = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 线程池最小的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_WORKER_NUMBERS    = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 这是一个工作列表，将会向里面插入工作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Job&gt; jobs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 工作者列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Worker&gt; workers = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;Worker&gt;());</span><br><span class="line">    <span class="comment">// 工作者线程的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workerNum = DEFAULT_WORKER_NUMBERS;</span><br><span class="line">    <span class="comment">// 线程编号生成</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong threadNum = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initializeWokers(DEFAULT_WORKER_NUMBERS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadPool</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        workerNum = num &gt; MAX_WORKER_NUMBERS ? MAX_WORKER_NUMBERS : num &lt; MIN_WORKER_NUMBERS ? MIN_WORKER_NUMBERS : num;</span><br><span class="line">        initializeWokers(workerNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Job job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加一个工作，然后进行通知</span></span><br><span class="line">            <span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line">                jobs.addLast(job);</span><br><span class="line">                jobs.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker worker : workers) &#123;</span><br><span class="line">            worker.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWorkers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line">            <span class="comment">// 限制新增的Worker数量不能超过最大值</span></span><br><span class="line">            <span class="keyword">if</span> (num + <span class="keyword">this</span>.workerNum &gt; MAX_WORKER_NUMBERS) &#123;</span><br><span class="line">                num = MAX_WORKER_NUMBERS - <span class="keyword">this</span>.workerNum;</span><br><span class="line">            &#125;</span><br><span class="line">            initializeWokers(num);</span><br><span class="line">            <span class="keyword">this</span>.workerNum += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeWorker</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="keyword">this</span>.workerNum) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"beyond workNum"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 按照给定的数量停止Worker</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; num) &#123;</span><br><span class="line">                Worker worker = workers.get(count);</span><br><span class="line">                <span class="keyword">if</span> (workers.remove(worker)) &#123;</span><br><span class="line">                    worker.shutdown();</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.workerNum -= count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getJobSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobs.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线程工作者</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeWokers</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">            workers.add(worker);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(worker, <span class="string">"ThreadPool-Worker-"</span> + threadNum.            incrementAndGet());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工作者，负责消费任务</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否工作</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span>    running    = <span class="keyword">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                Job job = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (jobs) &#123;</span><br><span class="line">                    <span class="comment">// 如果工作者列表是空的，那么就wait</span></span><br><span class="line">                    <span class="keyword">while</span> (jobs.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            jobs.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                            <span class="comment">// 感知到外部对WorkerThread的中断操作，返回</span></span><br><span class="line">                            Thread.currentThread().interrupt();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 取出一个Job</span></span><br><span class="line">                    job = jobs.removeFirst();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        job.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="comment">// 忽略Job执行中的Exception</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            running = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;从线程池的实现可以看到，当客户端调用execute(Job)方法时，会不断地向任务列表jobs中 添加Job，而每个工作者线程会不断地从jobs上取出一个Job进行执行，当jobs为空时，工作者线程进入等待状态。</p><p>&emsp;添加一个Job后，对工作队列jobs调用了其notify()方法，而不是notifyAll()方法，因为能够 确定有工作者线程被唤醒，这时使用notify()方法将会比notifyAll()方法获得更小的开销（避免将等待队列中的线程全部移动到阻塞队列中）。</p><p>&emsp;可以看到，线程池的本质就是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出工作并执行。当工作队列为空时，所有的工作者线程均等待在工作队列上，当有客户端提交了一个任务之后会通知任意一个工作者线程，随着大量的任务被提交，更多的工作者线程会被唤醒。</p><h1 id="一个基于线程池技术的简单Web服务器"><a href="#一个基于线程池技术的简单Web服务器" class="headerlink" title="一个基于线程池技术的简单Web服务器"></a><strong>一个基于线程池技术的简单Web服务器</strong></h1><h2 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a><strong>场景</strong></h2><p>&emsp;目前的浏览器都支持多线程访问，比如说在请求一个HTML页面的时候，页面中包含的图片资源、样式资源会被浏览器发起并发的获取，这样用户就不会遇到一直等到一个图片完全下载完成才能继续查看文字内容的尴尬情况。</p><p>&emsp;如果Web服务器是单线程的，多线程的浏览器也没有用武之地，因为服务端还是一个请求 一个请求的顺序处理。因此，大部分Web服务器都是支持并发访问的。常用的Java Web服务器，如Tomcat、Jetty，在其处理请求的过程中都使用到了线程池技术。</p><h2 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a><strong>内容</strong></h2><p>&emsp;下面通过使用前一节中的线程池来构造一个简单的Web服务器，这个Web服务器用来处理 HTTP请求，目前只能处理简单的文本和JPG图片内容。这个Web服务器使用main线程不断地接 受客户端Socket的连接，将连接以及请求提交给线程池处理，这样使得Web服务器能够同时处 理多个客户端请求，示例如代码所示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleHttpServer</span> &#123;</span><br><span class="line">    <span class="comment">// 处理HttpRequest的线程池</span></span><br><span class="line">    <span class="keyword">static</span> ThreadPool&lt;HttpRequestHandler&gt; threadPool = <span class="keyword">new</span> DefaultThreadPool&lt;HttpRequestHandler&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// SimpleHttpServer的根路径</span></span><br><span class="line">    <span class="keyword">static</span> String basePath;</span><br><span class="line">    <span class="keyword">static</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="comment">// 服务监听端口</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPort</span>(<span class="params"><span class="keyword">int</span> port</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (port &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            SimpleHttpServer.port = port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBasePath</span>(<span class="params">String basePath</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (basePath != <span class="literal">null</span> &amp;&amp; <span class="keyword">new</span> File(basePath).exists() &amp;&amp; <span class="keyword">new</span> File(basePath).</span><br><span class="line">                isDirectory()) &#123;</span><br><span class="line">            SimpleHttpServer.basePath = basePath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动SimpleHttpServer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span>(<span class="params"></span>) throws Exception </span>&#123;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        Socket socket = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((socket = serverSocket.accept()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 接收一个客户端Socket，生成一个HttpRequestHandler，放入线程池执行</span></span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> HttpRequestHandler(socket));</span><br><span class="line">        &#125;</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">HttpRequestHandler</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HttpRequestHandler</span>(<span class="params">Socket socket</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            String line = <span class="literal">null</span>;</span><br><span class="line">            BufferedReader br = <span class="literal">null</span>;</span><br><span class="line">            BufferedReader reader = <span class="literal">null</span>;</span><br><span class="line">            PrintWriter <span class="keyword">out</span> = <span class="literal">null</span>;</span><br><span class="line">            InputStream <span class="keyword">in</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String header = reader.readLine();</span><br><span class="line">                <span class="comment">// 由相对路径计算出绝对路径</span></span><br><span class="line">                String filePath = basePath + header.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">                <span class="comment">// 如果请求资源的后缀为jpg或者ico，则读取资源并输出</span></span><br><span class="line">                <span class="keyword">if</span> (filePath.endsWith(<span class="string">"jpg"</span>) || filePath.endsWith(<span class="string">"ico"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">                    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((i = <span class="keyword">in</span>.read()) != <span class="number">-1</span>) &#123;</span><br><span class="line">                        baos.write(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">byte</span>[] array = baos.toByteArray();</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"HTTP/1.1 200 OK"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"Server: Molly"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"Content-Type: image/jpeg"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"Content-Length: "</span> + array.length);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">""</span>);</span><br><span class="line">                    socket.getOutputStream().write(array, <span class="number">0</span>, array.length);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath)));</span><br><span class="line">                    <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"HTTP/1.1 200 OK"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"Server: Molly"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">"Content-Type: text/html; charset=UTF-8"</span>);</span><br><span class="line">                    <span class="keyword">out</span>.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">out</span>.println(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">out</span>.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">out</span>.println(<span class="string">"HTTP/1.1 500"</span>);</span><br><span class="line">                <span class="keyword">out</span>.println(<span class="string">""</span>);</span><br><span class="line">                <span class="keyword">out</span>.flush();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                close(br, <span class="keyword">in</span>, reader, <span class="keyword">out</span>, socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭流或者Socket</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params">Closeable... closeables</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closeables != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable closeable : closeables) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    closeable.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;该Web服务器处理用户请求的时序图如图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170158.png" alt="SimpleHttpServer时序图"></p><p>&emsp;在图中，SimpleHttpServer在建立了与客户端的连接之后，并不会处理客户端的请求，而是将其包装成HttpRequestHandler并交由线程池处理。在线程池中的Worker处理客户端请求的同时，SimpleHttpServer能够继续完成后续客户端连接的建立，不会阻塞后续客户端的请求。</p><p>&emsp;接下来，通过一个测试对比来认识线程池技术带来服务器吞吐量的提高。我们准备了一个简单的HTML页面，内容如代码所示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一张图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span>  /&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第二张图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span>  /&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第三张图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span>  /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;将SimpleHttpServer的根目录设定到该HTML页面所在目录，并启动SimpleHttpServer，通过Apache HTTP server benchmarking tool（版本2.3）来测试不同线程数下，SimpleHttpServer的吞吐量表现。</p><p>&emsp;测试场景是5000次请求，分10个线程并发执行，测试内容主要考察响应时间（越小越好）和每秒查询的数量（越高越好），测试结果如表所示（机器CPU：i7-3635QM，内存为 8GB，实际输出可能与此表不同）。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170159.png" alt="测试结果"></p><p>&emsp;可以看到，随着线程池中线程数量的增加，SimpleHttpServer的吞吐量不断增大，响应时间不断变小，线程池的作用非常明显。</p><p>&emsp;但是，线程池中线程数量并不是越多越好，具体的数量需要评估每个任务的处理时间，以及当前计算机的处理器能力和数量。使用的线程过少，无法发挥处理器的性能；使用的线程过多，将会增加系统的无故开销，起到相反的作用。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><p>&emsp;本章从介绍多线程技术带来的好处开始，讲述了如何启动和终止线程以及线程的状态，详细阐述了多线程之间进行通信的基本方式和等待/通知经典范式。在线程应用示例中，使用了等待超时、数据库连接池以及简单线程池3个不同的示例巩固本章前面章节所介绍的Java多线程基础知识。最后通过一个简单的Web服务器将上述知识点串联起来，加深我们对这些知识点的理解。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍线程实际应用：等待超时模式，数据库连接池，线程池技术及其示例，一个基于线程池技术的简单Web服务器。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>线程间通信</title>
    <link href="http://linyishui.top/2019080901.html"/>
    <id>http://linyishui.top/2019080901.html</id>
    <published>2019-08-09T03:26:52.000Z</published>
    <updated>2019-09-10T07:35:14.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a><strong>线程间通信</strong></h1><p>&emsp;线程拥有自己的栈空间，线程并不是孤立的运行，除了公共区域，线程间也要进行协作。</p><h2 id="volatile和synchronized"><a href="#volatile和synchronized" class="headerlink" title="volatile和synchronized"></a><strong>volatile和synchronized</strong></h2><p>&emsp;Java支持多个线程同时访问一个对象或者对象的成员变量，由于各个线程各自拥有拷贝，所以线程看到和处理的变量未必是最新值。</p><p>&emsp;关键字volatile可以保证线程访问变量的可见性，但会降低运行效率。而synchronized关键字保证了线程访问变量的可见性和排他性。</p><p>&emsp;synchronized锁同步块通过monitorenter和monitorexit指令，同步方法则是通过方法修饰符的ACC_SYNCHRONIZED来实现。无论是哪种方法，本质都是获取对象的监视器(monitor)，获取过程是排他的，只有一个线程可以拿到synchronized保护对象的监视器。</p><p>&emsp;更多内容可以参考<a href="../2019040201.html" title="Title">volatile</a>，<a href="../2019032701.html" title="Title">synchronized</a></p><hr><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a><strong>等待/通知机制</strong></h2><p>&emsp;”生产者”线程修改了一个对象的值，”消费者”线程会感知到变化，最简单的实现就是让消费者线程不断地循环检查变量是否符合预期，如下所示。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">while</span> (value != desire)&#123;<span class="comment">//满足条件则跳出循环</span></span><br><span class="line">    <span class="selector-tag">Thread</span><span class="selector-class">.sleep</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">doSomething</span>();</span><br></pre></td></tr></table></figure><p>&emsp;但以上方式存在许多问题：1. 难以保证及时性，睡眠时间过长无法及时发现条件已修改，过短则会进行过多无效的尝试。2. 难以降低开销，通过降低睡眠时间会导致消耗更多的处理器资源。</p><p>&emsp;<strong>等待/通知机制</strong>则有效的解决了上述问题，并设计在Java的Object对象上。</p><p>&emsp;回顾一下Object的notify()和wait()方法。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通知一个在对象上等待的线程，使其从wait()方法返回，返回的前提是该线程已获取了对象的锁</span></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知所有等待在该对象上的线程</span></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用该方法的线程进入WAITING状态，只有等待另外线程的通知或被中断才会返回，在调用此方法后会释放对象的锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    wait(<span class="number">0</span>L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待给定时间后若无通知，则超时返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        timeout++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;<strong>notify()</strong>：唤醒正在监听此对象的监视线程，同时多个线程等待时随机唤醒一个，选择是任意的可以由执行部分来决定，线程通过调用wait()等待对象，在当前线程放弃对象锁之前被唤醒的线程只能继续等待。唤醒的线程将和其它任意线程竞争并没有优先权力。</p><p>&emsp;<strong>wait()</strong> 使当前线程等待，直到它被唤醒，当前线程需要拥有此对象的监视器锁。此方法会将当前线程放入此对象的等待集合中，放弃在此对象上的同步声明(只是此对象的锁)，当线程等待时，所有可以同步此线程的任何其它对象都会保持锁定状态。(因为只能通过synchronized来获取监视器锁，所以这几个方法应该在同步代码块内调用，否则会抛出异常java.lang.IllegalMonitorStateException)</p><p>&emsp;出于线程调度的目的，线程将会被禁用，并处于休眠状态，直到被notify()任意选择中此线程唤醒，或其它线程调用notifyAll()唤醒，或其它线程调用interrupt()中断了当前线程，或指定的等待时间不为0且已到指定时间</p><p>&emsp;等待/通知机制就是指一个线程A调用了对象O的wait()进入等待状态，另一个线程B调用了对象O的notify()或notifyAll()，线程A收到通知后从对象O的wait()返回，进而执行后续操作，两个线程通过对象O作为中介进行交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Thread waitThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Wait(),<span class="string">"WaitThread"</span>);</span><br><span class="line">        waitThread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        Thread notifyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Notify(),<span class="string">"NotifyThread"</span>);</span><br><span class="line">        notifyThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Wait</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//加锁，拥有lock的monitor</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="comment">//当条件不满足时，继续wait，同时释放了lock的锁</span></span><br><span class="line">                <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread() + <span class="string">" flag is true. wait @ "</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//条件满足时，完成工作</span></span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" flag is false. running @ "</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Notify</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//加锁，拥有lock的monitor</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="comment">//获取lock的锁，然后进行通知，通知时不会释放lock的锁</span></span><br><span class="line">                <span class="comment">//直到当前线程释放了lock后，WaitThread才能从wait()中返回</span></span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" hold lock. notify @ "</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                SleepUtils.second(<span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再次加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="comment">//当条件不满足时，继续wait，同时释放了lock的锁</span></span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">" hold lock again. sleep @ "</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">                SleepUtils.second(<span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(<span class="keyword">long</span> seconds)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;运行结果如下。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[WaitThread,5,main]</span> <span class="selector-tag">flag</span> <span class="selector-tag">is</span> <span class="selector-tag">true</span>. <span class="selector-tag">wait</span> @ <span class="selector-tag">18</span><span class="selector-pseudo">:15</span><span class="selector-pseudo">:32</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[NotifyThread,5,main]</span> <span class="selector-tag">hold</span> <span class="selector-tag">lock</span>. <span class="selector-tag">notify</span> @ <span class="selector-tag">18</span><span class="selector-pseudo">:15</span><span class="selector-pseudo">:33</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[NotifyThread,5,main]</span> <span class="selector-tag">hold</span> <span class="selector-tag">lock</span> <span class="selector-tag">again</span>. <span class="selector-tag">sleep</span> @ <span class="selector-tag">18</span><span class="selector-pseudo">:15</span><span class="selector-pseudo">:38</span></span><br><span class="line"><span class="selector-tag">Thread</span><span class="selector-attr">[WaitThread,5,main]</span> <span class="selector-tag">flag</span> <span class="selector-tag">is</span> <span class="selector-tag">false</span>. <span class="selector-tag">running</span> @ <span class="selector-tag">18</span><span class="selector-pseudo">:15</span><span class="selector-pseudo">:43</span></span><br></pre></td></tr></table></figure><ol><li>调用wait()，notify()和notifyAll()时，需要先对调用对象加锁。</li><li>调用wait()后，线程由RUNNING转为WAITING，并将当前线程放置到对象的等待队列。</li><li>notify()和notifyAll()调用后，等待线程依旧不会从wait()返回，需要等调用notify()和notifyAll()的线程释放锁后，等待线程才有机会从wait()返回</li><li>notify()方法将等待队列中的一个等待线程转移到同步队列中，而notifyAll()则将等待队列所有线程转移到同步队列中，被移动的线程状态由WAITING转为BLOCKED。</li><li>从wait()方法返回的前提是获取了调用对象的锁。</li></ol><p>&emsp;等待/通知机制依托于同步机制，目的就是确保等待线程从wait()返回时能够感知到通知线程对变量做出的修改。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170156.png" alt="WaitNotify.java运行过程"></p><p>&emsp;WaitThread线程和NotifyThread线程模拟了线程间等待通知机制流程，WaitThread首先获取了对象的锁，然后调用了对象的wait()方法，从而放弃锁并进入对象的等待队列WaitQueue中，进入等待状态。由于WaitThread释放了对象的锁，NotifyThread随后获取了对象的锁，并调用对象的notify()方法，将WaitThread从WaitQueue移到SynchronizedQueue中，此时WaitThread的状态变为阻塞状态。NotifyThread释放了锁之后，WaitThread再次获取到锁并从wait()方法返回继续执行。</p><hr><h2 id="等待-通知机制的经典范式"><a href="#等待-通知机制的经典范式" class="headerlink" title="等待/通知机制的经典范式"></a><strong>等待/通知机制的经典范式</strong></h2><h3 id="等待方-消费者"><a href="#等待方-消费者" class="headerlink" title="等待方-消费者"></a><strong>等待方-消费者</strong></h3><blockquote><p>遵守如下原则</p><ol><li>获取对象的锁。</li><li>如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件。</li><li>条件满足则执行对应的逻辑。</li></ol></blockquote><p>&emsp;伪代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">synchronized</span>(对象)&#123;</span><br><span class="line">    <span class="selector-tag">while</span>(条件不满足)&#123;</span><br><span class="line">        对象<span class="selector-class">.wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    对应的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通知方-生产者"><a href="#通知方-生产者" class="headerlink" title="通知方-生产者"></a><strong>通知方-生产者</strong></h3><blockquote><p>遵守如下原则</p><ol><li>获取对象的锁。</li><li>改变条件。</li><li>通知所有等待在对象上的线程。</li></ol></blockquote><p>&emsp;伪代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">synchronized</span>(对象)&#123;</span><br><span class="line">    改变条件</span><br><span class="line">    对象<span class="selector-class">.notifyAll</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="管道输入-输出流"><a href="#管道输入-输出流" class="headerlink" title="管道输入/输出流"></a><strong>管道输入/输出流</strong></h2><p>&emsp;管道输入/输出流和文件输入/输出流或者网络输入/输出流的不同在于它主要用于线程之间的数据传输，传输的媒介为内存。</p><ol><li>PipedOutputStream 面向字节</li><li>PipedInputStream 面向字节</li><li>PipedReader 面向字符</li><li>PipedWriter 面向字符</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Piped</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)throws Exception</span>&#123;</span><br><span class="line">        PipedWriter <span class="keyword">out</span> = <span class="keyword">new</span> PipedWriter();</span><br><span class="line">        PipedReader <span class="keyword">in</span> = <span class="keyword">new</span> PipedReader();</span><br><span class="line">        <span class="comment">//将输入输出流进行连接，否则在使用时会抛出IOException</span></span><br><span class="line">        <span class="keyword">out</span>.connect(<span class="keyword">in</span>);</span><br><span class="line">        Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Print(<span class="keyword">in</span>),<span class="string">"PrintThread"</span>);</span><br><span class="line">        printThread.start();</span><br><span class="line">        <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((receive = System.<span class="keyword">in</span>.read()) != <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">out</span>.write(receive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">out</span>.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Print</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> PipedReader <span class="keyword">in</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Print</span>(<span class="params">PipedReader <span class="keyword">in</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">in</span> = <span class="keyword">in</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((receive = <span class="keyword">in</span>.read()) != <span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="comment">//char转asc码</span></span><br><span class="line">                    System.<span class="keyword">out</span>.print((<span class="keyword">char</span>) receive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;运行结果如下。main线程接收console的输入字符串，通过PipedWriter写入，然后PrintThread则通过PipedReader读出内容并打印。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">test </span>word</span><br><span class="line"><span class="keyword">test </span>word</span><br><span class="line">ok ok ok</span><br><span class="line">ok ok ok</span><br></pre></td></tr></table></figure><hr><h2 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h2><p>&emsp;当有线程A执行了thread.join()，表示线程A需要等待thread线程终止后才能从join()返回。等待前驱线程结束，接收前驱线程的结束通知即等待通知机制。</p><p>&emsp;更多内容请参考<a href="../2019051301.html" title="Title">Thread类源码剖析</a></p><hr><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a><strong>ThreadLocal</strong></h2><p>&emsp;ThreadLocal，即线程变量，以ThreadLocal为键、以任意对象为值得存储结构。所以可以根据ThreadLocal给线程绑定值。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Profiler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一次get()调用会进行初始化(若没有调用set())，每个线程会调用一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; TIME_THREADLOCAL = <span class="keyword">new</span> ThreadLocal&lt;Long&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="function">Long <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> System.<span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TIME_THREADLOCAL.set(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="function"><span class="keyword">long</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - TIME_THREADLOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Profiler.begin();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"Cost: "</span> + Profiler.end() + <span class="string">" mills"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;运行结果如下。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Cost:</span> <span class="number">2001</span> mills</span><br></pre></td></tr></table></figure><p>&emsp;Profiler可以用来计算函数耗时，在函数调用前执行begin()，调用后执行end()，而且两次调用不用再一个方法或类内，比如AOP编程中，在调用前切入点执行begin()，在调用后切入点执行end()。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍线程间通信：volatile和synchronized，等待/通知机制，经典范式，管道输入/输出流，join()，ThreadLocal等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题</title>
    <link href="http://linyishui.top/2019080801.html"/>
    <id>http://linyishui.top/2019080801.html</id>
    <published>2019-08-08T08:46:54.000Z</published>
    <updated>2019-08-29T03:10:52.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="跨域问题的来源"><a href="#跨域问题的来源" class="headerlink" title="跨域问题的来源"></a><strong>跨域问题的来源</strong></h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h2><p>&emsp;浏览器的<strong>同源策略</strong>，对不同源的文档或脚本间交互进行了限制，是为了隔离恶意访问而设计的安全机制。</p><p>&emsp;如果两个页面的协议、端口和主机都相同，则两个页面具有相同的源。</p><blockquote><p>同源策略：</p><ol><li>通常允许跨域写操作（Cross-origin writes）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</li><li>通常允许跨域资源嵌入（Cross-origin embedding）。</li><li>通常不允许跨域读操作（Cross-origin reads）。但常可以通过内嵌资源来巧妙的进行读取访问。例如可以读取嵌入图片的高度和宽度，调用内嵌脚本的方法，或availability of an embedded resource.</li></ol></blockquote><h2 id="为什么要限制不同源交互？"><a href="#为什么要限制不同源交互？" class="headerlink" title="为什么要限制不同源交互？"></a><strong>为什么要限制不同源交互？</strong></h2><p>&emsp;我们在实现登陆流程时曾使用过Cookie，在验证用户密码后会在响应头上添加Set-Cookie字段返回Token，在之后的通信中浏览器会携带此Cookie，来标识请求用户。假设用户登陆了A网站，收到了令牌，然后又登陆了伪装的B网站，B网站通过伪造界面的方式，误导用户点击后发送给A站请求，即我们熟悉的<strong>CSRF-跨站请求伪造攻击</strong>(<a href="../2019052201.html" title="Title">常见的安全漏洞和攻击方式</a>)。</p><hr><h1 id="如何允许跨源访问"><a href="#如何允许跨源访问" class="headerlink" title="如何允许跨源访问"></a><strong>如何允许跨源访问</strong></h1><h2 id="使用CORS允许跨源访问"><a href="#使用CORS允许跨源访问" class="headerlink" title="使用CORS允许跨源访问"></a><strong>使用CORS允许跨源访问</strong></h2><blockquote><p>&emsp;<strong>跨域资源共享</strong>(CORS：Cross-origin resource sharing)机制允许Web应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。现代浏览器支持在API容器中（例如XMLHttpRequest或Fetch）使用CORS，以降低跨域HTTP请求所带来的风险。</p></blockquote><blockquote><p>&emsp;<strong>CORS</strong>是一种机制，它使用额外的HTTP头来告诉浏览器，让运行在一个origin (domain)上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP请求。</p></blockquote><blockquote><p>&emsp;比如，站点<a href="http://domain-a.com的某HTML页面通过" target="_blank" rel="noopener">http://domain-a.com的某HTML页面通过</a> <img> 的 src 请求 <a href="http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。" target="_blank" rel="noopener">http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。</a></p></blockquote><blockquote><p>&emsp;浏览器的同源策略限制从脚本内发起的跨源HTTP请求。例如，XMLHttpRequest和Fetch API遵循同源策略。这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。(这段描述不准确，并不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了。)</p></blockquote><h2 id="CORS功能概述"><a href="#CORS功能概述" class="headerlink" title="CORS功能概述"></a><strong>CORS功能概述</strong></h2><blockquote><p>&emsp;跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP请求方法（特别是GET以外的HTTP请求，或者搭配某些MIME类型的POST请求），浏览器必须首先使用OPTIONS方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的HTTP请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括Cookies和HTTP认证相关数据）。</p></blockquote><blockquote><p>&emsp;CORS请求失败会产生错误，但是为了安全，在JavaScript代码层面是无法获知到底具体是哪里出了问题。你只能查看浏览器的控制台以得知具体是哪里出现了错误。</p></blockquote><p>&emsp;更多内容可以参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" title="Title" target="_blank" rel="noopener">HTTP访问控制（CORS）</a></p><hr><h1 id="如何阻止跨源访问"><a href="#如何阻止跨源访问" class="headerlink" title="如何阻止跨源访问"></a><strong>如何阻止跨源访问</strong></h1><blockquote><ol><li>阻止跨域写操作，只要检测请求中的一个不可测的标记(CSRF token)即可，这个标记被称为Cross-Site Request Forgery (CSRF) 标记。必须使用这个标记来阻止页面的跨站读操作。</li><li>阻止资源的跨站读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</li><li>阻止跨站嵌入，需要确保你的资源不能是以上列出的可嵌入资源格式。多数情况下浏览器都不会遵守 Content-Type 消息头。例如，如果您在HTML文档中指定&lt; script &gt;标记，则浏览器将尝试将HTML解析为JavaScript。 当您的资源不是您网站的入口点时，您还可以使用CSRF令牌来防止嵌入。</li></ol></blockquote><p><strong>跨源数据存储访问</strong></p><blockquote><p>&emsp;存储在浏览器中的数据，如localStorage和IndexedDB，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的Javascript脚本不能对属于其它源的数据进行读写操作。</p></blockquote><blockquote><p>&emsp;Cookies 使用不同的源定义方式。一个页面可以为本域和任何父域设置cookie，只要是父域不是公共后缀（public suffix）即可。Firefox 和 Chrome 使用 Public Suffix List 决定一个域是否是一个公共后缀（public suffix）。Internet Explorer使用其自己的内部方法来确定域是否是公共后缀。不管使用哪个协议（HTTP/HTTPS）或端口号，浏览器都允许给定的域以及其任何子域名(sub-domains) 访问 cookie。设置 cookie 时，你可以使用Domain，Path，Secure，和Http-Only标记来限定其访问性。读取 cookie 时，不会知晓它的出处。 即使您仅使用安全的https连接，您看到的任何cookie都可能使用不安全的连接进行设置。</p></blockquote><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" title="Title" target="_blank" rel="noopener">HTTP访问控制（CORS）</a></p></blockquote><blockquote><p><a href="https://segmentfault.com/a/1190000015597029?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015597029?utm_source=tag-newest</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/25778815" title="Title" target="_blank" rel="noopener">关于跨域，你想知道的全在这里</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/66484450" title="Title" target="_blank" rel="noopener">一文搞懂跨域的所有问题</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      跨域问题的来源，同源策略，CORS等。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="web" scheme="http://linyishui.top/tags/web/"/>
    
      <category term="security" scheme="http://linyishui.top/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>单点登录</title>
    <link href="http://linyishui.top/2019080701.html"/>
    <id>http://linyishui.top/2019080701.html</id>
    <published>2019-08-07T08:46:47.000Z</published>
    <updated>2019-08-29T09:57:22.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h1><h2 id="HTTP无状态协议"><a href="#HTTP无状态协议" class="headerlink" title="HTTP无状态协议"></a><strong>HTTP无状态协议</strong></h2><p>&emsp;Web应用采用B/S架构，HTTP作为通信协议。HTTP是无状态协议，所以浏览器的每一次请求，服务器都会做独立处理，请求之间没有任何关联。</p><p>&emsp;所以任何用户都可以通过浏览器来访问服务器资源，为了提高服务器安全性，必然要对访问者进行鉴别，响应合法请求，拦截非法请求。</p><p>&emsp;而HTTP协议无状态，就需要浏览器和服务器共同维护对话的状态，即会话机制。</p><h2 id="会话机制"><a href="#会话机制" class="headerlink" title="会话机制"></a><strong>会话机制</strong></h2><p>&emsp;浏览器首次请求服务器，服务器会创建一个会话，并将生成的会话ID通过响应返回给浏览器，浏览器收到后存储在客户端，并在之后的请求中携带会话ID，服务器就可以根据会话ID来判断请求者的身份。一般浏览器通过cookie来存储会话ID，发送HTTP请求自动携带cookie信息。如Tomcat应用服务器，会生成jsessionid的cookie信息，即会话ID。</p><h2 id="用户登录状态"><a href="#用户登录状态" class="headerlink" title="用户登录状态"></a><strong>用户登录状态</strong></h2><p>&emsp;当浏览器和服务器之间实现了会话机制，就可以维护用户的登陆状态，通过引入登陆机制，密码验证等技术，来保证通信的安全性。</p><h2 id="多系统"><a href="#多系统" class="headerlink" title="多系统"></a><strong>多系统</strong></h2><p>&emsp;Web网站系统由单系统发展为多系统组成的应用群，用户不应该一次次的登陆每一个子系统，系统本身复杂性越来越高，但对用户应该保持其简洁性，所以单点登陆的实现有其必要性。但单系统的登陆方案对于多系统来讲并不是很合适，单系统登陆的核心是cookie，而cookie会限制域，浏览器发出请求时只会携带对应域的cookie，所以最初的多系统登陆采用了统一顶级域名的放啊，将cookie域设置为最顶层的域名。但共享cookie有其弊端，首先所有系统域名要统一，然后各系统Web技术要相同，会话ID要统一管理，共享cookie无法实现跨语言平台，还有cookie本身不安全。</p><hr><h1 id="单点登陆"><a href="#单点登陆" class="headerlink" title="单点登陆"></a><strong>单点登陆</strong></h1><p>&emsp;单点登陆，即Single Sign On，简称SSO。实现了登陆一次即可获取系统集的授权，跨系统无需再次登陆。</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a><strong>登陆</strong></h2><p>&emsp;SSO需要一个独立的认证中心，认证中心担负了系统群的登陆模块，其他系统只需获取认证中心的间接授权。间接授权通过令牌Token来实现，当SSO认证中心完成用户登陆，创建全局会话和授权Token，在之后的跳转过程中将Token发送给子系统，子系统获取Token可以凭此创建局部会话，局部会话的登陆方式和单系统相同。</p><p>–单点登陆授权验证流程</p><p>&emsp;用户分别和SSO认证中心和各子系统建立会话，与认证中心创建全局会话，与各子系统创建局部会话。</p><p>&emsp;观察淘宝，京东等网站的登陆过程，跳转URL和参数。</p><h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a><strong>注销</strong></h2><p>&emsp;子系统注销，会向认证中心发送注销请求，认证中心检查Token合法后，销毁全局会话，取出所有用此令牌注册的系统地址，向所有系统发送注销请求，子系统收到请求后销毁局部会话，最后SSO认证中心引导用户到登陆界面。</p><h2 id="系统间通信"><a href="#系统间通信" class="headerlink" title="系统间通信"></a><strong>系统间通信</strong></h2><p>&emsp;认证中心和子系统需要相互通信来交换令牌，校验令牌以及发起注销请求，所以子系统需要集成SSO的客户端，而SSO认证中心则部署服务端，单点登陆过程即客户端和服务端的通信过程。sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以</p><hr><h1 id="单点登陆实现"><a href="#单点登陆实现" class="headerlink" title="单点登陆实现"></a><strong>单点登陆实现</strong></h1><p>&emsp;只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）</p><blockquote><p>客户端sso-client要实现的功能</p><ol><li>拦截子系统未登录用户请求，跳转至sso认证中心</li><li>接收并存储sso认证中心发送的令牌</li><li>与sso-server通信，校验令牌的有效性</li><li>建立局部会话</li><li>拦截用户注销请求，向sso认证中心发送注销请求</li><li>接收sso认证中心发出的注销请求，销毁局部会话</li></ol></blockquote><blockquote><p>服务端sso-server要实现的功能</p><ol><li>验证用户的登录信息</li><li>创建全局会话</li><li>创建授权令牌</li><li>与sso-client通信发送令牌</li><li>校验sso-client令牌有效性</li><li>系统注册</li><li>接收sso-client注销请求，注销所有会话</li></ol></blockquote><h3 id="一、sso-client拦截未登录请求"><a href="#一、sso-client拦截未登录请求" class="headerlink" title="一、sso-client拦截未登录请求"></a><strong>一、sso-client拦截未登录请求</strong></h3><p>&emsp;java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">   HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">   HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">   HttpSession session = req.getSession();</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (session.getAttribute(<span class="string">"isLogin"</span>)) &#123;</span><br><span class="line">       chain.doFilter(request, response);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//跳转至sso认证中心</span></span><br><span class="line">   res.sendRedirect(<span class="string">"sso-server-url-with-system-url"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、sso-server拦截未登录请求"><a href="#二、sso-server拦截未登录请求" class="headerlink" title="二、sso-server拦截未登录请求"></a><strong>二、sso-server拦截未登录请求</strong></h3><p>&emsp;拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样</p><h3 id="三、sso-server验证用户登录信息"><a href="#三、sso-server验证用户登录信息" class="headerlink" title="三、sso-server验证用户登录信息"></a><strong>三、sso-server验证用户登录信息</strong></h3><p>&emsp;用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/login"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String login(String username, String password, HttpServletRequest req) &#123;</span><br><span class="line">   <span class="keyword">this</span>.checkLoginInfo(username, password);</span><br><span class="line">   req.getSession().setAttribute(<span class="string">"isLogin"</span>, <span class="literal">true</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、sso-server创建授权令牌"><a href="#四、sso-server创建授权令牌" class="headerlink" title="四、sso-server创建授权令牌"></a><strong>四、sso-server创建授权令牌</strong></h3><p>&emsp;授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">String token</span> = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure><h3 id="五、sso-client取得令牌并校验"><a href="#五、sso-client取得令牌并校验" class="headerlink" title="五、sso-client取得令牌并校验"></a><strong>五、sso-client取得令牌并校验</strong></h3><p>&emsp;sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求附带token参数</span></span><br><span class="line"><span class="keyword">String</span> <span class="built_in">token</span> = req.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">token</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">   <span class="comment">// 去sso认证中心校验token</span></span><br><span class="line">   boolean verifyResult = this.verify(<span class="string">"sso-server-verify-url"</span>, <span class="built_in">token</span>);</span><br><span class="line">   <span class="keyword">if</span> (!verifyResult) &#123;</span><br><span class="line">       res.sendRedirect(<span class="string">"sso-server-url"</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HttpPost httpPost</span> = new HttpPost(<span class="string">"sso-server-verify-url-with-token"</span>);</span><br><span class="line"><span class="attribute">HttpResponse httpResponse</span> = httpClient.execute(httpPost);</span><br></pre></td></tr></table></figure><h3 id="六、sso-server接收并处理校验令牌请求"><a href="#六、sso-server接收并处理校验令牌请求" class="headerlink" title="六、sso-server接收并处理校验令牌请求"></a><strong>六、sso-server接收并处理校验令牌请求</strong></h3><p>&emsp;用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）</p><p>&emsp;令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。</p><p>&emsp;令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话</p><h3 id="七、sso-client校验令牌成功创建局部会话"><a href="#七、sso-client校验令牌成功创建局部会话" class="headerlink" title="七、sso-client校验令牌成功创建局部会话"></a><strong>七、sso-client校验令牌成功创建局部会话</strong></h3><p>&emsp;令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (verifyResult) &#123;</span><br><span class="line">   session.setAttribute(<span class="string">"isLogin"</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求</p><h3 id="八、注销过程"><a href="#八、注销过程" class="headerlink" title="八、注销过程"></a><strong>八、注销过程</strong></h3><p>&emsp;用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> logout = req.getParameter(<span class="string">"logout"</span>);</span><br><span class="line"><span class="keyword">if</span> (logout != <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="keyword">this</span>.ssoServer.logout(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/logout"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String logout(HttpServletRequest req) &#123;</span><br><span class="line">   HttpSession session = req.getSession();</span><br><span class="line">   <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">       session.invalidate();<span class="comment">//触发LogoutListener</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">LogoutListener</span> <span class="selector-tag">implements</span> <span class="selector-tag">HttpSessionListener</span> &#123;</span><br><span class="line">   <span class="variable">@Override</span></span><br><span class="line">   public void sessionCreated(HttpSessionEvent event) &#123;&#125;</span><br><span class="line">   <span class="variable">@Override</span></span><br><span class="line">   public void sessionDestroyed(HttpSessionEvent event) &#123;</span><br><span class="line">       <span class="comment">//通过httpClient向所有注册系统发送注销请求</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a><strong>CAS</strong></h1><h2 id="基于CAS-Spring-Boot实现客户端"><a href="#基于CAS-Spring-Boot实现客户端" class="headerlink" title="基于CAS+Spring Boot实现客户端"></a><strong>基于CAS+Spring Boot实现客户端</strong></h2><ol><li><p>新建Spring Boot项目</p></li><li><p>pom.xml添加依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.jasig.cas.client/cas-client-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>application.properties添加配置</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">casServerUrlPrefix=<span class="string">https:</span><span class="comment">//xxxx/authserver/</span></span><br><span class="line">casServerLoginUrl=<span class="string">https:</span><span class="comment">//xxxx/authserver/login</span></span><br><span class="line">serverName=<span class="string">http:</span><span class="comment">//xxxx:8080/</span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加配置类CasConfig.java</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasConfig</span> </span>&#123;</span><br><span class="line">    @Value(<span class="string">"$&#123;casServerUrlPrefix&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> casServerUrlPrefix;</span><br><span class="line">    @Value(<span class="string">"$&#123;casServerLoginUrl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> casServerLoginUrl;</span><br><span class="line">    @Value(<span class="string">"$&#123;serverName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> serverName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于单点退出，该监听器用于实现单点登出功能</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> SingleSignOutHttpSessionListener singleSignOutHttpSessionListener()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SingleSignOutHttpSessionListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该过滤器用于实现单点登出功能</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean singleSignOutFilter() &#123;</span><br><span class="line">        FilterRegistrationBean singleSignOutFilter = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</span><br><span class="line">        singleSignOutFilter.setFilter(<span class="keyword">new</span> <span class="type">SingleSignOutFilter</span>());</span><br><span class="line">        singleSignOutFilter.setName(<span class="string">"singleSignOutFilter"</span>);</span><br><span class="line">        singleSignOutFilter.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; initParameters = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerLoginUrl"</span>, casServerLoginUrl);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, serverName);</span><br><span class="line">        singleSignOutFilter.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> singleSignOutFilter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册authenticationFilter，该过滤器负责用户的认证工作</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean authenticationFilter() &#123;</span><br><span class="line">        FilterRegistrationBean authenticationFilter = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</span><br><span class="line">        authenticationFilter.setFilter(<span class="keyword">new</span> <span class="type">AuthenticationFilter</span>());</span><br><span class="line">        authenticationFilter.setName(<span class="string">"authenticationFilter"</span>);</span><br><span class="line">        authenticationFilter.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; initParameters = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerLoginUrl"</span>, casServerLoginUrl);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, serverName);</span><br><span class="line">        authenticationFilter.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该过滤器负责对Ticket的校验工作</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean validationFilter()&#123;</span><br><span class="line">        FilterRegistrationBean validationFilter = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</span><br><span class="line">        validationFilter.setFilter(<span class="keyword">new</span> <span class="type">Cas20ProxyReceivingTicketValidationFilter</span>());</span><br><span class="line">        validationFilter.setName(<span class="string">"validationFilter"</span>);</span><br><span class="line">        validationFilter.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; initParameters = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerUrlPrefix"</span>, casServerUrlPrefix);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, serverName);</span><br><span class="line">        initParameters.put(<span class="string">"encoding"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        validationFilter.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> validationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean httpServletRequestWrapperFilter() &#123;</span><br><span class="line">        FilterRegistrationBean httpServletRequestWrapperFilter = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</span><br><span class="line">        httpServletRequestWrapperFilter.setFilter(<span class="keyword">new</span> <span class="type">HttpServletRequestWrapperFilter</span>());</span><br><span class="line">        httpServletRequestWrapperFilter.setName(<span class="string">"httpServletRequestWrapperFilter"</span>);</span><br><span class="line">        httpServletRequestWrapperFilter.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; initParameters = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerLoginUrl"</span>, casServerLoginUrl);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, serverName);</span><br><span class="line">        httpServletRequestWrapperFilter.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> httpServletRequestWrapperFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>启动项目，测试并观察结果</p></li><li><p>获取用户信息</p></li><li><p>退出登录</p></li><li><p>获取Server SSL证书</p></li></ol><h2 id="基于CAS-Pa4j-Spring-Boot-Shiro实现单点登录"><a href="#基于CAS-Pa4j-Spring-Boot-Shiro实现单点登录" class="headerlink" title="基于CAS+Pa4j+Spring Boot+Shiro实现单点登录"></a><strong>基于CAS+Pa4j+Spring Boot+Shiro实现单点登录</strong></h2><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://www.zhihu.com/question/342103776/answer/798611224" title="Title" target="_blank" rel="noopener">现在用的比较多的单点登录技术是什么</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      跨域问题的来源，同源策略，CORS等。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="security" scheme="http://linyishui.top/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Future接口，常见的线程池中的FutureTask实现</title>
    <link href="http://linyishui.top/2019080601.html"/>
    <id>http://linyishui.top/2019080601.html</id>
    <published>2019-08-06T13:28:03.000Z</published>
    <updated>2019-09-10T03:24:04.124Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a><strong>Callable</strong></h1><p>&emsp;&emsp;Callable是一个函数式接口，声明了call()函数，和run()的区别就是会返回具体的结果，且可以抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算结果并返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a><strong>Future</strong></h1><p>&emsp;&emsp;Callable的返回值由Future接口获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试取消执行此任务，若任务已完成、已取消或其他原因无法取消则此尝试失败。若执行成功，且执行时任务尚未启动，则此任务不会再运行。若任务已启动，则mayInterruptIfRunning来决定是否中断其执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若任务在正常完成前被取消则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若任务执行完毕则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待计算完成，并返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待最多指定的时间来完成计算，返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Future的get()方法是阻塞性的，当计算尚未结束时get()方法会一直阻塞，所以就导致了排队等待，严重的影响到运行效率。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置此Future为计算结果，除非被取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a><strong>FutureTask</strong></h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可被取消的异步运算</span></span><br><span class="line"><span class="comment"> * 此类为接口Future的实现类，实现了启动和取消计算，查询计算是否完成以及查询计算结果等方法。</span></span><br><span class="line"><span class="comment"> * 只有在计算完成后才能检索结果，在此之前get()会一直阻塞。计算完成后无法重新启动或者取消计算。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FutureTask&lt;V&gt; <span class="keyword">implements</span> RunnableFuture&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 修订说明：当前与该类以前依赖AbstractQueuedSynchronizer的版本不同，主要是为了避免在取消竞争期间保留中断状态使用户觉得诧异。当前设计中的同步控制依赖于通过CAS更新的“状态”字段来跟踪完成情况，以及一个简单的treiber堆栈来保存等待的线程。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 样式说明：和往常一样，我们绕过使用atomicxfieldupdater的开销，而是直接使用不安全的内部函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前任务的执行状态，初始为NEW.  只会在set,setException,cancel中转为终止状态，</span></span><br><span class="line"><span class="comment">     * 在过程中可能会有临时的状态：</span></span><br><span class="line"><span class="comment">     *   COMPLETING (在设置结果时) 和 INTERRUPTING (仅在中断程序以便cancel(true)时)</span></span><br><span class="line"><span class="comment">     * 这些状态转变采用比较廉价的ordered/lazy写入，因为这些值都是唯一的，无法被修改。</span></span><br><span class="line"><span class="comment">     * 可能发生的状态转换:</span></span><br><span class="line"><span class="comment">     * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class="line"><span class="comment">     * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class="line"><span class="comment">     * NEW -&gt; CANCELLED</span></span><br><span class="line"><span class="comment">     * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">NEW</span>          = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 底层可调用，运行后为null */</span></span><br><span class="line">    <span class="keyword">private</span> Callable&lt;V&gt; callable;</span><br><span class="line">    <span class="comment">/** 返回的结果或get()抛出的异常 */</span></span><br><span class="line">    <span class="keyword">private</span> Object outcome; <span class="comment">// non-volatile, protected by state reads/writes</span></span><br><span class="line">    <span class="comment">/** 运行callable的thread，在run()进行了CAS */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Thread runner;</span><br><span class="line">    <span class="comment">/** 等待线程的treiber堆栈 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> WaitNode waiters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回已完成任务的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> V report(<span class="keyword">int</span> s) <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">        Object x = outcome;</span><br><span class="line">        <span class="keyword">if</span> (s == NORMAL)</span><br><span class="line">            <span class="keyword">return</span> (V)x;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= CANCELLED)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException((Throwable)x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建FutureTask&#125;在运行时执行给定的Callable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> FutureTask(Callable&lt;V&gt; callable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.callable = callable;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">NEW</span>;       <span class="comment">// 确保callable的可见性</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建FutureTask&#125;在运行时执行给定的Callable，并在get()成功结束后返回给定的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> FutureTask(Runnable runnable, V result) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">NEW</span>;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isCancelled() &#123;</span><br><span class="line">        <span class="keyword">return</span> state &gt;= CANCELLED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isDone() &#123;</span><br><span class="line">        <span class="keyword">return</span> state != <span class="keyword">NEW</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> cancel(<span class="keyword">boolean</span> mayInterruptIfRunning) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(state == <span class="keyword">NEW</span> &amp;&amp;</span><br><span class="line">              UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, <span class="keyword">NEW</span>,</span><br><span class="line">                  mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;    <span class="comment">// in case call to interrupt throws exception</span></span><br><span class="line">            <span class="keyword">if</span> (mayInterruptIfRunning) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread t = runner;</span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                        t.interrupt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123; <span class="comment">// final state</span></span><br><span class="line">                    UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, INTERRUPTED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            finishCompletion();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V get() <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &lt;= COMPLETING)</span><br><span class="line">            s = awaitDone(<span class="keyword">false</span>, <span class="number">0</span>L);</span><br><span class="line">        <span class="keyword">return</span> report(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V get(<span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">        <span class="keyword">if</span> (unit == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &lt;= COMPLETING &amp;&amp;</span><br><span class="line">            (s = awaitDone(<span class="keyword">true</span>, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">        <span class="keyword">return</span> report(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当任务转换为状态isDone(正常流程或cancel()取消)时调用此方法，默认实现什么也不做，子类可以重写此函数来进行回调或执行记录。</span></span><br><span class="line"><span class="comment">     * 可以在函数内查询当前状态，来确定是否已取消此任务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> done() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置future的结果为给定值，除非此future已被set或已被cancel</span></span><br><span class="line"><span class="comment">     * 此方法会在完成计算后被run()内部调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> set(V v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, <span class="keyword">NEW</span>, COMPLETING)) &#123;</span><br><span class="line">            outcome = v;</span><br><span class="line">            UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, NORMAL); <span class="comment">// final state</span></span><br><span class="line">            finishCompletion();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使此future声明一个ExecutionException，并将给定的Throwable作为原因，除非此future已被set或已被cancel</span></span><br><span class="line"><span class="comment">     * 此方法会在完成计算失败时被run()内部调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> setException(Throwable t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, <span class="keyword">NEW</span>, COMPLETING)) &#123;</span><br><span class="line">            outcome = t;</span><br><span class="line">            UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, EXCEPTIONAL); <span class="comment">// final state</span></span><br><span class="line">            finishCompletion();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="keyword">NEW</span> ||</span><br><span class="line">            !UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, runnerOffset,</span><br><span class="line">                                         <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Callable&lt;V&gt; c = callable;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == <span class="keyword">NEW</span>) &#123;</span><br><span class="line">                V result;</span><br><span class="line">                <span class="keyword">boolean</span> ran;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = c.<span class="keyword">call</span>();</span><br><span class="line">                    ran = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    result = <span class="keyword">null</span>;</span><br><span class="line">                    ran = <span class="keyword">false</span>;</span><br><span class="line">                    setException(ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ran)</span><br><span class="line">                    set(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">            <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">            runner = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">            <span class="comment">// leaked interrupts</span></span><br><span class="line">            <span class="keyword">int</span> s = state;</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">                handlePossibleCancellationInterrupt(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在不设置结果的情况下进行计算，然后将此future设置为初始状态。若计算遇到异常或被cancel，则无法执行此操作。</span></span><br><span class="line"><span class="comment">     * 为了同本质上会执行多次的任务一起执行而设计，成功运行并重置则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> runAndReset() &#123;</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="keyword">NEW</span> ||</span><br><span class="line">            !UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, runnerOffset,</span><br><span class="line">                                         <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ran = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Callable&lt;V&gt; c = callable;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; s == <span class="keyword">NEW</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.<span class="keyword">call</span>(); <span class="comment">// don't set result</span></span><br><span class="line">                    ran = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    setException(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">            <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">            runner = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">            <span class="comment">// leaked interrupts</span></span><br><span class="line">            s = state;</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">                handlePossibleCancellationInterrupt(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ran &amp;&amp; s == <span class="keyword">NEW</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确保来自cancel(true)的任意中断只有在运行或运行和重置时才能传递给任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> handlePossibleCancellationInterrupt(<span class="keyword">int</span> s) &#123;</span><br><span class="line">        <span class="comment">// It is possible for our interrupter to stall before getting a</span></span><br><span class="line">        <span class="comment">// chance to interrupt us.  Let's spin-wait patiently.</span></span><br><span class="line">        <span class="keyword">if</span> (s == INTERRUPTING)</span><br><span class="line">            <span class="keyword">while</span> (state == INTERRUPTING)</span><br><span class="line">                Thread.yield(); <span class="comment">// wait out pending interrupt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// assert state == INTERRUPTED;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We want to clear any interrupt we may have received from</span></span><br><span class="line">        <span class="comment">// cancel(true).  However, it is permissible to use interrupts</span></span><br><span class="line">        <span class="comment">// as an independent mechanism for a task to communicate with</span></span><br><span class="line">        <span class="comment">// its caller, and there is no way to clear only the</span></span><br><span class="line">        <span class="comment">// cancellation interrupt.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Thread.interrupted();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单的链表节点，用于在Treiber堆栈中记录等待的线程。</span></span><br><span class="line"><span class="comment">     * 请参阅其他类，如Phaser和SynchronousQueue，以获得更详细的解释。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> WaitNode &#123;</span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">        <span class="keyword">volatile</span> WaitNode <span class="keyword">next</span>;</span><br><span class="line">        WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除所有等待线程并发出信号，调用done()，置callable为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> finishCompletion() &#123;</span><br><span class="line">        <span class="comment">// assert state &gt; COMPLETING;</span></span><br><span class="line">        <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset, q, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    Thread t = q.thread;</span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        q.thread = <span class="keyword">null</span>;</span><br><span class="line">                        LockSupport.unpark(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    WaitNode <span class="keyword">next</span> = q.<span class="keyword">next</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    q.<span class="keyword">next</span> = <span class="keyword">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                    q = <span class="keyword">next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        done();</span><br><span class="line"></span><br><span class="line">        callable = <span class="keyword">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在中断或超时时等待完成或中止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> awaitDone(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0</span>L;</span><br><span class="line">        WaitNode q = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> queued = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                removeWaiter(q);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> s = state;</span><br><span class="line">            <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">                <span class="keyword">if</span> (q != <span class="keyword">null</span>)</span><br><span class="line">                    q.thread = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING) <span class="comment">// cannot time out yet</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="keyword">null</span>)</span><br><span class="line">                q = <span class="keyword">new</span> WaitNode();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!queued)</span><br><span class="line">                queued = UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                     q.<span class="keyword">next</span> = waiters, q);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">                nanos = deadline - System.nanoTime();</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>L) &#123;</span><br><span class="line">                    removeWaiter(q);</span><br><span class="line">                    <span class="keyword">return</span> state;</span><br><span class="line">                &#125;</span><br><span class="line">                LockSupport.parkNanos(<span class="keyword">this</span>, nanos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试取消链接超时或中断的等待节点，以避免积累垃圾。</span></span><br><span class="line"><span class="comment">     内部节点在没有CAS的情况下是不分割的，因为无论如何释放器都可以遍历到，相对来讲是无害的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> removeWaiter(WaitNode node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.thread = <span class="keyword">null</span>;</span><br><span class="line">            retry:</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;          <span class="comment">// restart on removeWaiter race</span></span><br><span class="line">                <span class="keyword">for</span> (WaitNode pred = <span class="keyword">null</span>, q = waiters, s; q != <span class="keyword">null</span>; q = s) &#123;</span><br><span class="line">                    s = q.<span class="keyword">next</span>;</span><br><span class="line">                    <span class="keyword">if</span> (q.thread != <span class="keyword">null</span>)</span><br><span class="line">                        pred = q;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        pred.<span class="keyword">next</span> = s;</span><br><span class="line">                        <span class="keyword">if</span> (pred.thread == <span class="keyword">null</span>) <span class="comment">// check for race</span></span><br><span class="line">                            <span class="keyword">continue</span> retry;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (!UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                          q, s))</span><br><span class="line">                        <span class="keyword">continue</span> retry;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> stateOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> runnerOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> waitersOffset;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; k = FutureTask.<span class="keyword">class</span>;</span><br><span class="line">            stateOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"state"</span>));</span><br><span class="line">            runnerOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"runner"</span>));</span><br><span class="line">            waitersOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"waiters"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      线程中断和终止
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Executors剖析</title>
    <link href="http://linyishui.top/2019080501.html"/>
    <id>http://linyishui.top/2019080501.html</id>
    <published>2019-08-05T13:25:25.000Z</published>
    <updated>2019-09-10T03:24:00.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;从JDK1.5开始，Java API提供了Executor框架来创建线程池</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/776259-20160426201537486-1323529733.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      线程中断和终止
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>线程中断和终止</title>
    <link href="http://linyishui.top/2019080401.html"/>
    <id>http://linyishui.top/2019080401.html</id>
    <published>2019-08-04T12:43:42.000Z</published>
    <updated>2019-09-10T03:29:06.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程中断和终止"><a href="#线程中断和终止" class="headerlink" title="线程中断和终止"></a><strong>线程中断和终止</strong></h1><p>&emsp;中断可以理解为线程的一个标识属性(flag)，当其他线程调用此线程的interrupt()时，对此线程进行中断操作。</p><p>&emsp;当run()执行完方法体最后一条语句经return返回时，或因未捕获的异常跳出时，线程会被终止。interrupt()可以用来请求终止线程，当线程调用interrupt()，其中断状态将被置位。线程应该不时的检查此中断标志，判断自己是否被中断。还有一个stop()方法可以强制终止线程，已被弃用。</p><h2 id="interrupt-和isInterrupted"><a href="#interrupt-和isInterrupted" class="headerlink" title="interrupt()和isInterrupted()"></a><strong>interrupt()和isInterrupted()</strong></h2><p>&emsp;线程则通过检查自己是否被中断进行响应，通过isInterrupted()来判断，也可以通过静态方法Thread.interrupted()来对当前线程的中断标识位进行复位。若该线程已处于终结状态，即使其已被中断过，在调用此线程对象的isInterrupted()时依旧会返回false。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function">Thread <span class="title">currentThread</span><span class="params">()</span></span>;<span class="comment">//静态方法currentThread()获取当前线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">false</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;<span class="comment">//测试是否有线程被中断，中断状态是否基于传递的参数值重置。</span></span><br></pre></td></tr></table></figure><p>&emsp;当线程被阻塞时，无法检测中断状态，也就是产生异常InterruptedException的地方。当在一个被阻塞的线程(调用过sleep()或wait())上调用interrupt()阻塞调用将会被InterruptedException异常中断。对于一些抛出InterruptedException的方法，在抛出异常前JVM就会擦除中断标识位，然后再抛出异常，所以isInterrupted()仍会返回false</p><p>&emsp;中断并不意味着线程终止，被中断的线程可以决定如何响应中断请求，也可以不理会中断，普遍的情况是把中断请求当作终止请求,如下所示。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">            <span class="comment">//继续工作</span></span><br><span class="line">            Thread.sleep(delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InterruptedException ex)&#123;<span class="comment">//建议直接在底层方法抛出InterruptedException异常，让调用者去捕获此异常</span></span><br><span class="line">        <span class="comment">//进程阻塞时被请求中断</span></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源，清理数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在中断状态被置位时调用sleep()方法并不会使线程休眠，反而会清除此状态并抛出InterruptedException，若在如上循环中加入sleep()，则没有必要用isInterrupted()，因为不会检测中断状态。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span>(since=<span class="string">"1.2"</span>, forRemoval=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(Throwable obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;<span class="comment">//向线程发送中断请求，线程的中断状态被设置为true，若线程阻塞，则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread())</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        Interruptible b = blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">// Just to set the interrupt flag</span></span><br><span class="line">            b.interrupt(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;<span class="comment">//测试当前线程是否被中断，静态方法，只要执行就会将当前状态重置为false</span></span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;<span class="comment">//测试线程是否被终止，此调用不会改变线程的中断状态</span></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">false</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;<span class="comment">//测试线程是否被终止，中断状态是否重置基于参数判断</span></span><br></pre></td></tr></table></figure><hr><h2 id="suspend-、resume-和stop"><a href="#suspend-、resume-和stop" class="headerlink" title="suspend()、resume()和stop()"></a><strong>suspend()、resume()和stop()</strong></h2><p>&emsp;此三个方法分别实现了线程的暂停、恢复和停止操作。但因为其副作用而被停用，可以采用其他替代方案来代替暂停和恢复。被停用的原因：休眠线程后并不会释放其占用的资源，所以会导致死锁。</p><hr><h2 id="安全的终止线程"><a href="#安全的终止线程" class="headerlink" title="安全的终止线程"></a><strong>安全的终止线程</strong></h2><p>&emsp;中断操作是线程间的一种简单的交互方式，适合用来取消或停止任务。除了中断以外，还可以利用一个布尔变量来控制是否需要停止任务并终止线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shutdown</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        Runner one = <span class="keyword">new</span> Runner();</span><br><span class="line">        Thread countThread = <span class="keyword">new</span> Thread(one,<span class="string">"CountThread"</span>);</span><br><span class="line">        countThread.start();</span><br><span class="line">        <span class="comment">//睡眠1秒，main线程对CountThread进行中断，使CountThread能够感知中断而结束</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        countThread.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程2</span></span><br><span class="line">        Runner two = <span class="keyword">new</span> Runner();</span><br><span class="line">        countThread = <span class="keyword">new</span> Thread(two,<span class="string">"CountThread"</span>);</span><br><span class="line">        countThread.start();</span><br><span class="line">        <span class="comment">//睡眠1秒，main线程对Runner two进行取消，使CountThread能够感知on为false而结束</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        two.cancel();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> i;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> on = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (on &amp;&amp; !Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Count i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">            on = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;main线程通过中断操作和cancel()方法均可以使线程CountThread得以终止。这类通过标识位或中断操作的方法能够使线程在终止时可以有机会去清理资源，而不是直接将线程停止，因此这类方法更加安全和优雅。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      线程中断和终止，interrupt()和isInterrupted()，suspend()、resume()和stop()，安全的终止线程等。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="thread" scheme="http://linyishui.top/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>杠杆等常见术语</title>
    <link href="http://linyishui.top/2019080301.html"/>
    <id>http://linyishui.top/2019080301.html</id>
    <published>2019-08-03T03:37:23.000Z</published>
    <updated>2019-09-17T02:55:35.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="杠杆"><a href="#杠杆" class="headerlink" title="杠杆"></a><strong>杠杆</strong></h1><h2 id="什么是杠杆？"><a href="#什么是杠杆？" class="headerlink" title="什么是杠杆？"></a><strong>什么是杠杆？</strong></h2><blockquote><p>所谓<strong>杠杆</strong>，从狭义上讲，是指<strong>资产与股东权益之比</strong>；从广义讲，则是指<strong>通过负债实现以较小的资本金控制较大的资产规模，从而扩大盈利能力或购买力</strong>。</p></blockquote><p>&emsp;简单理解就是个体债务和实际收入的比值，当你用10块的本金通过借款90块，最后100块就是10倍的杠杆。</p><h2 id="杠杆对于个人有什么影响？"><a href="#杠杆对于个人有什么影响？" class="headerlink" title="杠杆对于个人有什么影响？"></a><strong>杠杆对于个人有什么影响？</strong></h2><p>&emsp;举个例子，个人通过自己本金100等额借到100借款，再用这200再去借到等额的200，如此迭代倍增借贷下去，用户就可以用一个较小的本金借到相当夸张倍数的资产，类似于力学的杠杆效应，支点是杠杆率。当然借款都伴随着利息，而推动用户不断提高杠杆率的动力来源自收益率大于利息，所以资产总量越大获得的利益差额就越大。所以在一个高度增长的经济环境下，通过这样的方法可以让个体获得巨大的利益。假设我们通过1W本金，通过利率5%借贷最多借到了20W。我们通过股票市场可以稳定赚到10%的利润。那么我们通过借贷获得的利润就是2W，再除去利息9500，获得纯利润10500，是我们本金能赚到的10倍。(比较粗糙的计算，理解原理即可)</p><p>&emsp;从上述例子可以看出来杠杆率其实相比负债率更能体现债务的偿还能力，比如一人固定资产如房子等价值500万，但其年收入为10万，如果他贷款250万，根据计算资产负债率=负债总额/资产总额，负债率只有33%，是比较正常的数值，但实际情况下如果不卖房子他是没有偿还能力的。</p><h3 id="银行借贷杠杆"><a href="#银行借贷杠杆" class="headerlink" title="银行借贷杠杆"></a><strong>银行借贷杠杆</strong></h3><p>&emsp;银行有一个准备金率，准备金是金融机构为保证客户提取存款和资金清算需要而准备的，是缴存在中央银行的存款，准备金率就是存款准备金占其存款总额的比例。假设准备金率是20%，所以当我有本金100时，我可以通过反复借贷拿到最多500元。这种方式叫<strong>间接融资</strong>，而间接融资很明显会产生一个杠杆效应，会增加市场货币。</p><p>&emsp;直接融资就是直接借出100给企业融资，增加直接融资的比例也间接的是在去杠杆。</p><h1 id="去杠杆"><a href="#去杠杆" class="headerlink" title="去杠杆"></a><strong>去杠杆</strong></h1><h2 id="为什么要去杠杆？"><a href="#为什么要去杠杆？" class="headerlink" title="为什么要去杠杆？"></a><strong>为什么要去杠杆？</strong></h2><p>&emsp;自从次贷危机爆发以来，“去杠杆化”一词遍从国外一直流行到国内。所谓“去杠杆化”，是指公司或者个人减少使用金融杠杆，把原来通过各种方式“借”到的钱退还出去的这样一个潮流。</p><p>&emsp;杠杆实际上就是借贷盈利，环境好的时候，资金回笼，参与者都能大赚一笔；环境不好的时候，利息压死人，所以要大量变卖手里的筹码，让大量企业和个人担负大量的债务，甚至瞬间破产。</p><p>&emsp;环境好的时候，企业会利用高杠杆扩大生产规模，追求更多的利益，生产出来的东西超过人们所需要的，就会导致产能过剩和资源浪费。</p><p>&emsp;在国内，可能大部分贷款都是用来炒股，炒房，做一些布局和烧钱的投资，或者搞高污染高耗能的产业，这些钱并没有用来提高生产力和创造足够多的实际经济贡献，社会产能结构慢慢失衡。</p><p>&emsp;2008年全球金融危机，背后就是高杠杆引发的一系列连锁反应。我国这么多年，一直在加杠杆，尤其是2008年以后，一直以高杠杆换取高增长的经济增速，杠杆高到一定程度就会到风险不可控的地步，为了逐渐减少金融风险，让经济回归正常发展，必须要去杠杆。</p><h2 id="高杠杆的影响？"><a href="#高杠杆的影响？" class="headerlink" title="高杠杆的影响？"></a><strong>高杠杆的影响？</strong></h2><p>&emsp;高杠杆率对应着高风险，在经济增长比较良好的阶段，市场规模一直在扩大，高杠杆总有人接盘，经济也没有太大的不良反应。</p><p>&emsp;杠杆是一个强力的经济工具，用好这个工具其实对经济和社会都是利大于弊的，有个经济现象叫“明斯基时刻”（Minsky Moment）是指海曼·明斯基Hyman Minsky(美国经济学家)所描述的时刻，即资产价值崩溃时刻。他的观点主要是经济长时期稳定可能导致债务增加、杠杆比率上升，进而从内部滋生爆发金融危机和陷入漫长去杠杆化周期的风险。明斯基时刻表示的是市场繁荣与衰退之间的转折点。在我的理解种人性在这里面起主导作用，而避免明斯基时刻。</p><h2 id="如何去杠杆？"><a href="#如何去杠杆？" class="headerlink" title="如何去杠杆？"></a><strong>如何去杠杆？</strong></h2><ol><li>缩紧信贷，提高门槛，加强监管。</li><li>减少负债，悬崖勒马，制度改革。</li></ol><h2 id="货币升值的影响？"><a href="#货币升值的影响？" class="headerlink" title="货币升值的影响？"></a><strong>货币升值的影响？</strong></h2><blockquote><p>从几个角度来分析：</p><ol><li>A币升值-&gt;A币能换到更多的B币-&gt;国民对外购买力增强</li><li>A币升值-&gt;B币只能换更少的A币-&gt;企业在A国成本不会有太大改变-&gt;对外商品定价不变的情况下利润一定是减少的-&gt;企业只能提高在外产品售价-&gt;商品失去竞争力</li></ol></blockquote><p>&emsp;利润计算：成本300A，售价100B，A和B兑换比例：4 : 1。所以此时企业利润为：100A/25B。当A币升值，兑换比例变为2 ：1，成本售价不变，企业亏损100A/25B，为了保持过往利润，需要将售价提升到200B。商品丧失掉在B对应市场的竞争力。 </p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://www.zhihu.com/question/20417339/answer/136814369" title="Title" target="_blank" rel="noopener">金融机构的去杠杆化以及杠杆率是什么意思？</a></p></blockquote><blockquote><p><a href="http://www.sohu.com/a/237595453_250785" title="Title" target="_blank" rel="noopener">如何防范“明斯基时刻”？</a></p></blockquote><blockquote><p><a href="https://zh.wikipedia.org/zh/%E8%B3%87%E9%87%91%E6%A7%93%E6%A1%BF" title="Title" target="_blank" rel="noopener">资金杠杆-维基百科</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      简单理解新闻和文章常谈的去杠杆化，杠杆是什么，为什么要去杠杆？
    
    </summary>
    
      <category term="金融经济" scheme="http://linyishui.top/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="economy" scheme="http://linyishui.top/tags/economy/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="http://linyishui.top/2019080201.html"/>
    <id>http://linyishui.top/2019080201.html</id>
    <published>2019-08-02T12:51:04.000Z</published>
    <updated>2019-08-19T14:10:52.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a><strong>Servlet</strong></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>&emsp;Servlet（Server Applet），全称Java Servlet。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p><p>&emsp;Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a><strong>工作模式</strong></h2><ol><li>客户端发送请求至服务器</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器</li><li>服务器将响应返回客户端</li></ol><h2 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a><strong>Servlet</strong></h2><ol><li><p>通用Servlet：一般来说，通用Servlet由javax.servlet.GenericServlet实作Servlet界面。程序设计人员可以通过使用或继承这个类来实现通用Servlet应用。</p></li><li><p>HttpServlet：javax.servlet.http.HttpServlet实现了专门用于响应HTTP请求的Servlet，提供了响应对应HTTP标准请求的doGet()、doPost()等方法。</p></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h2><p>&emsp;当servlet被部署在应用服务器中（应用服务器中用于管理Java组件的部分被抽象成为容器）以后，由容器控制servlet的生命周期。除非特殊指定，否则在容器启动的时候，servlet是不会被加载的，servlet只会在第一次请求的时候被加载和实例化。servlet一旦被加载，一般不会从容器中删除，直至应用服务器关闭或重新启动。但当容器做内存回收动作时，servlet有可能被删除。也正是因为这个原因，第一次访问servlet所用的时间要大大多于以后访问所用的时间。</p><p>&emsp;servlet在服务器的运行生命周期为，在第一次请求（或其实体被内存垃圾回收后再被访问）时被加载并执行一次初始化方法，跟着执行正式运行方法，之后会被常驻并每次被请求时直接执行正式运行方法，直到服务器关闭或被清理时执行一次销毁方法后实体销毁。</p><h2 id="与JSP的关系"><a href="#与JSP的关系" class="headerlink" title="与JSP的关系"></a><strong>与JSP的关系</strong></h2><p>&emsp;Java服务器页面（JSP）是HttpServlet的扩展。由于HttpServlet大多是用来响应HTTP请求，并返回Web页面（例如HTML、XML），所以不可避免地，在编写servlet时会涉及大量的HTML内容，这给servlet的书写效率和可读性带来很大障碍，JSP便是在这个基础上产生的。其功能是使用HTML的书写格式，在适当的地方加入Java代码片段，将程序员从复杂的HTML中解放出来，更专注于servlet本身的内容。</p><p>&emsp;JSP在首次被访问的时候被应用服务器转换为servlet，在以后的运行中，容器直接调用这个servlet，而不再访问JSP页面。JSP的实质仍然是servlet。</p><h2 id="与Tomcat的关系"><a href="#与Tomcat的关系" class="headerlink" title="与Tomcat的关系"></a><strong>与Tomcat的关系</strong></h2><p>&emsp;Tomcat作为应用服务器负责监听端口，在收到请求后，负责决定将请求交给哪个Servlet来处理，再调用其service方法，待到service执行完将返回的response返回给客户端。</p><h2 id="与Spring的关系"><a href="#与Spring的关系" class="headerlink" title="与Spring的关系"></a><strong>与Spring的关系</strong></h2><p>&emsp;等Spring家族出现后，Servlet开始退居幕后，取而代之的是方便的SpringMVC。SpringMVC的核心组件DispatcherServlet其实本质就是一个Servlet。但它已经自立门户，在原来HttpServlet的基础上，又封装了一条逻辑。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://zh.wikipedia.org/wiki/Java_Servlet" title="Title" target="_blank" rel="noopener">Java Servlet 维基百科</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍HTTPS技术背景和发展、通信流程、加密方式、合法验证、实战获取证书、Spring Boot配置HTTPS等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="network" scheme="http://linyishui.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS</title>
    <link href="http://linyishui.top/2019080101.html"/>
    <id>http://linyishui.top/2019080101.html</id>
    <published>2019-08-01T03:53:28.000Z</published>
    <updated>2019-08-14T10:20:16.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a><strong>引文</strong></h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>&emsp;HTTPS实际上就是HTTP穿上了SSL/TLS的外套，在学习了计算机网络知识后我们了解了HTTP属于<strong>应用层</strong>的协议。<strong>HTTP协议</strong>全称Hyper Text Transfer Protocol，即超文本传输协议，位于TCP/IP四层模型当中的应用层。HTTP协议通过请求/响应的方式，在客户端和服务端之间进行通信。</p><p>&emsp;而<strong>SSL</strong>（安全套接字）与<strong>TLS</strong>（运输层安全）都属于<strong>运输层</strong>协议。其实SSL与TLS都是上个世纪的产物，最新版本的TLS建立在SSL 3.0协议规范之上。</p><p>&emsp;HTTP协议的信息传输是完全以明文方式，没有做任何加密，所以数据就是直接暴漏在整个网络中。可想而知如果在传输过程中被不怀好意的人员或程序窃听、劫持或篡改，我们是无能为力的，所以提高HTTP的安全性迫在眉睫。</p><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a><strong>发展</strong></h2><p>&emsp;我们可以代入行业技术人员的角度，来思考一下HTTPS这种安全模式的发展过程，可以帮助我们更清晰的去理解其设计和针对性。</p><p>&emsp;我们来解决HTTP的安全问题，首先最容易想到的就是加密，我们可以通过暗号的方式来交流信息，这样应该就不担心被别人轻易的读取到真实数据了。所以我们尝试着引入了一种<strong>对称加密方式</strong>，通信双方约定了一个随机生成的密钥。在后续的通信中，信息发送方都使用密钥对信息加密，而信息接收方通过同样的密钥对信息解密。</p><p>&emsp;但问题出现了，虽然我们在后续的通信中对明文进行了加密，但是第一次约定加密方式和密钥的通信仍然是明文。如果第一次通信就已经被拦截了，那么密钥就会泄露给中间人，中间人仍然可以解密后续所有的通信内容。</p><p>&emsp;为了解决这个问题，我们又想到了一项技术：<strong>非对称加密算法</strong>。我们可以使用非对称加密，为密钥的传输做一层额外的保护。非对称加密的一组秘钥对中，包含一个公钥和一个私钥。明文既可以用公钥加密，用私钥解密；也可以用私钥加密，用公钥解密。所以甲方首先把自己的公钥Key1发送给了乙方，乙方收到Key1后，自己生成一个用于对称加密的密钥Key2，结合Key1对Key2进行加密，然后讲加密后的Key2发送给甲方。甲方通过自己非对称加密的私钥解开公钥Key1的加密，从而获取了Key2的内容。自此甲乙就可以通过Key2进行对称加密通信了。</p><p>&emsp;似乎非对称加密的引入解决了之前的问题，中间人即使在最开始便截获了公钥Key1，他也因为没有私钥从而无法直接解密出数据。但黑客除了窃听外，还可以劫持和篡改，所以新的黑客方式出现了：在甲方发出公钥Key1后，黑客劫持并生成自己的一对公钥和私钥，并发送公钥Key3给乙方。乙方依然加密后生成新的Key2发送出来，然后继续被黑客劫持，并用其私钥解开了自己Key3的加密获得了新的Key2内容。然后就用最初劫持的Key1进行加密并发送给甲方。这样一来，后续的通信过程甲乙就依然用Key来做对称加密，而黑客已然获取了Key2来进行解密。</p><p>&emsp;到此我们就慢慢开始接近了HTTPS的设计思路，那么面对这时的方案，我们还可以如何去做改进来填补漏洞呢？首先漏洞来源于什么，来源自我们的通信不安全，能够通过技术手段来让通信无法被别人听到吗？好像近些年比较热的量子通信可以实现，但离实现还有未可预知的时间，所以我们其实是没办法保证这一点的。即我们对话的内容无法保证只有我们听到，那么就只好保证我们的对话只有我们能听懂，从而变相的实现了防窃听。既然我们双方确认暗号的过程会因为中间人的伪造而使我们无法信任对话者的身份，那么我们可以找一个有公信力可以被信任的机构来作第三方公信人啊！所以HTTPS引入了这一第三方来解决信任问题。</p><h1 id="HTTPS介绍"><a href="#HTTPS介绍" class="headerlink" title="HTTPS介绍"></a><strong>HTTPS介绍</strong></h1><h2 id="HTTPS通信流程"><a href="#HTTPS通信流程" class="headerlink" title="HTTPS通信流程"></a><strong>HTTPS通信流程</strong></h2><p>&emsp;权威的证书颁发机构（CA）即被信任的第三方，其证书至少包含如下信息：颁发机构，服务端网址，机构私钥加密服务端公钥，机构私钥加密证书签名。</p><blockquote><p>证书的获取和验证、服务端客户端的通信流程如下：</p><ol><li>服务端A，首先把自己的公钥发送给证书颁发机构，向其申请证书。</li><li>证书颁发机构自己也有一对公钥私钥。机构利用自己的私钥来加密Key1，并且通过服务端网址等信息生成一个证书签名，证书签名同样经过机构的私钥加密。证书制作完成后，机构把证书发送给了服务端A。</li><li>当客户端B向A请求通信时，客户端B会发起一个http请求，连接到服务器A的443端口。A则不再直接返回自己的公钥，而是把自己申请的数字证书返回给B。</li><li>B收到证书以后，要做的第一件事情是验证证书的合法性。需要说明的是，各大浏览器和操作系统已经维护了所有权威证书机构的名称和公钥。所以B只需要知道是哪个机构颁布的证书，就可以从本地找到对应的机构公钥，解密出证书签名。接下来，B按照同样的签名规则，自己也生成一个证书签名，如果两个签名一致，说明证书是有效的（可能需要验证证书中包含的地址与正在访问的地址是否一致，证书是否过期等）。验证成功后，B就可以放心地再次利用机构公钥，解密出服务端A的公钥Key1。如果验证通过，或用户接受了不受信任的证书，浏览器就会生成一串随机字符串，让服务端用私钥加密随机字符串，返回结果后客户端再用公钥解密，相当于做一次确认工作。若与之前的随机字符串一致，则说明服务端确实是私钥的持有者。</li><li>验证完服务端身份后，客户端会生成一个对称加密的算法和对应密钥，所以B生成了自己的对称加密密钥Key2，并且用服务端公钥Key1加密Key2，发送给服务端A。此时被黑客截获也没用，因为只有服务端的私钥才可以对其进行解密。</li><li>最后，A用自己的私钥解开加密，得到对称加密密钥Key2。之后客户端与服务端可以用这个对称加密算法来加密和解密通信内容了。</li></ol></blockquote><p>&emsp;证书的签名由服务端网址等信息生成，经过机构私钥加密，黑客无法进行篡改。我们知道TCP/IP模型包括：应用层(HTTP/FTP)-&gt;传输层(TCP/UDP)-&gt;网络层(IP/ARP)-&gt;数据链路层，HTTPS就是在HTTP基础上增加了SSL安全层，上述一系列认证过程就在这一层进行，即：HTTP-&gt;SSL-&gt;TCP-&gt;IP-&gt;数据链路层。注：最新推出的TLS协议，是SSL 3.0协议的升级版，和SSL协议的大体原理是相同的。</p><p>&emsp;HTTPS涉及到加密，想要彻底的了解HTTPS，需要学习一下密码学相关的知识。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a><strong>加密</strong></h2><p>&emsp;可以参考<a href="../2019052001.html" title="Title">加密算法</a></p><blockquote><ol><li>密钥：通常是一个字符串或数字，进行加密/解密算法时使用。公钥和私钥都是密钥，只不过一般公钥是对外开放的，加密时使用；私钥是不公开的，解密时使用。</li><li>非对称加密算法（公钥加密）：有RSA、DSA/DSS、Elgamal、Rabin、D-H、ECC等。在客户端与服务器相互验证的过程中用的就是非对称加密算法。RSA密码体制就是公钥密码体制，RSA的一对公钥和私钥都可以用来加密和解密。比如公钥加密后只能由私钥解密；私钥加密后只能由公钥解密。且一方加密的内容只能由对方进行解密。</li><li>对称加密算法（私钥加密）：有AES、DES、3DES、TDEA、Blowfish、RC4、RC5、IDEA等。加密使用的密钥和解密使用的密钥是同一个密钥。由于加密算法是公开的，若要保证安全性，密钥不能对外公开。通常用来加密消息体。</li><li>HASH算法：有MD5，SHA1，SHA256。用来确认信息没有被篡改。主要用来生成签名，签名是加在信息后面的，可以证明信息没有被修改过。一般对信息先做hash计算得到一个hash值，然后用私钥加密（这个加密一般是非对称加密）作为一个签名和信息一起发送。接收方收到信息后重新计算信息的hash值，且和信息所附带的hash值解密后进行对比。如果一样则认为没有被修改，反之则认为修改过，不做处理。可能有一种情况，黑客修改了信息并把hash值也改了，从而让他们相匹配。所以hash值一般都是加密后（生成签名）再和信息一起发送，确保hash值不会被修改。</li><li>数字证书：主要包含证书发布机构，证书有效期，公钥，证书所有者，签名使用的算法，指纹以及指纹算法。数字证书可以保证里面的公钥一定是证书持有者的。</li><li>数字签名：数字签名原理：将明文通过Hash算法加密生成摘要，再将消息体摘要用私钥加密后就是签名了。当下一级证书或客户端需要时就返回这个整体。数字签名主要作用就是配合Hash算法保证信息没有被篡改。当https验证通过后，一般会改用对称加密方式通信，因为RSA公钥体制比较耗性能。所以数字签名只存在于验证阶段。</li><li>证书链：证书是分级的，证书链由多个证书一级一级组成，拿到上级证书的公钥才能解密本级证书。只有最底层的证书是自签名的，自己颁发给自己。</li></ol></blockquote><h2 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a><strong>HTTPS原理</strong></h2><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a><strong>数字证书</strong></h3><p>&emsp;HTTPS的安全性主要依赖于对数字证书的验证以及非对称加密机制，客户端具体是如何判断证书的合法性的？首先我们先看一下证书的主要内容。</p><blockquote><p>数字证书内容：</p><ol><li>Issuer–证书的发布机构</li></ol><p>发布证书的机构，指明证书是哪个公司创建的（并不是指使用证书的公司）。出了问题具体的颁发机构是要负责的</p><ol start="2"><li>Valid from，Valid to–证书的有效期</li></ol><p>证书的使用期限。过了这个期限证书就会作废，不能使用。</p><ol start="3"><li>Public key–公钥</li></ol><p>公钥用于对消息加密。</p><ol start="4"><li>Subject–主题</li></ol><p>证书是颁发给谁了，一般是个人或公司名称或机构名称或公司网站的网址。</p><ol start="5"><li>Signature algorithm–签名所使用的算法</li></ol><p>数字证书的数字签名所使用的加密算法，根据这个算法可以对指纹解密。指纹加密的结果就是数字签名。</p><ol start="6"><li>Thumbprint，Thumbprint algorithm–指纹以及指纹算法（一种HASH算法）</li></ol><p>指纹和指纹算法会使用证书机构的私钥加密后和证书放在一起。主要用来保证证书的完整性，确保证书没有修改过。使用者在打开证书时根据指纹算法计算证书的hash值，和刚开始的值一样，则表示没有被修改过。</p></blockquote><h3 id="合法性验证"><a href="#合法性验证" class="headerlink" title="合法性验证"></a><strong>合法性验证</strong></h3><p>&emsp;那么客户端如何检测数字证书是合法的并是所要请求的公司的？</p><p>&emsp;首先应用程序要读取证书中的Issuer（发布机构），然后会在操作系统或浏览器内置的受信任的发布机构中去找该机构的证书。如果找不到程序会有相应提醒，未必信任的证书来源。如果找到发布机构，或者未找到但用户确认使用该证书，就会拿到上级证书的公钥，解密本级证书，得到数字指纹。然后对本级证书的公钥进行数字摘要算法（证书中提供的指纹加密算法）计算结果，与解密得到的指纹对比。如果一样，说明证书没有被修改过。公钥可以放心使用，可以开始握手通信了。</p><blockquote><p>操作系统为什么会有证书发布机构的证书？</p><p>证书发布机构除了给别人发布证书外，自己也有自己的证书。在操作系统安装好时，受信任的证书发布机构的数字证书就已经被微软安装在操作系统中了，根据一些权威安全机构的评估，选取一些信誉很好并且通过一定安全认证的证书发布机构，把这些证书默认安装在操作系统中并设为信任的数字证书。发布机构持有与自己数字证书对应的私钥，会用这个私钥加密所有他发布的证书及指纹整体作为数字签名。</p></blockquote><blockquote><p>&emsp;在获得公钥后，客户端会生成随机数并用公钥加密，让服务端用私钥解密来确保对方是否真的持有私钥。但是，黑客也可以发送字符串让服务器用私钥加密，并得到加密后的信息，从而找到规律，导致私钥的安全性下降。这种情况如何解决？</p><p>&emsp;服务端并不是真的加密这个字符串，而是把字符串进行hash计算后再进行加密后发送给客户端。客户端收到后再解密这个hash值与原来字符串的hash值对比，从而确定对方是否持有私钥。</p></blockquote><blockquote><p>&emsp;在通信的过程中，黑客可以截获加密内容，虽不能理解具体内容，但可以捣乱，修改内容或重复发送该内容，如何解决？</p><p>&emsp;给通信的内容加版本号或随机值，如果接收到版本号或随机值不相同的信息，双方立刻停止通信。若一直捣乱就无法正常通信，因为有人控制了你的路由器，可以针对你。所以一些对于安全性较强的部门来说就不使用公网，而是内部网络，一般不会被破环通信。</p></blockquote><h3 id="单向验证和双向验证"><a href="#单向验证和双向验证" class="headerlink" title="单向验证和双向验证"></a><strong>单向验证和双向验证</strong></h3><p>&emsp;https验证过程是分为单向验证和双向验证。</p><blockquote><p>单向认证：</p><ol><li>客户端保存着服务端的证书并信任该证书即可.</li><li>https一般是单向认证，这样可以让绝大部分人都可以访问你的站点。</li></ol></blockquote><blockquote><p>双向认证：</p><ol><li>先决条件是有两个或两个以上的证书，一个是服务端证书，另一个或多个是客户端证书。 </li><li>服务端保存着客户端的证书并信任该证书，客户端保存着服务端的证书并信任该证书。这样，在证书验证成功的情况下即可完成请求响应。(只有服务器验证客户端证书并通过，客户端验证服务器证书并通过，才可以进行通信) </li><li>双向认证一般企业应用对接。(所以企业与企业间对接，大部分都是自签证书) </li></ol></blockquote><p>总结：单向验证只需要客户端验证服务器证书即可，双向则需要双方都验证。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h1><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a><strong>获取证书</strong></h2><h3 id="权威机构证书"><a href="#权威机构证书" class="headerlink" title="权威机构证书"></a><strong>权威机构证书</strong></h3><p>&emsp;可以通过阿里云等销售方来购买SSL证书，不过价格对于个人开发者和学生来说不是一笔小的费用，请根据自身情况酌情选购。</p><h3 id="自行申请证书"><a href="#自行申请证书" class="headerlink" title="自行申请证书"></a><strong>自行申请证书</strong></h3><p>&emsp;各类证书的获取方式有很多，这里介绍通过Java的keytool数据证书工具生成证书的方法。</p><p>&emsp;管理员身份执行CMD，执行以下命令。</p><blockquote><p>keytool -genkeypair -alias server -keyalg RSA -keystore D:\server.keystore</p></blockquote><p>&emsp;<em>其中-alias是证书的别名，RSA是加密算法，-keystore后是输出证书的路径所在</em></p><p>&emsp;执行后分别输入口令和一些个人信息，最后生成了文件server.keystore</p><h2 id="Spring-Boot配置HTTPS"><a href="#Spring-Boot配置HTTPS" class="headerlink" title="Spring Boot配置HTTPS"></a><strong>Spring Boot配置HTTPS</strong></h2><p>&emsp;有了证书后，如何在Spring Boot项目中配置使用呢？</p><ol><li>将证书文件放置到项目根目录。</li><li><p>在配置文件application.properties中添加如下内容。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口配置</span></span><br><span class="line">server.<span class="attribute">port</span>=8443</span><br><span class="line">server.port.<span class="attribute">http</span>=8080</span><br><span class="line"><span class="comment"># HTTPS SSL 配置</span></span><br><span class="line">server.ssl.<span class="attribute">key-store</span>=server.keystore</span><br><span class="line">server.ssl.<span class="attribute">key-alias</span>=server</span><br><span class="line">server.ssl.<span class="attribute">enabled</span>=<span class="literal">true</span></span><br><span class="line">server.ssl.<span class="attribute">key-store-password</span>=123456</span><br><span class="line">server.ssl.<span class="attribute">key-store-type</span>=JKS</span><br></pre></td></tr></table></figure></li><li><p>通过配置类HttpsConfig来配置HTTPS访问，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port.http&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection securityCollection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                securityCollection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(securityCollection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(redirectConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">redirectConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(Http11NioProtocol.class.getName());</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(serverPortHttp);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(serverPortHttps);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，并访问对应URL：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 和 <a href="https://localhost:8443，观察结果。" target="_blank" rel="noopener">https://localhost:8443，观察结果。</a></p></li></ol><h2 id="SSL证书转换"><a href="#SSL证书转换" class="headerlink" title="SSL证书转换"></a><strong>SSL证书转换</strong></h2><h3 id="JKS证书转换CRT和KEY"><a href="#JKS证书转换CRT和KEY" class="headerlink" title="JKS证书转换CRT和KEY"></a><strong>JKS证书转换CRT和KEY</strong></h3><p>&emsp;服务器端获得了JKS证书，但对于前端项目如NodeJs，需要用Crt和Key格式的证书，可以通过keytool和openssl工具来完成这一任务。</p><ol><li>获取已有JKS证书的文件和口令。</li><li>通过keytool工具将JKS证书转换为P12格式，命令如下所示，分别输入新旧口令即可生成目标文件。<blockquote><p>keytool -importkeystore -srckeystore D:\server.keystore -destkeystore D:\server.p12 -srcstoretype jks -deststoretype pkcs12</p></blockquote></li><li>通过openssl工具将P12格式证书转换为CRT证书，命令如下所示，在输入口令后即生成目标文件。<blockquote><p>openssl pkcs12 -in D:\server.p12 -nokeys -clcerts -out D:\server.crt</p></blockquote></li><li>通过openssl工具将P12格式证书转换为非加密的key，命令如下所示，在输入口令后即生成目标文件。<blockquote><p>openssl pkcs12 -in D:\server.p12 -nocerts -nodes -out D:\server.key</p></blockquote></li></ol><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/60033345" title="Title" target="_blank" rel="noopener">让面试官膜拜你的HTTPS运行流程（超详细）</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/57142784" title="Title" target="_blank" rel="noopener">漫画：什么是 HTTPS 协议？</a></p></blockquote><blockquote><p><a href="https://www.ucloud.cn/yun/40613.html" title="Title" target="_blank" rel="noopener">[SSL证书转换(一)]关于JKS 转换成 CRT 和 KEY</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/tugenhua0707/p/10927722.html" title="Title" target="_blank" rel="noopener">使用openssl生成免费证书</a></p></blockquote><blockquote><p><a href="http://slproweb.com/products/Win32OpenSSL.html" title="Title" target="_blank" rel="noopener">OpenSSL官网下载地址</a></p></blockquote><blockquote><p><a href="https://www.zhihu.com/question/22779469/answer/22603020" title="Title" target="_blank" rel="noopener">使用 HTTPS 的网站也能被黑客监听到数据吗？</a></p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍HTTPS技术背景和发展、通信流程、加密方式、合法验证、实战获取证书、Spring Boot配置HTTPS等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="network" scheme="http://linyishui.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>happens-before规则</title>
    <link href="http://linyishui.top/2019062401.html"/>
    <id>http://linyishui.top/2019062401.html</id>
    <published>2019-06-24T09:48:56.000Z</published>
    <updated>2019-07-16T09:55:45.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a><strong>happens-before</strong></h1><blockquote><p>&emsp;happens-before是JMM最核心的概念。对应Java程序员来说，理解happens-before是理解JMM的关键。</p></blockquote><h3 id="JMM的设计"><a href="#JMM的设计" class="headerlink" title="JMM的设计"></a><strong>JMM的设计</strong></h3><p>&emsp;首先，让我们来看JMM的设计意图。从JMM设计者的角度，在设计JMM时，需要考虑两个关键因素。</p><blockquote><ul><li>程序员对内存模型的使用。程序员希望内存模型易于理解、易于编程。程序员希望基于一个强内存模型来编写代码。</li><li>编译器和处理器对内存模型的实现。编译器和处理器希望内存模型对它们的束缚越少越好，这样它们就可以做尽可能多的优化来提高性能。编译器和处理器希望实现一个弱内存模型。</li></ul></blockquote><p>&emsp;由于这两个因素互相矛盾，所以JSR-133专家组在设计JMM时的核心目标就是找到一个好的平衡点：一方面，要为程序员提供足够强的内存可见性保证；另一方面，对编译器和处理器的限制要尽可能地放松。下面让我们来看JSR-133是如何实现这一目标的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>; <span class="comment">// A</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">1.0</span>; <span class="comment">// B</span></span><br><span class="line"><span class="keyword">double</span> area = pi * r * r; <span class="comment">// C</span></span><br></pre></td></tr></table></figure><blockquote><p>上面计算圆的面积的示例代码存在3个happens-before关系，如下:</p><ul><li>A happens-before B。</li><li>B happens-before C。</li><li>A happens-before C。</li></ul></blockquote><blockquote><p>在3个happens-before关系中，2和3是必需的，但1是不必要的。因此，JMM把happens-before要求禁止的重排序分为了下面两类:</p><ul><li>会改变程序执行结果的重排序。</li><li>不会改变程序执行结果的重排序。</li></ul></blockquote><blockquote><p>JMM对这两种不同性质的重排序，采取了不同的策略:</p><ul><li>对于会改变程序执行结果的重排序，JMM要求编译器和处理器必须禁止这种重排序。</li><li>对于不会改变程序执行结果的重排序，JMM对编译器和处理器不做要求（JMM允许这种重排序) 。</li></ul></blockquote><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170131.png" alt="JMM的设计示意图"></p><blockquote><p>从图可以看出两点，如下:</p><ul><li>JMM向程序员提供的happens-before规则能满足程序员的需求。JMM的happens-before规则不但简单易懂，而且也向程序员提供了足够强的内存可见性保证（有些内存可见性保证其实并不一定真实存在，比如上面的A happens-before B) 。</li><li>JMM对编译器和处理器的束缚已经尽可能少。从上面的分析可以看出，JMM其实是在遵循一个基本原则：只要不改变程序的执行结果（指的是单线程程序和正确同步的多线程程序） ，编译器和处理器怎么优化都行。例如，如果编译器经过细致的分析后，认定一个锁只会被单个线程访问，那么这个锁可以被消除。再如，如果编译器经过细致的分析后，认定一个volatile变量只会被单个线程访问，那么编译器可以把这个volatile变量当作一个普通变量来对待。这些优化既不会改变程序的执行结果，又能提高程序的执行效率。</li></ul></blockquote><h3 id="happens-before的定义"><a href="#happens-before的定义" class="headerlink" title="happens-before的定义"></a><strong>happens-before的定义</strong></h3><p>&emsp;happens-before的概念最初由Leslie Lamport在其一篇影响深远的论文《Time，Clocks and the Ordering of Events in a Distributed System》中提出。Leslie Lamport使用happens-before来定义分布式系统中事件之间的<strong>偏序关系</strong>（partial ordering) 。Leslie Lamport在这篇论文中给出了一个分布式算法，该算法可以将该偏序关系扩展为某种<strong>全序关系</strong>。JSR-133使用happens-before的概念来指定两个操作之间的执行顺序。由于这两个操作可以在一个线程之内，也可以是在不同线程之间。因此，JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证（<strong>如果A线程的写操作a与B线程的读操作b之间存在happensbefore关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见</strong>) 。</p><blockquote><p>《JSR-133:Java Memory Model and Thread Specification》对happens-before关系的定义如下：</p><ol><li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li><li>两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法（也就是说，JMM允许这种重排序) 。</li></ol></blockquote><p>&emsp;1是JMM对程序员的承诺。从程序员的角度来说，可以这样理解happens-before关系：如果A happens-before B，那么Java内存模型将向程序员保证——A操作的结果将对B可见，且A的执行顺序排在B之前。注意，这只是Java内存模型向程序员做出的保证！</p><p>&emsp;2是JMM对编译器和处理器重排序的约束原则。正如前面所言，JMM其实是在遵循一个基本原则：只要不改变程序的执行结果（指的是单线程程序和正确同步的多线程程序） ，编译器和处理器怎么优化都行。JMM这么做的原因是：程序员对于这两个操作是否真的被重排序并不关心，程序员关心的是程序执行时的语义不能被改变（即执行结果不能被改变) 。因此，happens-before关系本质上和as-if-serial语义是一回事。</p><blockquote><ul><li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li><li>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：<strong>单线程程序是按程序的顺序来执行的</strong>。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：<strong>正确同步的多线程程序是按happens-before指定的顺序来执行的</strong>。as-if-serial语义和happens-before这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</li></ul></blockquote><h3 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a><strong>happens-before规则</strong></h3><blockquote><p>《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则：</p><ol><li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li><li>join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li></ol></blockquote><p>&emsp;这里的规则1、2、3和4前面都讲到过，这里再做个总结。由于2和3情况类似，这里只以1、3和4为例来说明。下图是volatile写-读建立的happens-before关系图。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170132.png" alt="happens-before关系的示意图"></p><blockquote><p>结合图，我们做以下分析。</p><ul><li>1 happens-before 2和3 happens-before 4由程序顺序规则产生。由于编译器和处理器都要遵守as-if-serial语义，也就是说，as-if-serial语义保证了程序顺序规则。因此，可以把程序顺序规则看成是对as-if-serial语义的“封装”。</li><li>2 happens-before 3是由volatile规则产生。前面提到过，对一个volatile变量的读，总是能看到（任意线程） 之前对这个volatile变量最后的写入。因此，volatile的这个特性可以保证实现volatile规则。</li><li>1 happens-before 4是由传递性规则产生的。这里的传递性是由volatile的内存屏障插入策略和volatile的编译器重排序规则共同来保证的。</li></ul></blockquote><p>&emsp;下面我们来看start()规则。假设线程A在执行的过程中，通过执行ThreadB.start()来启动线程B；同时，假设线程A在执行ThreadB.start()之前修改了一些共享变量，线程B在开始执行后会读这些共享变量。图3-35是该程序对应的happens-before关系图。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170133.png" alt="happens-before关系的示意图"></p><p>&emsp;在图中，1 happens-before 2由程序顺序规则产生。2 happens-before 4由start()规则产生。根据传递性，将有1 happens-before 4。这实意味着，线程A在执行ThreadB.start()之前对共享变量所做的修改，接下来在线程B开始执行后都将确保对线程B可见。</p><p>&emsp;下面我们来看join()规则。假设线程A在执行的过程中，通过执行ThreadB.join()来等待线程B终止；同时，假设线程B在终止之前修改了一些共享变量，线程A从ThreadB.join()返回后会读这些共享变量。下图是该程序对应的happens-before关系图。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170134.png" alt="happens-before关系的示意图"></p><p>&emsp;在图中，2 happens-before 4由join()规则产生；4 happens-before 5由程序顺序规则产生。根据传递性规则，将有2 happens-before 5。这意味着，线程A执行操作ThreadB.join()并成功返回后，线程B中的任意操作都将对线程A可见。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的happens-before规则：包括定义和规则等等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>final域的内存语义</title>
    <link href="http://linyishui.top/2019062301.html"/>
    <id>http://linyishui.top/2019062301.html</id>
    <published>2019-06-23T10:40:00.000Z</published>
    <updated>2019-09-16T09:07:51.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="final域的内存语义"><a href="#final域的内存语义" class="headerlink" title="final域的内存语义"></a><strong>final域的内存语义</strong></h1><blockquote><p>&emsp;与锁和volatile相比，对final域的读和写更像是对普通的变量访问。</p></blockquote><h3 id="final域的重排序规则"><a href="#final域的重排序规则" class="headerlink" title="final域的重排序规则"></a><strong>final域的重排序规则</strong></h3><blockquote><p>对于final域，编译器和处理器要遵守两个重排序规则：</p><ol><li>在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</li><li>初次读一个包含final域的对象的引用，与随后初次读这个final域，这两个操作之间不能重排序。</li></ol></blockquote><p>&emsp;下面通过一些示例性的代码来分别说明这两个规则。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FinalExample</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// 普通变量</span></span><br><span class="line">    final <span class="keyword">int</span> j; <span class="comment">// final变量</span></span><br><span class="line">    <span class="keyword">static</span> FinalExample obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalExample</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 构造函数</span></span><br><span class="line">        i = <span class="number">1</span>; <span class="comment">// 写普通域</span></span><br><span class="line">        j = <span class="number">2</span>; <span class="comment">// 写final域</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writer</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 写线程A执行</span></span><br><span class="line">        obj = <span class="keyword">new</span> FinalExample ();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reader</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 读线程B执行</span></span><br><span class="line">        FinalExample <span class="keyword">object</span> = obj; <span class="comment">// 读对象引用</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="keyword">object</span>.i; <span class="comment">// 读普通域</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="keyword">object</span>.j; <span class="comment">// 读final域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;假设一个线程A执行writer()方法，随后另一个线程B执行reader()方法。我们通过这两个线程的交互来学习这两个规则。</p><h4 id="一、写final域的重排序规则"><a href="#一、写final域的重排序规则" class="headerlink" title="一、写final域的重排序规则"></a><strong>一、写final域的重排序规则</strong></h4><p>&emsp;写final域的重排序规则禁止把final域的写重排序到构造函数之外。</p><blockquote><p>这个规则的实现包含下面2个方面：</p><ol><li>JMM禁止编译器把final域的写重排序到构造函数之外。</li><li>编译器会在final域的写之后，构造函数return之前，插入一个StoreStore屏障。这个屏障禁止处理器把final域的写重排序到构造函数之外。</li></ol></blockquote><p>&emsp;现在我们分析writer()方法。writer()方法只包含一行代码：finalExample = newFinalExample()。</p><blockquote><p>这行代码包含两个步骤，如下：</p><ol><li>构造一个FinalExample类型的对象。</li><li>把这个对象的引用赋值给引用变量obj。</li></ol></blockquote><p>&emsp;假设线程B读对象引用与读对象的成员域之间没有重排序（马上会说明为什么需要这个假设），下图是一种可能的执行时序。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170127.png" alt="线程执行时序图"></p><p>&emsp;在图中，写普通域的操作被编译器重排序到了构造函数之外，读线程B错误地读取了普通变量i初始化之前的值。而写final域的操作，被写final域的重排序规则“限定”在了构造函数之内，读线程B正确地读取了final变量初始化之后的值。写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域不具有这个保障。以上图为例，在读线程B“看到”对象引用obj时，很可能obj对象还没有构造完成（对普通域i的写操作被重排序到构造函数外，此时初始值1还没有写入普通域i）。</p><h4 id="二、读final域的重排序规则"><a href="#二、读final域的重排序规则" class="headerlink" title="二、读final域的重排序规则"></a><strong>二、读final域的重排序规则</strong></h4><p>&emsp;读final域的重排序规则是，在一个线程中，初次读对象引用与初次读该对象包含的final域，JMM禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。编译器会在读final域操作的前面插入一个LoadLoad屏障。初次读对象引用与初次读该对象包含的final域，这两个操作之间存在<strong>间接依赖</strong>关系。由于编译器遵守间接依赖关系，因此编译器不会重排序这两个操作。大多数处理器也会遵守间接依赖，也不会重排序这两个操作。但有少数处理器允许对存在间接依赖关系的操作做重排序（比如alpha处理器），这个规则就是专门用来针对这种处理器的。</p><blockquote><p>reader()方法包含3个操作：</p><ul><li>初次读引用变量obj。</li><li>初次读引用变量obj指向对象的普通域j。</li><li>初次读引用变量obj指向对象的final域i。</li></ul></blockquote><p>&emsp;假设写线程A没有发生任何重排序，同时程序在不遵守间接依赖的处理器上执行，下图所示是一种可能的执行时序。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170128.png" alt="线程执行时序图"></p><p>&emsp;在图中，读对象的普通域的操作被处理器重排序到读对象引用之前。读普通域时，该域还没有被写线程A写入，这是一个错误的读取操作。而读final域的重排序规则会把读对象final域的操作“限定”在读对象引用之后，此时该final域已经被A线程初始化过了，这是一个正确的读取操作。</p><p>&emsp;读final域的重排序规则可以确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。在这个示例程序中，如果该引用不为null，那么引用对象的final域一定已经被A线程初始化过了。</p><h2 id="final域为引用类型"><a href="#final域为引用类型" class="headerlink" title="final域为引用类型"></a><strong>final域为引用类型</strong></h2><p>&emsp;上面我们看到的final域是基础数据类型，如果final域是引用类型，将会有什么效果？请看下列示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalReferenceExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] intArray; <span class="comment">// final是引用类型</span></span><br><span class="line">    <span class="keyword">static</span> FinalReferenceExample obj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalReferenceExample</span> <span class="params">()</span> </span>&#123; <span class="comment">// 构造函数</span></span><br><span class="line">        intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>]; <span class="comment">// 1</span></span><br><span class="line">        intArray[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerOne</span> <span class="params">()</span> </span>&#123; <span class="comment">// 写线程A执行</span></span><br><span class="line">        obj = <span class="keyword">new</span> FinalReferenceExample (); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerTwo</span> <span class="params">()</span> </span>&#123; <span class="comment">// 写线程B执行</span></span><br><span class="line">        obj.intArray[<span class="number">0</span>] = <span class="number">2</span>; <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reader</span> <span class="params">()</span> </span>&#123; <span class="comment">// 读线程C执行</span></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 5</span></span><br><span class="line">            <span class="keyword">int</span> temp1 = obj.intArray[<span class="number">0</span>]; <span class="comment">// 6</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;本例final域为一个引用类型，它引用一个int型的数组对象。对于引用类型，写final域的重排序规则对编译器和处理器增加了如下约束：在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。对上面的示例程序，假设首先线程A执行writerOne()方法，执行完后线程B执行writerTwo()方法，执行完后线程C执行reader()方法。</p><p>&emsp;下图是一种可能的线程执行时序。在图中，1是对final域的写入，2是对这个final域引用的对象的成员域的写入，3是把被构造的对象的引用赋值给某个引用变量。这里除了前面提到的1不能和3重排序外，2和3也不能重排序。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170129.png" alt="引用型final的执行时序图"></p><p>&emsp;JMM可以确保读线程C至少能看到写线程A在构造函数中对final引用对象的成员域的写入。即C至少能看到数组下标0的值为1。而写线程B对数组元素的写入，读线程C可能看得到，也可能看不到。JMM不保证线程B的写入对读线程C可见，因为写线程B和读线程C之间存在数据竞争，此时的执行结果不可预知。如果想要确保读线程C看到写线程B对数组元素的写入，写线程B和读线程C之间需要使用同步原语（lock或volatile）来确保内存可见性。</p><h2 id="为什么final引用不能从构造函数内“溢出”"><a href="#为什么final引用不能从构造函数内“溢出”" class="headerlink" title="为什么final引用不能从构造函数内“溢出”"></a><strong>为什么final引用不能从构造函数内“溢出”</strong></h2><p>&emsp;前面提到，写final域的重排序规则可以确保：在引用变量为任意线程可见之前，该引用变量指向的对象的final域已经在构造函数中被正确初始化过了。其实，要得到这个效果，还需要一个保证：在构造函数内部，不能让这个被构造对象的引用为其他线程所见，也就是对象引用不能在构造函数中“逸出”。为了说明问题，让我们来看下面的示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalReferenceEscapeExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> FinalReferenceEscapeExample obj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalReferenceEscapeExample</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        i = <span class="number">1</span>; <span class="comment">// 1写final域</span></span><br><span class="line">        obj = <span class="keyword">this</span>; <span class="comment">// 2 this引用在此"逸出"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FinalReferenceEscapeExample ();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">int</span> temp = obj.i; <span class="comment">// 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;假设一个线程A执行writer()方法，另一个线程B执行reader()方法。这里的操作2使得对象还未完成构造前就为线程B可见。即使这里的操作2是构造函数的最后一步，且在程序中操作2排在操作1后面，执行reader()方法的线程仍然可能无法看到final域被初始化后的值，因为这里的操作1和操作2之间可能被重排序。实际的执行时序可能如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170130.png" alt="多线程执行时序图"></p><p>&emsp;从图可以看出：在构造函数返回前，被构造对象的引用不能为其他线程所见，因为此时的final域可能还没有被初始化。在构造函数返回后，任意线程都将保证能看到final域正确初始化之后的值。</p><h2 id="final语义在处理器中的实现"><a href="#final语义在处理器中的实现" class="headerlink" title="final语义在处理器中的实现"></a><strong>final语义在处理器中的实现</strong></h2><p>&emsp;现在我们以X86处理器为例，说明final语义在处理器中的具体实现。上面我们提到，写final域的重排序规则会要求编译器在final域的写之后，构造函数return之前插入一个StoreStore障屏。读final域的重排序规则要求编译器在读final域的操作前面插入一个LoadLoad屏障。</p><p>&emsp;由于X86处理器不会对写-写操作做重排序，所以在X86处理器中，写final域需要的StoreStore障屏会被省略掉。同样，由于X86处理器不会对存在间接依赖关系的操作做重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，在X86处理器中，final域的读/写不会插入任何内存屏障！</p><h2 id="JSR-133为什么要增强final的语义"><a href="#JSR-133为什么要增强final的语义" class="headerlink" title="JSR-133为什么要增强final的语义"></a><strong>JSR-133为什么要增强final的语义</strong></h2><p>&emsp;在旧的Java内存模型中，一个最严重的缺陷就是线程可能看到final域的值会改变。比如，一个线程当前看到一个整型final域的值为0（还未初始化之前的默认值），过一段时间之后这个线程再去读这个final域的值时，却发现值变为1（被某个线程初始化之后的值）。最常见的例子就是在旧的Java内存模型中，String的值可能会改变。</p><p>&emsp;为了修补这个漏洞，JSR-133专家组增强了final的语义。通过为final域增加写和读重排序规则，可以为Java程序员提供初始化安全保证：只要对象是正确构造的（被构造对象的引用在构造函数中没有“逸出”），那么不需要使用同步（指lock和volatile的使用）就可以保证任意线程都能看到这个final域在构造函数中被初始化之后的值。</p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的final域的内存语义：包括final域的重排序规则、final语义在处理器中的实现等等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>锁的内存语义</title>
    <link href="http://linyishui.top/2019062201.html"/>
    <id>http://linyishui.top/2019062201.html</id>
    <published>2019-06-22T08:51:49.000Z</published>
    <updated>2019-09-16T09:07:40.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a><strong>锁的内存语义</strong></h1><h2 id="锁的释放-获取建立的happens-before关系"><a href="#锁的释放-获取建立的happens-before关系" class="headerlink" title="锁的释放-获取建立的happens-before关系"></a><strong>锁的释放-获取建立的happens-before关系</strong></h2><blockquote><p>&emsp;<strong>锁</strong>是Java并发编程中最重要的同步机制。锁除了让临界区互斥执行外，还可以让释放锁的线程向获取同一个锁的线程发送消息。</p></blockquote><p>&emsp;下面是锁释放-获取的示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonitorExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123; <span class="comment">// 1</span></span><br><span class="line">        a++; <span class="comment">// 2</span></span><br><span class="line">    &#125; <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123; <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">int</span> i = a; <span class="comment">// 5</span></span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;假设有线程A执行writer()方法，随后线程B执行reader()方法。</p><blockquote><p>根据happens-before规则，这个过程包含的happens-before关系可以分为3类：</p><ol><li>根据程序次序规则: {1 happens-before 2 , 2 happens-before 3 ; 4 happens-before 5 , 5 happensbefore 6}</li><li>根据监视器锁规则: {3 happens-before 4}</li><li>根据happens-before的传递性: {2 happens-before 5}</li></ol></blockquote><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170122.png" alt="happens-before关系图"></p><p>&emsp;橙色箭头：在线程A释放了锁之后，随后线程B获取同一个锁。蓝色箭头：2 happens-before 5。因此，线程A在释放锁之前所有可见的共享变量，在线程B获取同一个锁之后，将立刻变得对B线程可见。</p><h2 id="锁的释放和获取的内存语义"><a href="#锁的释放和获取的内存语义" class="headerlink" title="锁的释放和获取的内存语义"></a><strong>锁的释放和获取的内存语义</strong></h2><p>&emsp;当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。以上面的MonitorExample程序为例，A线程释放锁后，共享数据的状态示意图如下图所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170123.png" alt="共享数据的状态示意图"></p><p>&emsp;当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使得被监视器保护的临界区代码必须从主内存中读取共享变量。下图是锁获取的状态示意图。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170124.png" alt="锁获取的状态示意图"></p><blockquote><p>对比锁释放-获取的内存语义与volatile写-读的内存语义可以看出：</p><blockquote><ol><li>锁释放与volatile写有相同的内存语义；</li><li>锁获取与volatile读有相同的内存语义。</li></ol></blockquote></blockquote><blockquote><p>对锁释放和锁获取的内存语义的总结：</p><blockquote><ul><li>线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了（线程A对共享变量所做修改的）消息。</li><li>线程B获取一个锁，实质上是线程B接收了之前某个线程发出的（在释放这个锁之前对共享变量所做修改的）消息。</li><li>线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。</li></ul></blockquote></blockquote><h2 id="锁内存语义的实现"><a href="#锁内存语义的实现" class="headerlink" title="锁内存语义的实现"></a><strong>锁内存语义的实现</strong></h2><p>&emsp;此部分将借助<a href="../2019032901.html" title="Title">ReentrantLock</a>的源代码，来分析锁内存语义的具体实现机制。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ReentrantLockExample</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>(); <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>(); <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = a;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在ReentrantLock中，调用lock()方法获取锁；调用unlock()方法释放锁。ReentrantLock的实现依赖于Java同步器框架AbstractQueuedSynchronizer（本文简称之为AQS）。AQS使用一个整型的volatile变量（命名为state）来维护同步状态，这个volatile变量是ReentrantLock内存语义实现的关键。</p><p>&emsp;下图是ReentrantLock的类图（仅画出与本文相关的部分）。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170125.png" alt="ReentrantLock的类图"></p><p>&emsp;ReentrantLock分为公平锁和非公平锁，我们首先分析公平锁。</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a><strong>公平锁</strong></h4><blockquote><p>使用公平锁时，加锁方法lock()调用轨迹如下:</p><ol><li>ReentrantLock:lock()。</li><li>FairSync:lock()。</li><li>AbstractQueuedSynchronizer:acquire(int arg)。</li><li>ReentrantLock:tryAcquire(int acquires)。</li></ol></blockquote><p>&emsp;在第4步真正开始加锁，下面是该方法的源代码。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState(); <span class="comment">// 获取锁的开始，首先读volatile变量state</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFirst(current) &amp;&amp; compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;从上面源代码中我们可以看出，加锁方法首先读volatile变量state。</p><blockquote><p>在使用公平锁时，解锁方法unlock()调用轨迹如下。</p><ol><li>ReentrantLock:unlock()。</li><li>AbstractQueuedSynchronizer:release(int arg)。</li><li>Sync:tryRelease(int releases)。</li></ol></blockquote><p>&emsp;在第3步真正开始释放锁，下面是该方法的源代码。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c); <span class="comment">// 释放锁的最后，写volatile变量state</span></span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;从上面的源代码可以看出，在释放锁的最后写volatile变量state。公平锁在释放锁的最后写volatile变量state，在获取锁时首先读这个volatile变量。根据<br>volatile的happens-before规则，释放锁的线程在写volatile变量之前可见的共享变量，在获取锁的线程读取同一个volatile变量后将立即变得对获取锁的线程可见。</p><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a><strong>非公平锁</strong></h4><p>&emsp;现在我们来分析非公平锁的内存语义的实现。非公平锁的释放和公平锁完全一样，所以这里仅仅分析非公平锁的获取。</p><blockquote><p>使用非公平锁时，加锁方法lock()调用轨迹如下。</p><ol><li>ReentrantLock:lock()。</li><li>NonfairSync:lock()。</li><li>AbstractQueuedSynchronizer:compareAndSetState(int expect,int update)。</li></ol></blockquote><p>&emsp;在第3步真正开始加锁，下面是该方法的源代码。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, stateOffset, expect, update)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;该方法以原子操作的方式更新state变量，本文把Java的compareAndSet()方法调用简称为CAS。可以结合文章<a href="../2019051801.html" title="Title">CAS原理</a>学习。JDK文档对该方法的说明如下：如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。此操作具有volatile读和写的内存语义。</p><h5 id="为什么说CAS同时具有volatile读和volatile写的内存语义？"><a href="#为什么说CAS同时具有volatile读和volatile写的内存语义？" class="headerlink" title="为什么说CAS同时具有volatile读和volatile写的内存语义？"></a><strong>为什么说CAS同时具有volatile读和volatile写的内存语义？</strong></h5><p>&emsp;这里我们分别从编译器和处理器的角度来分析，CAS如何同时具有volatile读和volatile写的内存语义。</p><p>&emsp;前文<a href="../2019040201.html" title="Title">volatile</a>我们提到过，编译器不会对volatile读与volatile读后面的任意内存操作重排序；编译器不会对volatile写与volatile写前面的任意内存操作重排序。组合这两个条件，意味着为了同时实现volatile读和volatile写的内存语义，编译器不能对CAS与CAS前面和后面的任意内存操作重排序。</p><p>&emsp;下面我们来分析在常见的intel X86处理器中，CAS是如何同时具有volatile读和volatile写的内存语义的。</p><p>&emsp;下面是sun.misc.Unsafe类的compareAndSwapInt()方法的源代码。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> expected, <span class="keyword">int</span> x)</span></span>;</span><br></pre></td></tr></table></figure></p><p>&emsp;可以看到，这是一个本地方法调用。这个本地方法在openjdk中依次调用的c++代码为：unsafe.cpp，atomic.cpp和atomic_windows_x86.inline.hpp。这个本地方法的最终实现在openjdk的如下位置：openjdk-7-fcs-src-b147-<br>27_jun_2011\openjdk\hotspot\src\os_cpu\windows_x86\vm\atomic_windows_x86.inline.hpp（对应于Windows操作系统，X86处理器）。</p><p>&emsp;下面是对应于intel X86处理器的源代码的片段。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inline jint Atomic::<span class="keyword">cmpxchg</span> (jint exchange_value, volatile jint* dest, jint compare_value) &#123; </span><br><span class="line">    // alternative for InterlockedCompareExchange</span><br><span class="line">    <span class="keyword">int</span> mp = os::is_MP()<span class="comment">;</span></span><br><span class="line">    __asm &#123;</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">edx</span>, dest</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">ecx</span>, exchange_value</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">eax</span>, compare_value</span><br><span class="line">        LOCK_IF_MP(mp)</span><br><span class="line">        <span class="keyword">cmpxchg</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edx</span>], <span class="built_in">ecx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;如上面源代码所示，程序会根据当前处理器的类型来决定是否为cmpxchg指令添加lock前缀。如果程序是在多处理器上运行，就为cmpxchg指令加上lock前缀（Lock Cmpxchg）。反之，如果程序是在单处理器上运行，就省略lock前缀（单处理器自身会维护单处理器内的顺序一致性，不需要lock前缀提供的内存屏障效果）。<br>intel的手册对lock前缀的说明如下。</p><ol><li>确保对内存的读-改-写操作原子执行。在Pentium及Pentium之前的处理器中，带有lock前缀的指令在执行期间会锁住总线，使得其他处理器暂时无法通过总线访问内存。<a href="../2019051601.html" title="Title">原子操作的实现原理</a>中有介绍Lock信号实现总线锁。很显然，这会带来昂贵的开销。从Pentium 4、Intel Xeon及P6处理器开始，Intel使用<strong>缓存锁定</strong>（Cache Locking）来保证指令执行的原子性。缓存锁定将大大降低lock前缀指令的执行开销。</li><li>禁止该指令与之前和之后的读和写指令重排序。</li><li>把写缓冲区中的所有数据刷新到内存中。</li></ol><p>&emsp;上面的第2点和第3点所具有的内存屏障效果，足以同时实现volatile读和volatile写的内存语义。</p><p>&emsp;经过上面的分析，现在我们终于能明白为什么JDK文档说CAS同时具有volatile读和volatile写的内存语义了。</p><blockquote><p>现在对公平锁和非公平锁的内存语义做个总结。</p><ul><li>公平锁和非公平锁释放时，最后都要写一个volatile变量state。</li><li>公平锁获取时，首先会去读volatile变量。</li><li>非公平锁获取时，首先会用CAS更新volatile变量，这个操作同时具有volatile读和volatile写的内存语义。</li></ul></blockquote><p>&emsp;从本文对ReentrantLock的分析可以看出，锁释放-获取的内存语义的实现至少有下面两种方式。</p><ol><li>利用volatile变量的写-读所具有的内存语义。</li><li>利用CAS所附带的volatile读和volatile写的内存语义。</li></ol><h2 id="concurrent包的实现"><a href="#concurrent包的实现" class="headerlink" title="concurrent包的实现"></a><strong>concurrent包的实现</strong></h2><p>&emsp;由于Java的CAS同时具有volatile读和volatile写的内存语义，因此Java线程之间的通信现在有了下面4种方式。</p><ol><li>A线程写volatile变量，随后B线程读这个volatile变量。</li><li>A线程写volatile变量，随后B线程用CAS更新这个volatile变量。</li><li>A线程用CAS更新一个volatile变量，随后B线程用CAS更新这个volatile变量。</li><li>A线程用CAS更新一个volatile变量，随后B线程读这个volatile变量。</li></ol><p>&emsp;Java的CAS会使用现代处理器上提供的高效机器级别的原子指令，这些原子指令以原子方式对内存执行读-改-写操作，这是在多处理器中实现同步的关键（从本质上来说，能够支持原子性读-改-写指令的计算机，是顺序计算图灵机的异步等价机器，因此任何现代的多处理器都会去支持某种能对内存执行原子性读-改-写操作的原子指令）。同时，volatile变量的读/写和CAS可以实现线程之间的通信。把这些特性整合在一起，就形成了整个concurrent包得以实现的基石。如果我们仔细分析concurrent包的源代码实现，会发现一个通用化的实现模式。</p><p>&emsp;首先，声明共享变量为volatile。</p><p>&emsp;然后，使用CAS的原子条件更新来实现线程之间的同步。</p><p>&emsp;同时，配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信。</p><p>&emsp;AQS，非阻塞数据结构和原子变量类（java.util.concurrent.atomic包中的类），这些concurrent包中的基础类都是使用这种模式来实现的，而concurrent包中的高层类又是依赖于这些基础类来实现的。</p><p>&emsp;从整体来看，concurrent包的实现示意图如下所示。</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20190512/201905170126.png" alt="concurrent包的实现示意图"></p><hr><p><em>参考博客和文章书籍等：</em></p><blockquote><p>《Java并发编程的艺术》</p></blockquote><p><em>因博客主等未标明不可引用，若部分内容涉及侵权请及时告知，我会尽快修改和删除相关内容</em></p>]]></content>
    
    <summary type="html">
    
      介绍Java中的锁的内存语义：等等
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="lock" scheme="http://linyishui.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>Shiro+Jwt+Redis实现登录权限管理系统</title>
    <link href="http://linyishui.top/2019062101.html"/>
    <id>http://linyishui.top/2019062101.html</id>
    <published>2019-06-21T07:31:36.000Z</published>
    <updated>2019-07-03T07:40:53.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a><strong>前文</strong></h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a><strong>POM</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a><strong>application.properties</strong></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置网络</span></span><br><span class="line">server.<span class="attribute">cookie-domain</span>=localhost</span><br><span class="line">server.<span class="attribute">cookie-path</span>=/xxx</span><br><span class="line">server.<span class="attribute">port</span>=8443</span><br><span class="line">server.port.<span class="attribute">http</span>=8080</span><br><span class="line">server.ssl.<span class="attribute">key-store</span>=server.keystore</span><br><span class="line">server.ssl.<span class="attribute">key-alias</span>=tomcat</span><br><span class="line">server.ssl.<span class="attribute">enabled</span>=<span class="literal">true</span></span><br><span class="line">server.ssl.<span class="attribute">key-store-password</span>=123456</span><br><span class="line">server.ssl.<span class="attribute">key-store-type</span>=JKS</span><br><span class="line"></span><br><span class="line"><span class="comment"># token有效时间，单位分钟 24*60=1440</span></span><br><span class="line">token.<span class="attribute">tokenexpiretime</span>=1440</span><br><span class="line"><span class="comment"># 更新令牌时间 2*60=120</span></span><br><span class="line">token.<span class="attribute">refreshchecktime</span>=120</span><br><span class="line"><span class="comment"># shiro缓存有效期，单位分钟,2*60=120</span></span><br><span class="line">token.<span class="attribute">shirocacheexpiretime</span>=120</span><br><span class="line"><span class="comment"># token加密密钥</span></span><br><span class="line">token.<span class="attribute">secretkey</span>=wxvideoquxue123</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">spring.redis.<span class="attribute">database</span>=0</span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line">spring.redis.<span class="attribute">host</span>=127.0.0.1</span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line">spring.redis.<span class="attribute">port</span>=6379</span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-active</span>=8</span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-wait</span>=-1</span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">max-idle</span>=8</span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.<span class="attribute">min-idle</span>=0</span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">spring.redis.<span class="attribute">timeout</span>=1000</span><br></pre></td></tr></table></figure><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a><strong>Application</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ServletComponentScan</span></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@EnableCaching</span> <span class="comment">//开启声明式缓存</span></span><br><span class="line"><span class="variable">@EnableConfigurationProperties</span>(&#123;JWTProperties.class&#125;)</span><br><span class="line">public class WxvideoserverApplication extends SpringBootServletInitializer &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现SpringBootServletInitializer可以让spring-boot项目在web容器中运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">        <span class="selector-tag">builder</span><span class="selector-class">.sources</span>(this.getClass());</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">super</span><span class="selector-class">.configure</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(WxvideoserverApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量和工具类"><a href="#常量和工具类" class="headerlink" title="常量和工具类"></a><strong>常量和工具类</strong></h2><h3 id="基本常量"><a href="#基本常量" class="headerlink" title="基本常量"></a><strong>基本常量</strong></h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpireTime</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ExpireTime() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEN_SEC = <span class="number">10</span>;<span class="comment">//10s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THIRTY_SEC = <span class="number">30</span>;<span class="comment">//30s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_MINUTE = <span class="number">60</span>;<span class="comment">//一分钟</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_HOUR = <span class="number">60</span> * <span class="number">60</span>;<span class="comment">//一小时</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TWELVE_HOUR = <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>;<span class="comment">//十二小时，单位s</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_DAY = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;<span class="comment">//二十四小时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安全相关name"><a href="#安全相关name" class="headerlink" title="安全相关name"></a><strong>安全相关name</strong></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SecurityConsts &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加盐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOGIN_SALT(<span class="string">"storyweb-bp"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request请求头属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUEST_AUTH_HEADER(<span class="string">"Authorization"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT-userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USERID(<span class="string">"userId"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组织ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORG_ID_TOKEN(<span class="string">"orgIdToken"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务线ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BL_ID_TOKEN(<span class="string">"blIdToken"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro redis 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_CACHE(<span class="string">"storyweb-bp:cache:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis-key-前缀-shiro:refresh_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_REFRESH_TOKEN(<span class="string">"storyweb-bp:refresh_token:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis-key-前缀-shiro:logout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PREFIX_SHIRO_LOGOUT_TOKEN(<span class="string">"storyweb-bp:logout:"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT-currentTimeMillis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CURRENT_TIME_MILLIS(<span class="string">"currentTimeMillis"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    SecurityConsts(String <span class="keyword">value</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UnauthorizedException"><a href="#UnauthorizedException" class="headerlink" title="UnauthorizedException"></a><strong>UnauthorizedException</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UnauthorizedException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> errMsg;</span><br><span class="line"></span><br><span class="line">    public <span class="type">UnauthorizedException</span>(<span class="type">CodeEnums</span> codeEnums) &#123;</span><br><span class="line">        <span class="keyword">super</span>(codeEnums.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = codeEnums.getCode();</span><br><span class="line">        <span class="keyword">this</span>.errMsg = codeEnums.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">UnauthorizedException</span>(<span class="type">String</span> errMsg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(errMsg);</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shiro工具类"><a href="#shiro工具类" class="headerlink" title="shiro工具类"></a><strong>shiro工具类</strong></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroKit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMES_DELIMETER = <span class="string">","</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加盐参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String hashAlgorithmName = <span class="string">"MD5"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> hashIterations = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shiro密码加密工具类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> credentials 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saltSource  密码盐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">md5</span><span class="params">(String credentials, String saltSource)</span> </span>&#123;</span><br><span class="line">        ByteSource salt = <span class="keyword">new</span> Md5Hash(saltSource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt, hashIterations).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机盐值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">getRandomSalt</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        String base = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt(base.length());</span><br><span class="line">            sb.append(base.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> sb.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证密码是否一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5cipherText</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">checkMd5Password</span><span class="params">(String password, String salt, String md5cipherText)</span> </span>&#123;</span><br><span class="line">        ByteSource credentialsSalt = <span class="keyword">new</span> Md5Hash(salt);</span><br><span class="line">        <span class="comment">//通用散列加密方法</span></span><br><span class="line">        SimpleHash hash = <span class="keyword">new</span> SimpleHash(ShiroKit.hashAlgorithmName, password, credentialsSalt, ShiroKit.hashIterations);</span><br><span class="line">        <span class="keyword">return</span> md5cipherText.equals(hash.toHex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前 Subject</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Subject <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> SecurityUtils.<span class="title">getSubject</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于该角色？,使用时与lacksRole 搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleName 角色名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于该角色：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; roleName != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; roleName.length() &gt; <span class="number">0</span> &amp;&amp; getSubject().hasRole(roleName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleName 角色名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 不属于该角色：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">lacksRole</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !hasRole(roleName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于以下任意一个角色。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleNames 角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于:true,否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasAnyRoles</span><span class="params">(String roleNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAnyRole = <span class="keyword">false</span>;</span><br><span class="line">        Subject subject = getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject != <span class="keyword">null</span> &amp;&amp; roleNames != <span class="keyword">null</span> &amp;&amp; roleNames.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String role : roleNames.split(NAMES_DELIMETER)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subject.hasRole(role.trim())) &#123;</span><br><span class="line">                    hasAnyRole = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasAnyRole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否属于以下所有角色。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleNames 角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属于:true,否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasAllRoles</span><span class="params">(String roleNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAllRole = <span class="keyword">true</span>;</span><br><span class="line">        Subject subject = getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject != <span class="keyword">null</span> &amp;&amp; roleNames != <span class="keyword">null</span> &amp;&amp; roleNames.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String role : roleNames.split(NAMES_DELIMETER)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!subject.hasRole(role.trim())) &#123;</span><br><span class="line">                    hasAllRole = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasAllRole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否拥有指定权限,使用时与lacksPermission 搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permission 权限名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拥有权限：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; permission != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; permission.length() &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; getSubject().isPermitted(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permission 权限名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拥有权限：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">lacksPermission</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !hasPermission(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。与notAuthenticated搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 通过身份验证：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; getSubject().isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没有通过身份验证：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">notAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证通过或已记住的用户。与guset搭配使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户：true，否则 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubject() != <span class="keyword">null</span> &amp;&amp; getSubject().getPrincipal() != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。用user搭配使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 访客：true，否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isGuest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出当前用户信息，通常为登录帐号信息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">principal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSubject() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object principal = getSubject().getPrincipal();</span><br><span class="line">            <span class="function"><span class="keyword">return</span> principal.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a><strong>JWT工具类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JWTUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jwtUtil = <span class="keyword">this</span>;</span><br><span class="line">        jwtUtil.jwtProperties = <span class="keyword">this</span>.jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String token)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String secret = getClaim(token, SecurityConsts.USERID.getValue()) + jwtUtil.jwtProperties.getSecretKey();</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                .build();</span><br><span class="line">        verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Token中的信息无需secret解密也能获得</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claim</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClaim</span><span class="params">(String token, String claim)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(claim).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名,5min后过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId            用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentTimeMillis 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String userId, String currentTimeMillis)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">// 帐号加JWT私钥加密</span></span><br><span class="line">        String secret = userId + jwtUtil.jwtProperties.getSecretKey();</span><br><span class="line">        <span class="comment">// 此处过期时间，单位：毫秒</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + jwtUtil.jwtProperties.getTokenExpireTime() * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(SecurityConsts.USERID.getValue(), userId)</span><br><span class="line">                .withClaim(SecurityConsts.CURRENT_TIME_MILLIS.getValue(), currentTimeMillis)</span><br><span class="line">                .withExpiresAt(date)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis工具类"><a href="#Jedis工具类" class="headerlink" title="Jedis工具类"></a><strong>Jedis工具类</strong></h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class JedisUtils &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; redisTemplate;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsStr;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> SetOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsSet;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> ZSetOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsZSet;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    ListOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; valOpsList;</span><br><span class="line">    @Resource(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> HashOperations&lt;<span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">Object</span>&gt; valOpsHash;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveString(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存的集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToSet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        valOpsSet.<span class="built_in">add</span>(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Set中获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return keyValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getFromSet(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.pop(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 key的值保存为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。 SETNX 是『SET</span></span><br><span class="line"><span class="comment">     * if Not eXists』(如果不存在，则 SET)的简写。 &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存成功，返回 true &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存失败，返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> saveNX(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsStr.setIfAbsent(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 key的值保存为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。 SETNX 是『SET</span></span><br><span class="line"><span class="comment">     * if Not eXists』(如果不存在，则 SET)的简写。 &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存成功，返回 true &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 保存失败，返回 false</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param expire 单位：秒</span></span><br><span class="line"><span class="comment">     *               超时时间</span></span><br><span class="line"><span class="comment">     * @return 保存成功，返回 true 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> saveNX(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="built_in">int</span> expire) &#123;</span><br><span class="line">        <span class="built_in">boolean</span> ret = saveNX(<span class="built_in">key</span>, val);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            redisTemplate.expire(<span class="built_in">key</span>, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据存入缓存（并设置失效时间）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveString(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, val, seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自增变量存入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveSeq(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> seqNo) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line">        valOpsStr.increment(<span class="built_in">key</span>, seqNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将递增浮点数存入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveFloat(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">float</span> data) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line">        valOpsStr.increment(<span class="built_in">key</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存复杂类型数据到缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveObject(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> obj) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, mapper.writeValueAsString(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存复杂类型数据到缓存（并设置失效时间）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveObject(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> obj, <span class="built_in">int</span> seconds) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        valOpsStr.<span class="built_in">set</span>(<span class="built_in">key</span>, mapper.writeValueAsString(obj), seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 存到指定的队列中，不限制队列大小</span></span><br><span class="line"><span class="comment">     * 左进右出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        saveToQueue(<span class="built_in">key</span>, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 存到指定的队列中</span></span><br><span class="line"><span class="comment">     * 左进右出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @param size 队列大小限制 0：不限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val, <span class="keyword">long</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span> &amp;&amp; valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>) &gt;= <span class="built_in">size</span>) &#123;</span><br><span class="line">            valOpsList.rightPop(<span class="built_in">key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        valOpsList.leftPush(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsHash.put(hName, <span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hashMap) &#123;</span><br><span class="line">        valOpsHash.putAll(hName, hashMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取所以值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; hGetAll(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.entries(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> hashSet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, T t) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        hashSet(hName, <span class="built_in">key</span>, mapper.writeValueAsString(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中 只在 key 指定的哈希集中不存在指定的字段时，设置字段的值。如果 key 指定的哈希集不存在，会创建一个新的哈希集并与</span></span><br><span class="line"><span class="comment">     * key 关联。如果字段已存在，该操作无效果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hsetnx(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsHash.putIfAbsent(hName, <span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到hash集合中 只在 key 指定的哈希集中不存在指定的字段时，设置字段的值。如果 key 指定的哈希集不存在，会创建一个新的哈希集并与</span></span><br><span class="line"><span class="comment">     * key 关联。如果字段已存在，该操作无效果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param hName 集合名</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> hsetnx(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, T t) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        hsetnx(hName, <span class="built_in">key</span>, mapper.writeValueAsString(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的key项</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hdel(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        valOpsHash.delete(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得复杂类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws IOException</span></span><br><span class="line"><span class="comment">     * @throws JsonMappingException</span></span><br><span class="line"><span class="comment">     * @throws JsonParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> getObject(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">String</span> value = valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(value, <span class="keyword">Object</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得复杂类型数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param obj</span></span><br><span class="line"><span class="comment">     * @param clazz</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws IOException</span></span><br><span class="line"><span class="comment">     * @throws JsonMappingException</span></span><br><span class="line"><span class="comment">     * @throws JsonParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T getObject(<span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">String</span> value = valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(value, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中取得字符串数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsStr.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 从指定队列里取得数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param size 数据长度</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; getFromQueue(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getFromQueue(<span class="built_in">key</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; getFromQueue(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="built_in">boolean</span> flag = redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.exists(<span class="built_in">key</span>.getBytes());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, <span class="number">0</span>, valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能: 从指定队列里取得数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> popQueue(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.rightPop(<span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得序列值的下一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getSeqNext(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incr(<span class="built_in">key</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得序列值的下一个，增加 value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getSeqNext(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> value) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incrBy(<span class="built_in">key</span>.getBytes(), value);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将序列值回退一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> getSeqBack(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; connection.decr(<span class="built_in">key</span>.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加浮点数的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double incrFloat(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">double</span> incrBy) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Double&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.incrBy(<span class="built_in">key</span>.getBytes(), incrBy);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hash集合里取得</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> hashGet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.<span class="built_in">get</span>(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T hashGet(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue((<span class="keyword">String</span>) hashGet(hName, <span class="built_in">key</span>), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否缓存了数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key 数据KEY</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> exists(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.exists(<span class="built_in">key</span>.getBytes());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash集合中是否缓存了数据, 有问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param hName</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hashExists(<span class="keyword">String</span> hName, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsHash.hasKey(hName, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否缓存在指定的集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return 判断是否缓存了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isMember(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.isMember(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param string</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delKey(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        redisTemplate.delete(<span class="built_in">key</span>);</span><br><span class="line"><span class="comment">//        redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; connection.del(key.getBytes()));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param seconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> expire(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line">        redisTemplate.expire(<span class="built_in">key</span>, seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出set中所有成员</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param setName</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="keyword">String</span>&gt; listSet(<span class="keyword">String</span> setName) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsSet.members(setName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向set中追加一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param setName</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> appendSet(<span class="keyword">String</span> setName, <span class="keyword">String</span> value) &#123;</span><br><span class="line">        valOpsSet.<span class="built_in">add</span>(setName, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向sorted set中追加一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param score</span></span><br><span class="line"><span class="comment">     * @param member</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> saveToSortedset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member, Double score) &#123;</span><br><span class="line">        valOpsZSet.<span class="built_in">add</span>(<span class="built_in">key</span>, member, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据成员名取得sorted sort分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key    set名</span></span><br><span class="line"><span class="comment">     * @param member 成员名</span></span><br><span class="line"><span class="comment">     * @return 分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double getMemberScore(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.score(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从sorted set删除一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param member</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delFromSortedset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        valOpsZSet.remove(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序列出sorted set包括分数的set列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key   set名</span></span><br><span class="line"><span class="comment">     * @param start 开始位置</span></span><br><span class="line"><span class="comment">     * @param end   结束位置</span></span><br><span class="line"><span class="comment">     * @return 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;<span class="keyword">String</span>&gt;&gt; listSortedsetRev(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.reverseRangeWithScores(<span class="built_in">key</span>, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序取得sorted sort排名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key    set名</span></span><br><span class="line"><span class="comment">     * @param member 成员名</span></span><br><span class="line"><span class="comment">     * @return 排名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long getReverseRank(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> member) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsZSet.reverseRank(<span class="built_in">key</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hashmap中删除一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> delFromMap(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line">        valOpsHash.delete(<span class="built_in">key</span>, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将所有指定的值插入到存于 key 的列表的头部。如果 key 不存在，那么在进行 push 操作前会创建一个空列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Long lpush(<span class="keyword">String</span> <span class="built_in">key</span>, T value) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPush(<span class="built_in">key</span>, mapper.writeValueAsString(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当 key 已经存在并且存着一个 list 的时候，在这个 key 下面的 list 的头部插入 value。 与 LPUSH 相反，当</span></span><br><span class="line"><span class="comment">     * key 不存在的时候不会进行任何操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Long lpushx(<span class="keyword">String</span> <span class="built_in">key</span>, T value) <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPushIfPresent(<span class="built_in">key</span>, mapper.writeValueAsString(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 里的list的长度。 如果 key 不存在，那么就被看作是空list，并且返回长度为 0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long llen(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.<span class="built_in">size</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 的列表里指定范围内的元素。 start 和 end</span></span><br><span class="line"><span class="comment">     * 偏移量都是基于0的下标，即list的第一个元素下标是0（list的表头），第二个元素下标是1，以此类推</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; lrange(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.range(<span class="built_in">key</span>, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并且返回 key 对应的 list 的第一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> lpop(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> valOpsList.leftPop(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie工具类"><a href="#Cookie工具类" class="headerlink" title="Cookie工具类"></a><strong>Cookie工具类</strong></h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookiesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CookiesUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名字获取cookie</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @param name    cookie名字</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie getCookieByName(HttpServletRequest request, <span class="keyword">String</span> name) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = ReadCookieMap(request);</span><br><span class="line">        <span class="keyword">if</span> (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            Cookie cookie = (Cookie) cookieMap.<span class="keyword">get</span>(name);</span><br><span class="line">            <span class="keyword">return</span> cookie;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getValueByName(HttpServletRequest request, <span class="keyword">String</span> name) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = ReadCookieMap(request);</span><br><span class="line">        <span class="keyword">if</span> (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            Cookie cookie = (Cookie) cookieMap.<span class="keyword">get</span>(name);</span><br><span class="line">            <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将cookie封装到Map里面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, Cookie&gt; ReadCookieMap(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Cookie&gt; cookieMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;<span class="keyword">String</span>, Cookie&gt;();</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : <span class="type">cookies</span>) &#123;</span><br><span class="line">                cookieMap.put(cookie.getName(), cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存Cookies</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param response servlet请求</span></span><br><span class="line"><span class="comment">     * @param value    保存值</span></span><br><span class="line"><span class="comment">     * @author jxf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletResponse setCookie(<span class="keyword">String</span> domain,<span class="keyword">String</span> path,HttpServletResponse response, <span class="keyword">String</span> name, <span class="keyword">String</span> value, int time) &#123;</span><br><span class="line">        <span class="comment">// new一个Cookie对象,键值对为参数</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> <span class="type">Cookie</span>(name, value);</span><br><span class="line">        <span class="comment">// tomcat下多应用共享</span></span><br><span class="line">        cookie.setPath(path);</span><br><span class="line">        <span class="comment">// 如果cookie的值中含有中文时，需要对cookie进行编码，不然会产生乱码</span></span><br><span class="line">        cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">        cookie.setSecure(<span class="literal">true</span>);</span><br><span class="line">        cookie.setDomain(domain);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URLEncoder.encode(value, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"转码失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        cookie.setMaxAge(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动覆盖添加SameSite-Strict</span></span><br><span class="line">        Collection&lt;<span class="keyword">String</span>&gt; headers = response.getHeaders(HttpHeaders.SET_COOKIE);</span><br><span class="line">        boolean firstHeader = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// there can be multiple Set-Cookie attributes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> header : <span class="type">headers</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstHeader) &#123;</span><br><span class="line">                response.setHeader(HttpHeaders.SET_COOKIE, <span class="keyword">String</span>.format(<span class="string">"%s; %s"</span>, header, <span class="string">"SameSite=Strict"</span>));</span><br><span class="line">                firstHeader = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.addHeader(HttpHeaders.SET_COOKIE, <span class="keyword">String</span>.format(<span class="string">"%s; %s"</span>, header, <span class="string">"SameSite=Strict"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将Cookie添加到Response中,使之生效</span></span><br><span class="line">        <span class="comment">// addCookie后，如果已经存在相同名字的cookie，则最新的覆盖旧的cookie</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a><strong>配置类</strong></h2><h3 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a><strong>跨域访问</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 1允许任何域名使用</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 2允许任何头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 3允许任何方法（post、get等）</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, buildConfig()); <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Https配置"><a href="#Https配置" class="headerlink" title="Https配置"></a><strong>Https配置</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port.http&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPortHttps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection securityCollection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                securityCollection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(securityCollection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(redirectConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">redirectConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(Http11NioProtocol.class.getName());</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(serverPortHttp);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(serverPortHttps);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisCache配置"><a href="#RedisCache配置" class="headerlink" title="RedisCache配置"></a><strong>RedisCache配置</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.host&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">String</span> host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.port&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.timeout&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.jedis.pool.max-idle&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.jedis.pool.max-wait&#125;</span>"</span>)</span><br><span class="line">    private long maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"<span class="subst">$&#123;spring.redis.password&#125;</span>"</span>)</span><br><span class="line">    private <span class="built_in">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"cacheRedisTemplate"</span>)</span><br><span class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; cacheRedisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; template = <span class="keyword">new</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">        <span class="comment">// 设置redis连接Factory</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// Redis value 序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;?&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class="built_in">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// Redis key 序列化</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RestTemplate配置"><a href="#RestTemplate配置" class="headerlink" title="RestTemplate配置"></a><strong>RestTemplate配置</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    public RestTemplate restTemplate(ClientHttpRequestFactory <span class="keyword">factory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">factory</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    public ClientHttpRequestFactory simpleClientHttpRequestFactory() &#123;</span><br><span class="line">        SimpleClientHttpRequestFactory <span class="keyword">factory</span> = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        <span class="comment">//读取超时时间为单位为60秒</span></span><br><span class="line">        <span class="keyword">factory</span>.setReadTimeout(<span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="comment">//连接超时时间设置为10秒</span></span><br><span class="line">        <span class="keyword">factory</span>.setConnectTimeout(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">factory</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro配置"><a href="#Shiro配置" class="headerlink" title="Shiro配置"></a><strong>Shiro配置</strong></h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> class ShiroConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator creator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">// 强制使用cglib，防止重复代理和可能引起代理出错的问题</span></span><br><span class="line">        creator.setProxyTargetClass(true);</span><br><span class="line">        <span class="built_in">return</span> creator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager manager) &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(manager);</span><br><span class="line">        <span class="built_in">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置核心安全事务管理器</span></span><br><span class="line">    @Bean(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager securityManager(AuthRealm authRealm, ShiroCacheManager shiroCacheManager) &#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(authRealm);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 关闭shiro自带的session，详情见文档</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultSubjectDAO subjectDAO = <span class="keyword">new</span> DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = <span class="keyword">new</span> DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        manager.setCacheManager(shiroCacheManager);</span><br><span class="line">        <span class="built_in">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意不要加@Bean注解，不然spring会自动注册成filter</span></span><br><span class="line">    <span class="keyword">protected</span> JWTFilter createJWTFilter(JWTProperties jwtProp, ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> JWTFilter(jwtProp, syncCacheService,jedisUtils);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SystemLogoutFilter createSystemLogoutFilter(JWTProperties jwtProp,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> SystemLogoutFilter(jedisUtils,jwtProp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(<span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager,</span><br><span class="line">                                              JWTProperties jwtProp,</span><br><span class="line">                                              ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 添加jwt过滤器</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Filter&gt; filterMap = bean.getFilters();</span><br><span class="line">        filterMap.<span class="built_in">put</span>(<span class="string">"jwt"</span>, createJWTFilter(jwtProp, syncCacheService,jedisUtils));</span><br><span class="line">        filterMap.<span class="built_in">put</span>(<span class="string">"logout"</span>, createSystemLogoutFilter(jwtProp,jedisUtils));</span><br><span class="line">        bean.setFilters(filterMap);</span><br><span class="line">        <span class="comment">//配置登录的url和登录成功的url</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login/loginWeb"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/401"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置访问权限拦截器</span></span><br><span class="line">        LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//anon表示可以匿名访问,authc表示需要认证才可以访问</span></span><br><span class="line">        <span class="comment">//表示需要认证才可以访问</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/wxRegister"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/sendVerificationCode"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/user/createNewUser"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        <span class="comment">//login不做认证，noSessionCreation的作用是用户在操作session时会抛异常</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/loginWeb"</span>, <span class="string">"noSessionCreation,anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/login/loginWx"</span>, <span class="string">"noSessionCreation,anon"</span>);</span><br><span class="line">        <span class="comment">//做用户认证，permissive参数的作用是当token无效时也允许请求访问，不会返回鉴权未通过的错误</span></span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/layui/*.*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/js/common/jquery.js"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/js/login.js"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/css/common.css"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/css/login.css"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/**"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/*.*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterChainDefinitionMap.<span class="built_in">put</span>(<span class="string">"/401"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro相关类"><a href="#Shiro相关类" class="headerlink" title="Shiro相关类"></a><strong>Shiro相关类</strong></h2><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><strong>Realm</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 域，Shiro从从Realm获取安全数据（如用户、角色、权限）</span></span><br><span class="line"><span class="comment"> * 就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；</span></span><br><span class="line"><span class="comment"> * 也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；</span></span><br><span class="line"><span class="comment"> * 可以把Realm看成DataSource，即安全数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AuthRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> logger = <span class="type">Logger</span>.getLogger(<span class="type">AuthRealm</span>.<span class="keyword">class</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RoleService</span> roleService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AccessService</span> accessService;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JedisUtils</span> jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    public <span class="type">AuthRealm</span>(<span class="type">UserService</span> userService, <span class="type">RoleService</span> roleService, <span class="type">AccessService</span> accessService, <span class="type">JedisUtils</span> jedisUtils) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.roleService = roleService;</span><br><span class="line">        <span class="keyword">this</span>.accessService = accessService;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个唯一的Realm名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">String</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断此Realm是否支持此Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public boolean supports(<span class="type">AuthenticationToken</span> token) &#123;</span><br><span class="line">        <span class="keyword">return</span> token instanceof <span class="type">JWTToken</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Token获取认证信息,默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="type">AuthenticationToken</span> auth) <span class="keyword">throws</span> <span class="type">AuthenticationException</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"doGetAuthenticationInfo()获取认证信息进行校验"</span>);</span><br><span class="line">        <span class="type">String</span> token = (<span class="type">String</span>) auth.getCredentials();</span><br><span class="line">        <span class="comment">// 解密获得userId，用于和数据库进行对比</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(token, <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"token invalid"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户信息是否存在</span></span><br><span class="line">        <span class="type">User</span> user = userService.findByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"User didn't existed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Token检验</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="type">JWTUtil</span>.verify(token)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"Username or password error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">UnsupportedEncodingException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SimpleAuthenticationInfo</span>(token, token, <span class="string">"my_realm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">AuthorizationInfo</span> doGetAuthorizationInfo(<span class="type">PrincipalCollection</span> principals) &#123;</span><br><span class="line">        logger.info(<span class="string">"doGetAuthorizationInfo()获取角色权限等信息进行校验"</span>);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> authorizationInfo = <span class="keyword">new</span> <span class="type">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(principals.toString(), <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="type">User</span> user = userService.findByUserId(userId);</span><br><span class="line">        <span class="comment">//获取用户角色信息</span></span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">UserRole</span>&gt; roleList = userService.findAllUserRoleByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">UserRole</span> role : roleList) &#123;</span><br><span class="line">            authorizationInfo.addRole(role.getRole().getRoleName());</span><br><span class="line">            <span class="comment">//获取角色权限信息</span></span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">RoleAccess</span>&gt; accessList = roleService.findAllRoleAccessByRoleId(role.getRole().getRoleId());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">RoleAccess</span> access : accessList) &#123;</span><br><span class="line">                authorizationInfo.addStringPermission(access.getAccess().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a><strong>Token</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTProperties"><a href="#JWTProperties" class="headerlink" title="JWTProperties"></a><strong>JWTProperties</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"token"</span>)</span><br><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class JWTProperties &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期时间，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">tokenExpireTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新令牌时间，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">refreshCheckTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro缓存有效期，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">Integer</span> <span class="selector-tag">shiroCacheExpireTime</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token加密密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">secretKey</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTFilter"><a href="#JWTFilter" class="headerlink" title="JWTFilter"></a><strong>JWTFilter</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JWTFilter <span class="keyword">extends</span> BasicHttpAuthenticationFilter &#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">//ShiroConfig声明的LifecycleBeanPostProcessor会因为鸡蛋问题导致JWTProperties注入null</span></span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> ISyncCacheService syncCacheService;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.cookie-domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> adress;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.cookie-path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JWTFilter() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JWTFilter(JWTProperties jwtProperties, ISyncCacheService syncCacheService,JedisUtils jedisUtils) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">        <span class="keyword">this</span>.syncCacheService = syncCacheService;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对跨域提供支持，流程顺序：preHandle-&gt;isAccessAllowed-&gt;isLoginAttempt-&gt;executeLogin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-control-Allow-Origin"</span>, httpServletRequest.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST,OPTIONS,PUT,DELETE"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, httpServletRequest.getHeader(<span class="string">"Access-Control-Request-Headers"</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示是否允许访问</span></span><br><span class="line"><span class="comment">     * 这里我们详细说明下为什么最终返回的都是true，即允许访问</span></span><br><span class="line"><span class="comment">     * 例如我们提供一个地址 GET /article</span></span><br><span class="line"><span class="comment">     * 登入用户和游客看到的内容是不同的</span></span><br><span class="line"><span class="comment">     * 如果在这里返回了false，请求会被直接拦截，用户看不到任何东西</span></span><br><span class="line"><span class="comment">     * 所以我们在这里返回true，Controller中可以通过 subject.isAuthenticated() 来判断用户是否登入</span></span><br><span class="line"><span class="comment">     * 如果有些资源只有登入用户才能访问，我们只需要在方法上面加上 @RequiresAuthentication 注解即可</span></span><br><span class="line"><span class="comment">     * 但是这样做有一个缺点，就是不能够对GET,POST等请求进行分别过滤鉴权(因为我们重写了官方的方法)，但实际上对应用影响不大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> isAccessAllowed(ServletRequest request, ServletResponse response, <span class="built_in">Object</span> mappedValue) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">                <span class="comment">//无登陆信息，进行登陆验证</span></span><br><span class="line">                logger.info(<span class="string">"无登陆信息，进行登陆验证-&gt;executeLogin"</span>);</span><br><span class="line">                <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//检查已有登陆信息</span></span><br><span class="line">                logger.info(<span class="string">"已有登陆信息，数据校验"</span>);</span><br><span class="line">                <span class="built_in">String</span> authorization = CookiesUtil.getCookieByName((HttpServletRequest)request,SecurityConsts.REQUEST_AUTH_HEADER.getValue()).getValue();</span><br><span class="line">                <span class="keyword">if</span>(!JWTUtil.verify(authorization))&#123;</span><br><span class="line">                    logger.info(<span class="string">"登陆信息未通过校验，请重新登陆"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"登陆信息未通过校验，请重新登陆"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!getSubject(request, response).isAuthenticated())&#123;</span><br><span class="line">                        logger.info(<span class="string">"登陆信息已失效，请重新登陆"</span>);</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"登陆信息已失效，请重新登陆"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//获取账号</span></span><br><span class="line">                        <span class="built_in">String</span> userId = JWTUtil.getClaim(authorization, SecurityConsts.USERID.getValue());</span><br><span class="line">                        <span class="comment">//判断是否在登出状态</span></span><br><span class="line">                        <span class="built_in">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + userId;</span><br><span class="line">                        <span class="keyword">if</span>(jedisUtils.exists(tokenKey))&#123;</span><br><span class="line">                            logger.info(<span class="string">"登陆验证：此账户已登出，请重新登陆"</span>);</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">"此账户已登出，请重新登陆"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WebUtils.issueRedirect(request,response,<span class="string">"/"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">                logger.info(ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否想要登入</span></span><br><span class="line"><span class="comment">     * 只有用户携带令牌时才考虑进行登陆验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> isLoginAttempt(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        Cookie cookie = CookiesUtil.getCookieByName(req,SecurityConsts.REQUEST_AUTH_HEADER.getValue());</span><br><span class="line">        <span class="keyword">return</span> cookie != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">boolean</span> executeLogin(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">//从Cookie获取token</span></span><br><span class="line">        Cookie cookie = CookiesUtil.getCookieByName(httpServletRequest,SecurityConsts.REQUEST_AUTH_HEADER.getValue());</span><br><span class="line">        <span class="built_in">String</span> authorization;</span><br><span class="line">        <span class="keyword">if</span>(cookie == <span class="literal">null</span>)&#123;</span><br><span class="line">            logger.info(<span class="string">"无登陆数据"</span>);</span><br><span class="line">            authorization = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            authorization = cookie.getValue();</span><br><span class="line">            logger.info(<span class="string">"已有登陆数据："</span> + authorization);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取账号</span></span><br><span class="line">        <span class="built_in">String</span> userId = JWTUtil.getClaim(authorization, SecurityConsts.USERID.getValue());</span><br><span class="line">        <span class="comment">//判断是否仍在登出状态</span></span><br><span class="line">        <span class="built_in">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + userId;</span><br><span class="line">        <span class="keyword">if</span>(jedisUtils.exists(tokenKey))&#123;</span><br><span class="line">            logger.info(<span class="string">"登陆验证：登录后清除登出缓存信息"</span>);</span><br><span class="line">            jedisUtils.delKey(tokenKey);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            JWTToken token = <span class="keyword">new</span> JWTToken(authorization);</span><br><span class="line">            <span class="comment">//提交给realm进行登入，如果错误他会抛出异常并被捕获</span></span><br><span class="line">            getSubject(request, response).login(token);</span><br><span class="line">            <span class="comment">//检查是否需要更换token，需要则重新颁发</span></span><br><span class="line">            <span class="keyword">this</span>.refreshTokenIfNeed(userId, authorization, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有抛出异常则代表登入成功，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否需要,刷新Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @param authorization</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">void</span> refreshTokenIfNeed(<span class="built_in">String</span> userId, <span class="built_in">String</span> authorization, ServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        Long currentTimeMillis = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//检查刷新规则</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.refreshCheck(authorization, currentTimeMillis)) &#123;</span><br><span class="line">            <span class="built_in">String</span> lockName = SecurityConsts.PREFIX_SHIRO_REFRESH_TOKEN.getValue() + userId;</span><br><span class="line">            <span class="built_in">boolean</span> b = syncCacheService.getLock(lockName, Constants.ExpireTime.ONE_HOUR);</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                logger.info(<span class="built_in">String</span>.format(<span class="string">"为账户%s颁发新的令牌"</span>, userId));</span><br><span class="line">                <span class="built_in">String</span> newToken = JWTUtil.sign(userId, <span class="built_in">String</span>.valueOf(currentTimeMillis));</span><br><span class="line">                HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">                CookiesUtil.setCookie(adress,path,httpServletResponse,SecurityConsts.REQUEST_AUTH_HEADER.getValue(),newToken,<span class="number">3600</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            syncCacheService.releaseLock(lockName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否需要更新Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param authorization</span></span><br><span class="line"><span class="comment">     * @param currentTimeMillis</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> refreshCheck(<span class="built_in">String</span> authorization, Long currentTimeMillis) &#123;</span><br><span class="line">        <span class="built_in">String</span> tokenMillis = JWTUtil.getClaim(authorization, SecurityConsts.CURRENT_TIME_MILLIS.getValue());</span><br><span class="line">        <span class="keyword">if</span> (tokenMillis != <span class="literal">null</span> &amp;&amp; currentTimeMillis - Long.parseLong(tokenMillis) &gt; (jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">1000</span>L)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将非法请求跳转到 /401</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">void</span> response401(ServletRequest req, ServletResponse resp, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            httpServletResponse.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            httpServletResponse.setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/401"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SystemLogoutFilter"><a href="#SystemLogoutFilter" class="headerlink" title="SystemLogoutFilter"></a><strong>SystemLogoutFilter</strong></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SystemLogoutFilter</span> <span class="keyword">extends</span> <span class="title">LogoutFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">SystemLogoutFilter</span>.<span class="keyword">class</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JedisUtils</span> jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JWTProperties</span> jwtProperties;</span><br><span class="line"></span><br><span class="line">    public <span class="type">SystemLogoutFilter</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">SystemLogoutFilter</span>(<span class="type">JedisUtils</span> jedisUtils, <span class="type">JWTProperties</span> jwtProperties) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当服务器收到一个可预知的请求时，首先在redis中查询是否存在当前JWT</span></span><br><span class="line">    <span class="comment">// 如果存在返回false，否则在redis中插入当前jwt，这条数据的失效时间为当前jwt的剩余有效时间。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> boolean preHandle(<span class="type">ServletRequest</span> request, <span class="type">ServletResponse</span> response)&#123;</span><br><span class="line">        <span class="type">Subject</span> subject = getSubject(request, response);</span><br><span class="line">        subject.logout();</span><br><span class="line">        <span class="comment">//添加到Redis</span></span><br><span class="line">        <span class="type">String</span> userId = <span class="type">JWTUtil</span>.getClaim(<span class="type">CookiesUtil</span>.getValueByName((<span class="type">HttpServletRequest</span>)request,<span class="type">SecurityConsts</span>.<span class="type">REQUEST_AUTH_HEADER</span>.getValue()), <span class="type">SecurityConsts</span>.<span class="type">USERID</span>.getValue());</span><br><span class="line">        <span class="keyword">if</span>(userId != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> currentTimeMillis = <span class="type">String</span>.valueOf(<span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            <span class="comment">//新增登出缓存，并清除刷新缓存</span></span><br><span class="line">            <span class="type">String</span> tokenKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_LOGOUT_TOKEN</span>.getValue() + userId;</span><br><span class="line">            <span class="keyword">if</span> (!jedisUtils.exists(tokenKey)) &#123;</span><br><span class="line">                logger.info(<span class="string">"登出：新增登出标记到缓存"</span>);</span><br><span class="line">                jedisUtils.saveString(tokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">                <span class="comment">//清除RefreshToken缓存的时间戳</span></span><br><span class="line">                <span class="type">String</span> refreshTokenKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_REFRESH_TOKEN</span>.getValue() + userId;</span><br><span class="line">                <span class="keyword">if</span> (jedisUtils.exists(refreshTokenKey)) &#123;</span><br><span class="line">                    logger.info(<span class="string">"登出：清除RefreshToken缓存的时间戳"</span>);</span><br><span class="line">                    jedisUtils.delKey(refreshTokenKey);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 清除可能存在的Shiro权限信息缓存</span></span><br><span class="line">                <span class="type">String</span> cacheKey = <span class="type">SecurityConsts</span>.<span class="type">PREFIX_SHIRO_CACHE</span>.getValue() + userId;</span><br><span class="line">                <span class="keyword">if</span> (jedisUtils.exists(cacheKey)) &#123;</span><br><span class="line">                    jedisUtils.delKey(cacheKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不执行后续的过滤器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroCache"><a href="#ShiroCache" class="headerlink" title="ShiroCache"></a><strong>ShiroCache</strong></h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class ShiroCache&lt;K, V&gt; implements Cache&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ShiroCache(JedisUtils jedisUtils, JWTProperties jwtProperties) &#123;</span><br><span class="line">        <span class="keyword">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempKey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">Object</span> result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tempKey)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = jedisUtils.getObject(tempKey, <span class="keyword">Object</span>.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> put(<span class="keyword">Object</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempLey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisUtils.saveObject(tempLey, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws CacheException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> remove(<span class="keyword">Object</span> <span class="built_in">key</span>) <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        <span class="keyword">String</span> tempKey = <span class="keyword">this</span>.getKey(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tempKey)) &#123;</span><br><span class="line">            jedisUtils.delKey(tempKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Set&lt;K&gt; keys() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; values() &#123;</span><br><span class="line">        Set keys = <span class="keyword">this</span>.keys();</span><br><span class="line">        List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">Object</span> <span class="built_in">key</span> : keys) &#123;</span><br><span class="line">                values.<span class="built_in">add</span>((V) jedisUtils.getObject(<span class="keyword">this</span>.getKey(<span class="built_in">key</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存的key名称获取为shiro:cache:account</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param key</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> getKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityConsts.PREFIX_SHIRO_CACHE + JWTUtil.getClaim(<span class="built_in">key</span>.toString(), SecurityConsts.USERID.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroCacheManager"><a href="#ShiroCacheManager" class="headerlink" title="ShiroCacheManager"></a><strong>ShiroCacheManager</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisUtils jedisUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JWTProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String s)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroCache&lt;K, V&gt;(jedisUtils, jwtProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a><strong>实体类</strong></h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a><strong>User</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_USER"</span>)</span><br><span class="line">public class User &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    private String userId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">openid</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">pwd</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">userName</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">nickName</span>;</span><br><span class="line">    ...</span><br><span class="line">    @<span class="selector-tag">JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">java</span><span class="selector-class">.sql</span><span class="selector-class">.Timestamp</span> <span class="selector-tag">regTime</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">address</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">phone</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">imgUrl</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a><strong>Role</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_ROLE"</span>)</span><br><span class="line">public class Role &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">    <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ROLE"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">    private Integer roleId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">roleName</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">Boolean</span> <span class="selector-tag">status</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserRole"><a href="#UserRole" class="headerlink" title="UserRole"></a><strong>UserRole</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"T_XXXX_USER_ROLE"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = <span class="meta-string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(name = <span class="meta-string">"idSequence"</span>, sequenceName = <span class="meta-string">"USER_ROLE"</span>, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Integer urId;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"roleId"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JSONField(format = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserRole(String userId, Role role) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">        <span class="keyword">this</span>.createTime = new Timestamp(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a><strong>Access</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Getter</span></span><br><span class="line"><span class="variable">@Setter</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_XXXX_ACCESS"</span>)</span><br><span class="line">public class Access &#123;</span><br><span class="line">    <span class="variable">@Id</span></span><br><span class="line">    <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">    <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ACCESS"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">    private Integer accessId;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">title</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">code</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">Boolean</span> <span class="selector-tag">status</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleAccess"><a href="#RoleAccess" class="headerlink" title="RoleAccess"></a><strong>RoleAccess</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"T_XXXX_ROLE_ACCESS"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleAccess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = <span class="meta-string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(name = <span class="meta-string">"idSequence"</span>, sequenceName = <span class="meta-string">"ROLE_ACCESS"</span>, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Integer raId;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"accessId"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Access access;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="meta">@JSONField(format = <span class="meta-string">"yyyy-MM-dd HH:mm:ss"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RoleAccess(Integer roleId, Access access) &#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">        <span class="keyword">this</span>.access = access;</span><br><span class="line">        <span class="keyword">this</span>.createTime = new Timestamp(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a><strong>Menu</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_WXMP_MENU"</span>)</span><br><span class="line">public class Menu &#123;</span><br><span class="line">  <span class="variable">@Id</span></span><br><span class="line">  <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">  <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"MENU"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">  private Integer menuId;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">menuName</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleMenu"><a href="#RoleMenu" class="headerlink" title="RoleMenu"></a><strong>RoleMenu</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@Entity</span></span><br><span class="line"><span class="variable">@Table</span>(name = <span class="string">"T_WXMP_ROLE_MENU"</span>)</span><br><span class="line">public class RoleMenu &#123;</span><br><span class="line">  <span class="variable">@Id</span></span><br><span class="line">  <span class="variable">@GeneratedValue</span>(generator = <span class="string">"idSequence"</span>, strategy = GenerationType.SEQUENCE)</span><br><span class="line">  <span class="variable">@SequenceGenerator</span>(name = <span class="string">"idSequence"</span>, sequenceName = <span class="string">"ROLE_MENU"</span>, allocationSize = <span class="number">1</span>)</span><br><span class="line">  private Integer rmId;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">Integer</span> <span class="selector-tag">roleId</span>;</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">Integer</span> <span class="selector-tag">menuId</span>;</span><br><span class="line">  @<span class="selector-tag">DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  @<span class="selector-tag">JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  @<span class="selector-tag">JSONField</span>(format = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">  <span class="selector-tag">private</span> <span class="selector-tag">java</span><span class="selector-class">.sql</span><span class="selector-class">.Timestamp</span> <span class="selector-tag">createTime</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a><strong>持久层</strong></h2><p>省略…</p><h2 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a><strong>服务层</strong></h2><h3 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a><strong>UserService</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId   用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">login</span><span class="params">(String userId, String password, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * JWT设置失效时间为当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">logout</span><span class="params">(HttpServletRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">loginWx</span><span class="params">(String code,HttpServletResponse response)</span><span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">sendVerificationCode</span><span class="params">(String phone)</span><span class="keyword">throws</span> ClientException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 验证用户信息和验证码，并注册用户，成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wxRegisterVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">wxRegister</span><span class="params">(WxRegisterVo wxRegisterVo, HttpServletResponse response)</span><span class="keyword">throws</span> ClientException,UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">createNewUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPassword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">changePwd</span><span class="params">(UserPasswordVo userPassword)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * 性别，昵称等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickName 昵称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address      地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgUrl      头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">changeUserInfo</span><span class="params">(String userId,String nickName, String address,String imgUrl)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRoleVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseVo <span class="title">updateUserRoles</span><span class="params">(UserRoleVo userRoleVo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户ID角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;UserRole&gt; <span class="title">findAllUserRoleByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询其所有权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;RoleAccess&gt; <span class="title">findAllRoleAccessByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">UserService</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(UserServiceImpl.class);</span><br><span class="line">    <span class="keyword">private</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> UserRoleRepository userRoleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;wx.applet.appid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> appid;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;wx.applet.appsecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> appSecret;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.product&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> product;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dyalMsgapi.aliyuncs.com</span></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> domain;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.accessKeySecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> accessKeySecret;</span><br><span class="line"></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.accessKeyId&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> accessKeyId;</span><br><span class="line">    @Value(<span class="string">"$&#123;server.cookie-domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> adress;</span><br><span class="line">    @Value(<span class="string">"$&#123;server.cookie-path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> path;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//短信API产品名称（短信产品名固定，无需修改）</span></span><br><span class="line">    @Value(<span class="string">"$&#123;alMsg.endpoint&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> endpoint;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">public</span> UserServiceImpl(JWTProperties jwtProperties, JedisUtils jedisUtils, RestTemplate restTemplate, UserRepository userRepository, UserRoleRepository userRoleRepository, RoleRepository roleRepository, RoleAccessRepository roleAccessRepository, StudentRepository studentRepository) &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">        <span class="built_in">this</span>.jedisUtils = jedisUtils;</span><br><span class="line">        <span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="built_in">this</span>.userRoleRepository = userRoleRepository;</span><br><span class="line">        <span class="built_in">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="built_in">this</span>.roleAccessRepository = roleAccessRepository;</span><br><span class="line">        <span class="built_in">this</span>.studentRepository = studentRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo login(<span class="keyword">String</span> userId, <span class="keyword">String</span> password, HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        User user = userRepository.findByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用户不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_NOT_EXIST.getCode(), CodeEnums.USER_NOT_EXIST.getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//微信账号直接提示账号不存在</span></span><br><span class="line">            <span class="keyword">if</span> (user.getOpenid() == <span class="literal">null</span> || <span class="string">""</span>.equals(user.getOpenid())) &#123;</span><br><span class="line">                <span class="comment">//WEB登陆</span></span><br><span class="line">                logger.info(<span class="string">"WEB登陆"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//微信登陆</span></span><br><span class="line">                logger.info(<span class="string">"微信登陆"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"当前用户只能登陆微信端"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//密码校验</span></span><br><span class="line">            logger.info(<span class="string">"持久："</span> + user.getPwd());</span><br><span class="line">            logger.info(<span class="string">"输入："</span> + password);</span><br><span class="line">            <span class="keyword">if</span> (!ShiroKit.checkMd5Password(password, SecurityConsts.LOGIN_SALT.getValue(), user.getPwd())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_PWD_FAIL.getCode(), CodeEnums.USER_PWD_FAIL.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * 退出则存用户信息到redis，再次访问时判断，若有数据则表示已失效</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo logout(HttpServletRequest request)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWx(<span class="keyword">String</span> code,HttpServletResponse response)throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">String</span> resultJson = code2Session(code);</span><br><span class="line">        Code2SessionResponse sessionResponse = JSON.parseObject(resultJson, Code2SessionResponse.class);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"0"</span>.equals(sessionResponse.getErrcode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"微信验证失败: "</span> + sessionResponse.getErrmsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从本地数据库中查找用户是否存在</span></span><br><span class="line">            User user = userRepository.findByOpenid(sessionResponse.getOpenid());</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.WX_ACCOUNT_NOT_REGEISTER.getCode(), CodeEnums.WX_ACCOUNT_NOT_REGEISTER.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg(),user,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信登录</span></span><br><span class="line"><span class="comment">     * 流程：小程序-&gt;开发服务器-&gt;微信接口</span></span><br><span class="line"><span class="comment">     * 根据小程序提供的code调用微信code2session接口获取openid和session_key</span></span><br><span class="line"><span class="comment">     * 再根据openid和session_key自定义登陆态(Token)，返回Token</span></span><br><span class="line"><span class="comment">     * 1. 调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</span></span><br><span class="line"><span class="comment">     * 2. 调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BaseVo sendVerificationCode(<span class="keyword">String</span> phone) throws ClientException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        <span class="comment">//初始化ascClient,暂时不支持多region（请勿修改）</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId,</span><br><span class="line">                accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> <span class="type">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> <span class="type">SendSmsRequest</span>();</span><br><span class="line">        <span class="comment">//使用post提交</span></span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line">        <span class="comment">//必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式；发送国际/港澳台消息时，接收号码格式为国际区号+号码，如“85200000000”</span></span><br><span class="line">        request.setPhoneNumbers(phone);</span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(<span class="string">"趣学厦门"</span>);</span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到，发送国际/港澳台消息时，请使用国际/港澳台短信模版</span></span><br><span class="line">        request.setTemplateCode(<span class="string">"SMS_168726524"</span>);</span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        <span class="comment">//友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"code\":\""</span> + createRandomNum(<span class="number">6</span>) + <span class="string">"\"&#125;"</span>);</span><br><span class="line">        <span class="comment">//可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line"><span class="comment">//        request.setOutId("yourOutId");</span></span><br><span class="line">        <span class="comment">//请求失败这里会抛ClientException异常</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        logger.info(sendSmsResponse.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(sendSmsResponse.getCode() != <span class="literal">null</span> &amp;&amp; <span class="string">"OK"</span>.equals(sendSmsResponse.getCode())) &#123;</span><br><span class="line">            <span class="comment">//请求成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ApiException</span>(<span class="number">1</span>,<span class="string">"短信推送失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * @param wxRegisterVo</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo wxRegister(WxRegisterVo wxRegisterVo, HttpServletResponse response) throws ClientException,UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">if</span>(wxRegisterVo.getVerCode().length() != <span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.MSG_FORMAT_ERR.getCode(), CodeEnums.MSG_FORMAT_ERR.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查验证码是否一致</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> <span class="type">DefaultAcsClient</span>(profile);</span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        QuerySendDetailsRequest request = <span class="keyword">new</span> <span class="type">QuerySendDetailsRequest</span>();</span><br><span class="line">        <span class="comment">//必填-号码</span></span><br><span class="line">        request.setPhoneNumber(wxRegisterVo.getPhone());</span><br><span class="line">        <span class="comment">//可选-流水号</span></span><br><span class="line"><span class="comment">//        request.setBizId("111");</span></span><br><span class="line">        <span class="comment">//必填-发送日期 支持30天内记录查询，格式yyyyMMdd</span></span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        request.setSendDate(ft.format(<span class="keyword">new</span> <span class="type">Date</span>()));</span><br><span class="line">        <span class="comment">//必填-页大小</span></span><br><span class="line">        request.setPageSize(<span class="number">10</span>L);</span><br><span class="line">        <span class="comment">//必填-当前页码从1开始计数</span></span><br><span class="line">        request.setCurrentPage(<span class="number">1</span>L);</span><br><span class="line">        QuerySendDetailsResponse querySendDetailsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        logger.info(querySendDetailsResponse.getCode());</span><br><span class="line">        logger.info(querySendDetailsResponse.getMessage());</span><br><span class="line">        boolean checkVerCode = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(QuerySendDetailsResponse.SmsSendDetailDTO dto : <span class="type">querySendDetailsResponse</span>.getSmsSendDetailDTOs())&#123;</span><br><span class="line">            logger.info(<span class="string">"verCode="</span> + wxRegisterVo.getVerCode());</span><br><span class="line">            logger.info(<span class="string">"Content="</span> + dto.getContent());</span><br><span class="line">            logger.info(<span class="string">"ErrCode="</span> + dto.getErrCode());</span><br><span class="line">            logger.info(<span class="string">"OutId="</span> + dto.getOutId());</span><br><span class="line">            logger.info(<span class="string">"PhoneNum="</span> + dto.getPhoneNum());</span><br><span class="line">            logger.info(<span class="string">"ReceiveDate="</span> + dto.getReceiveDate());</span><br><span class="line">            logger.info(<span class="string">"SendDate="</span> + dto.getSendDate());</span><br><span class="line">            logger.info(<span class="string">"SendStatus="</span> + dto.getSendStatus());</span><br><span class="line">            logger.info(<span class="string">"Template="</span> + dto.getTemplateCode());</span><br><span class="line">            <span class="keyword">if</span>(dto.getContent().contains(wxRegisterVo.getVerCode()))&#123;</span><br><span class="line">                checkVerCode = <span class="literal">true</span>;</span><br><span class="line">                logger.info(<span class="string">"验证码确认成功"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(checkVerCode)&#123;</span><br><span class="line">            <span class="comment">//根据userId和userName获取用户信息</span></span><br><span class="line">            Student student = studentRepository.findByStudentIdAndStudentName(wxRegisterVo.getUserId(),wxRegisterVo.getUserName());</span><br><span class="line">            <span class="keyword">if</span>(student == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"未找到所给学生信息，请确认学号姓名是否输入正确"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用微信code2session接口获取openid和session_key</span></span><br><span class="line">            <span class="keyword">String</span> resultJson = code2Session(wxRegisterVo.getCode());</span><br><span class="line">            Code2SessionResponse sessionResponse = JSON.parseObject(resultJson, Code2SessionResponse.class);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"0"</span>.equals(sessionResponse.getErrcode())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AuthenticationException</span>(<span class="string">"微信验证失败: "</span> + sessionResponse.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> openid = sessionResponse.getOpenid();</span><br><span class="line">                <span class="comment">//从本地数据库中查找用户是否存在</span></span><br><span class="line">                User user = userRepository.findByOpenid(openid);</span><br><span class="line">                <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"此微信账号已有绑定用户"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    user = userRepository.findByUserId(wxRegisterVo.getUserId());</span><br><span class="line">                    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                        user.register(openid, wxRegisterVo.getNickName(),wxRegisterVo.getAddress(), wxRegisterVo.getPhone());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        user = <span class="keyword">new</span> <span class="type">User</span>(wxRegisterVo.getUserId(), openid, wxRegisterVo.getUserName(),</span><br><span class="line">                                wxRegisterVo.getNickName(),</span><br><span class="line">                                student.getSchool(), student.getDepartment(),student.getMajor(),</span><br><span class="line">                                student.getClassName(), student.getGrade(), student.getSex(),</span><br><span class="line">                                wxRegisterVo.getAddress(), wxRegisterVo.getPhone());</span><br><span class="line">                    &#125;</span><br><span class="line">                    user = userRepository.saveAndFlush(user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//登陆</span></span><br><span class="line">                <span class="built_in">this</span>.loginSuccess(user.getUserId(),user, response);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.TOKEN_CHECK_SUCCESS.getCode(), CodeEnums.TOKEN_CHECK_SUCCESS.getMsg(),user,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//短信验证失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.MSG_CHECK_ERR.getCode(), CodeEnums.MSG_CHECK_ERR.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo createNewUser(User user) &#123;</span><br><span class="line">        User existUser = userRepository.findByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">if</span> (existUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//账号已存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>, <span class="string">"账号已经存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getOpenid() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//微信</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>, <span class="string">"调用微信端接口异常"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//保存密码</span></span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(user.getPwd())) &#123;</span><br><span class="line">                    user.setPwd(ShiroKit.md5(user.getPwd(), SecurityConsts.LOGIN_SALT.getValue()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//检查密码规范</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">2</span>, <span class="string">"密码不符合规范"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            userRepository.saveAndFlush(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码</span></span><br><span class="line"><span class="comment">     * @param userPassword</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo changePwd(UserPasswordVo userPassword) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(userPassword.getPassword()) &amp;&amp; !StringUtils.isEmpty(userPassword.getNewPassword())) &#123;</span><br><span class="line">            User user = userRepository.findById(userPassword.getUserId()).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            <span class="keyword">String</span> encodePassword = ShiroKit.md5(userPassword.getPassword(), SecurityConsts.LOGIN_SALT.getValue());</span><br><span class="line">            <span class="keyword">if</span> (user.getPwd().equals(encodePassword)) &#123;</span><br><span class="line">                user.setPwd(ShiroKit.md5(userPassword.getNewPassword(), SecurityConsts.LOGIN_SALT.getValue()));</span><br><span class="line">                userRepository.saveAndFlush(user);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//原始密码错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.USER_OLD_PWD_ERR.getCode(), CodeEnums.USER_OLD_PWD_ERR.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.PARAMETERS_MISSING.getCode(), CodeEnums.PARAMETERS_MISSING.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * 性别，昵称等</span></span><br><span class="line"><span class="comment">     * @return BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo changeUserInfo(<span class="keyword">String</span> userId,<span class="keyword">String</span> nickName, <span class="keyword">String</span> address,<span class="keyword">String</span> imgUrl) &#123;</span><br><span class="line">        User user = userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">        user.setNickName(nickName);</span><br><span class="line">        user.setAddress(address);</span><br><span class="line">        user.setImgUrl(imgUrl);</span><br><span class="line">        userRepository.saveAndFlush(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户角色</span></span><br><span class="line"><span class="comment">     * @param userRoleVo</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized BaseVo updateUserRoles(UserRoleVo userRoleVo)&#123;</span><br><span class="line">        <span class="comment">//清除用户所有角色</span></span><br><span class="line">        userRoleRepository.deleteAllByUserId(userRoleVo.getUserId());</span><br><span class="line">        List&lt;UserRole&gt; userRoles = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Role&gt; roles = roleRepository.findAllByRoleIdIn(userRoleVo.getRoleIds());</span><br><span class="line">        <span class="keyword">if</span>(roles.size() != userRoleVo.getRoleIds().size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(<span class="number">1</span>,<span class="string">"角色数据异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Role role : <span class="type">roles</span>)&#123;</span><br><span class="line">            UserRole userRole = <span class="keyword">new</span> <span class="type">UserRole</span>(userRoleVo.getUserId(),role);</span><br><span class="line">            userRoles.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        userRoleRepository.saveAll(userRoles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaseVo</span>(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),userRoles,userRoles.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> User findByUserId(<span class="keyword">String</span> userId) &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户ID角色</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> List&lt;UserRole&gt; findAllUserRoleByUserId(<span class="keyword">String</span> userId) &#123;</span><br><span class="line">        <span class="keyword">return</span> userRoleRepository.findAllByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询其所有权限</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> List&lt;RoleAccess&gt; findAllRoleAccessByUserId(<span class="keyword">String</span> userId)&#123;</span><br><span class="line">        User user = userRepository.findById(userId).orElseThrow(DBDataNotFoundException:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br><span class="line">        List&lt;UserRole&gt; userRoles = userRoleRepository.findAllByUserId(userId);</span><br><span class="line">        List&lt;Integer&gt; roleIds = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userRoles.forEach(userRole -&gt; roleIds.add(userRole.getRole().getRoleId()));</span><br><span class="line">        List&lt;RoleAccess&gt; roleAccesses = roleAccessRepository.findAllByRoleIdIn(roleIds);</span><br><span class="line">        <span class="keyword">return</span> roleAccesses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数查询用户数据</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Page&lt;User&gt; findAllUserByParm(<span class="keyword">String</span> school, <span class="keyword">String</span> department, <span class="keyword">String</span> grade, <span class="keyword">String</span> major, <span class="keyword">String</span> clazz, <span class="keyword">String</span> sex, <span class="keyword">String</span> studentId, <span class="keyword">String</span> studentName, int page, int limit)&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAllUserByParm(school, department, grade, major, clazz, sex, studentId, studentName,</span><br><span class="line">                PageRequest.of(page - <span class="number">1</span>, limit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信的 code2session 接口 获取微信用户信息</span></span><br><span class="line"><span class="comment">     * 官方说明 : https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/code2Session.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> code2Session(<span class="keyword">String</span> jsCode) &#123;</span><br><span class="line">        <span class="keyword">String</span> code2SessionUrl = <span class="string">"https://api.weixin.qq.com/sns/jscode2session?appid="</span> + appid + <span class="string">"&amp;secret="</span> + appSecret + <span class="string">"&amp;js_code="</span> + jsCode + <span class="string">"&amp;grant_type=authorization_code"</span>;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(code2SessionUrl, <span class="keyword">String</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数</span></span><br><span class="line"><span class="comment">     * @param num 位数</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> createRandomNum(int num)&#123;</span><br><span class="line">        <span class="keyword">String</span> randomNumStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; num;i ++)&#123;</span><br><span class="line">            int randomNum = (int)(Math.random() * <span class="number">10</span>);</span><br><span class="line">            randomNumStr += randomNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomNumStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录更新</span></span><br><span class="line"><span class="comment">     * @param account</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void loginSuccess(<span class="keyword">String</span> account,User user,HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">String</span> currentTimeMillis = <span class="keyword">String</span>.valueOf(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 清除可能存在的Shiro权限信息缓存</span></span><br><span class="line">        <span class="keyword">String</span> tokenKey = SecurityConsts.PREFIX_SHIRO_CACHE.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(tokenKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：清除可能存在的Shiro权限信息缓存"</span>);</span><br><span class="line">            jedisUtils.delKey(tokenKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除可能存在的登出信息缓存</span></span><br><span class="line">        <span class="keyword">String</span> logoutKey = SecurityConsts.PREFIX_SHIRO_LOGOUT_TOKEN.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(logoutKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：清除可能存在的登出信息缓存"</span>);</span><br><span class="line">            jedisUtils.delKey(logoutKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新RefreshToken缓存的时间戳</span></span><br><span class="line">        <span class="keyword">String</span> refreshTokenKey = SecurityConsts.PREFIX_SHIRO_REFRESH_TOKEN.getValue() + account;</span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.exists(refreshTokenKey)) &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：更新RefreshToken缓存的时间戳"</span>);</span><br><span class="line">            jedisUtils.saveString(refreshTokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"登陆：新增RefreshToken缓存的时间戳"</span>);</span><br><span class="line">            jedisUtils.saveString(refreshTokenKey, currentTimeMillis, jwtProperties.getRefreshCheckTime() * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        <span class="keyword">String</span> token = JWTUtil.sign(account, currentTimeMillis);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        subject.login(<span class="keyword">new</span> <span class="type">JWTToken</span>(token));</span><br><span class="line">        logger.info(<span class="string">"登陆时subject.isAuthenticated()："</span> + subject.isAuthenticated());</span><br><span class="line">        response = CookiesUtil.setCookie(adress,path,response,SecurityConsts.REQUEST_AUTH_HEADER.getValue(), token,<span class="number">3600</span>);</span><br><span class="line">        Cookie cookieUserName = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"userName"</span>, user.getUserName());</span><br><span class="line">        Cookie cookieImg = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"imgUrl"</span>, user.getImgUrl());</span><br><span class="line">        response.addCookie(cookieUserName);</span><br><span class="line">        response.addCookie(cookieImg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoleService"><a href="#RoleService" class="headerlink" title="RoleService"></a><strong>RoleService</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo createNewRole(Role role);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改角色权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleAccessVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo updateRoleAccess(RoleAccessVo roleAccessVo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Role&gt; findAllRole();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID查询角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Role findRoleById(Integer roleId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID获取权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;RoleAccess&gt; findAllRoleAccessByRoleId(Integer roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="keyword">private</span> AccessRepository accessRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">(RoleRepository roleRepository, RoleAccessRepository roleAccessRepository, AccessRepository accessRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="keyword">this</span>.roleAccessRepository = roleAccessRepository;</span><br><span class="line">        <span class="keyword">this</span>.accessRepository = accessRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">createNewRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        role = roleRepository.saveAndFlush(role);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),role,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改角色权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleAccessVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">updateRoleAccess</span><span class="params">(RoleAccessVo roleAccessVo)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先清除角色所有权限</span></span><br><span class="line">        roleAccessRepository.deleteAllByRoleId(roleAccessVo.getRoleId());</span><br><span class="line"></span><br><span class="line">        List&lt;RoleAccess&gt; roleAccesses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Access&gt; accesses = accessRepository.findAllByAccessIdIn(roleAccessVo.getAccessIds());</span><br><span class="line">        <span class="keyword">if</span>(accesses.size() != roleAccessVo.getAccessIds().size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(<span class="number">1</span>,<span class="string">"权限数据异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Access access : accesses)&#123;</span><br><span class="line">            RoleAccess roleAccess = <span class="keyword">new</span> RoleAccess(roleAccessVo.getRoleId(),access);</span><br><span class="line">            roleAccesses.add(roleAccess);</span><br><span class="line">        &#125;</span><br><span class="line">        roleAccessRepository.saveAll(roleAccesses);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),roleAccesses,roleAccesses.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findAllRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID查询角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">findRoleById</span><span class="params">(Integer roleId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findById(roleId).orElseThrow(DBDataNotFoundException::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据角色ID获取权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RoleAccess&gt; <span class="title">findAllRoleAccessByRoleId</span><span class="params">(Integer roleId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleAccessRepository.findAllByRoleId(roleId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AccessService"><a href="#AccessService" class="headerlink" title="AccessService"></a><strong>AccessService</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseVo createNewAccess(Access access);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Access&gt; findAllAccess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccessService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleAccessRepository roleAccessRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessRepository accessRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseVo <span class="title">createNewAccess</span><span class="params">(Access access)</span></span>&#123;</span><br><span class="line">        access = accessRepository.saveAndFlush(access);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseVo(CodeEnums.SUCCESS.getCode(), CodeEnums.SUCCESS.getMsg(),access,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Access&gt; <span class="title">findAllAccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SyncCacheService"><a href="#SyncCacheService" class="headerlink" title="SyncCacheService"></a><strong>SyncCacheService</strong></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ISyncCacheService &#123;</span><br><span class="line">    Boolean getLock(String lockName, int expireTime);</span><br><span class="line"></span><br><span class="line">    Boolean releaseLock(String lockName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISyncCacheService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SyncCacheServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JWTProperties jwtProperties;</span><br><span class="line">    @Autowired</span><br><span class="line">    JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis中key的锁，乐观锁实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 锁的失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Boolean</span> getLock(String lockName, <span class="keyword">int</span> expireTime) &#123;</span><br><span class="line">        <span class="keyword">Boolean</span> result = <span class="keyword">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isExist = jedisUtils.exists(lockName);</span><br><span class="line">            <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">                jedisUtils.getSeqNext(lockName, <span class="number">0</span>);</span><br><span class="line">                jedisUtils.expire(lockName, expireTime &lt;= <span class="number">0</span> ? Constants.ExpireTime.ONE_HOUR : expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> reVal = jedisUtils.getSeqNext(lockName, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span>l == reVal) &#123;</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                result = <span class="keyword">Boolean</span>.<span class="keyword">TRUE</span>;</span><br><span class="line">                LOGGER.info(<span class="string">"获取redis锁:"</span> + lockName + <span class="string">",成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"获取redis锁:"</span> + lockName + <span class="string">",失败"</span> + reVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"获取redis锁失败:"</span> + lockName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁，直接删除key(直接删除会导致任务重复执行，所以释放锁机制设为超时30s)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Boolean</span> releaseLock(String lockName) &#123;</span><br><span class="line">        <span class="keyword">Boolean</span> result = <span class="keyword">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisUtils.expire(lockName, Constants.ExpireTime.TEN_SEC);</span><br><span class="line">            LOGGER.info(<span class="string">"释放redis锁:"</span> + lockName + <span class="string">",成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"释放redis锁失败:"</span> + lockName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a><strong>控制层</strong></h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a><strong>LoginController</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/login"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="title">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆接口</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/loginWeb"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWeb(HttpServletResponse response,</span><br><span class="line">                        <span class="meta">@RequestParam(<span class="meta-string">"userId"</span>)</span> String userId,</span><br><span class="line">                        <span class="meta">@RequestParam(<span class="meta-string">"password"</span>)</span> String password) throws UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.login(userId, password, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出当前用户登陆</span></span><br><span class="line"><span class="comment">     * JWT设置失效时间为当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/logout"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo logout(HttpServletRequest request)&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.logout(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/sendVerificationCode"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo sendVerificationCode(String phone) throws ClientException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sendVerificationCode(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信注册</span></span><br><span class="line"><span class="comment">     * 验证用户信息和验证码，并注册用户，成功后登陆用户信息，返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wxRegisterVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/wxRegister"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo wxRegister(WxRegisterVo wxRegisterVo, HttpServletResponse response) throws ClientException,UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.wxRegister(wxRegisterVo,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wx登录验证ticket，生成本地token，由本地来管理token生命周期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/loginWx"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo loginWx(String code,HttpServletResponse response) throws UnsupportedEncodingException &#123;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">""</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.loginWx(code,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取登录用户基础信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/userInfo"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo userInfo() &#123;</span><br><span class="line">        User user = userService.findByUserId(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()));</span><br><span class="line"><span class="comment">//        //查询菜单</span></span><br><span class="line"><span class="comment">//        List&lt;ResourceNode&gt; menus = resourceService.findByUserId(user.getId());</span></span><br><span class="line"><span class="comment">//        //查询权限</span></span><br><span class="line"><span class="comment">//        List&lt;Object&gt; authorityList = authorityService.findByUserId(user.getId());</span></span><br><span class="line">        <span class="keyword">return</span> response(user, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有人都可以访问，但是用户与游客看到的内容不同</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/article"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo article() &#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are already logged in"</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are guest"</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登入的用户才可以进行访问</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_auth"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requireAuth() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are authenticated"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//admin的角色用户才可以登入</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_role"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(<span class="meta-string">"admin"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requireRole() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are visiting require_role"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拥有view和edit权限的用户才可以访问</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/require_permission"</span>)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(logical = Logical.AND, value = &#123;<span class="meta-string">"view"</span>, <span class="meta-string">"edit"</span>&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo requirePermission() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">200</span>, <span class="string">"You are visiting permission require edit,view"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = <span class="meta-string">"/401"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> BaseVo unauthorized() &#123;</span><br><span class="line">        <span class="keyword">return</span> new BaseVo(<span class="number">401</span>, <span class="string">"Unauthorized"</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a><strong>UserController</strong></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 新增用户</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/createNewUser"</span>)</span><br><span class="line">    public BaseVo createNewUser(<span class="built_in">String</span> userId,</span><br><span class="line">                                <span class="meta">@RequestParam</span>(required = <span class="keyword">false</span>) <span class="built_in">String</span> openid,</span><br><span class="line">                                <span class="built_in">String</span> pwd,</span><br><span class="line">                                <span class="built_in">String</span> userName,</span><br><span class="line">                                <span class="built_in">String</span> nickName,</span><br><span class="line">                                <span class="built_in">String</span> school,</span><br><span class="line">                                <span class="built_in">String</span> department,</span><br><span class="line">                                <span class="built_in">String</span> major,</span><br><span class="line">                                <span class="built_in">String</span> classname,</span><br><span class="line">                                Integer grade,</span><br><span class="line">                                <span class="built_in">String</span> sex,</span><br><span class="line">                                <span class="built_in">String</span> address,</span><br><span class="line">                                <span class="built_in">String</span> phone,</span><br><span class="line">                                <span class="built_in">String</span> imgUrl) &#123;</span><br><span class="line">        java.sql.Timestamp regTime = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> userService.createNewUser(<span class="keyword">new</span> User(userId,</span><br><span class="line">                openid,</span><br><span class="line">                pwd,</span><br><span class="line">                userName,</span><br><span class="line">                nickName,</span><br><span class="line">                school,</span><br><span class="line">                department,</span><br><span class="line">                major,</span><br><span class="line">                classname,</span><br><span class="line">                grade,</span><br><span class="line">                sex,</span><br><span class="line">                regTime,</span><br><span class="line">                address,</span><br><span class="line">                phone,</span><br><span class="line">                imgUrl));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 修改用户密码</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param userPassword</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/changePwd"</span>)</span><br><span class="line">    public BaseVo changePwd(UserPasswordVo userPassword) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.changePwd(userPassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 修改用户信息</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 性别，昵称等</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/changeUserInfo"</span>)</span><br><span class="line">    public BaseVo changeUserInfo(<span class="built_in">String</span> nickName, <span class="built_in">String</span> address,<span class="built_in">String</span> imgUrl) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.changeUserInfo(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()),</span><br><span class="line">                nickName, address,imgUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 根据用户ID查询其所有权限</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAllRoleAccessByUserId"</span>, method = RequestMethod.POST)</span><br><span class="line">    public BaseVo findAllRoleAccessByUserId() &#123;</span><br><span class="line">        User user = userService.findByUserId(JWTUtil.getClaim(SecurityUtils.getSubject().getPrincipal().toString(), SecurityConsts.USERID.getValue()));</span><br><span class="line">        <span class="built_in">List</span>&lt;RoleAccess&gt; views = userService.findAllRoleAccessByUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">return</span> response(views, views.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * 根据参数查询用户数据</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @return</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAllUserByParm"</span>, method = RequestMethod.POST)</span><br><span class="line">    public BaseVo findAllUserByParm(<span class="built_in">String</span> school, <span class="built_in">String</span> department, <span class="built_in">String</span> grade, <span class="built_in">String</span> major, <span class="built_in">String</span> className, <span class="built_in">String</span> sex, <span class="built_in">String</span> studentId, <span class="built_in">String</span> studentName, <span class="built_in">int</span> page, <span class="built_in">int</span> limit) &#123;</span><br><span class="line">        Page&lt;User&gt; views = userService.findAllUserByParm(school,department,grade,major,className,sex,studentId,studentName,page,limit);</span><br><span class="line">        <span class="comment">//当前结果合集</span></span><br><span class="line">        <span class="built_in">List</span>&lt;User&gt; content = views.getContent();</span><br><span class="line">        <span class="comment">//结果总行数</span></span><br><span class="line">        <span class="built_in">int</span> size = (<span class="built_in">int</span>) views.getTotalElements();</span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">        content.forEach(apply-&gt;jsonArray.add(apply));</span><br><span class="line">        <span class="keyword">return</span> response(jsonArray, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      通过案例简单整理一下Web项目的用户权限系统设计思路。
    
    </summary>
    
      <category term="技术文档" scheme="http://linyishui.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="http://linyishui.top/tags/java/"/>
    
      <category term="spring" scheme="http://linyishui.top/tags/spring/"/>
    
      <category term="shiro" scheme="http://linyishui.top/tags/shiro/"/>
    
      <category term="redis" scheme="http://linyishui.top/tags/redis/"/>
    
      <category term="jwt" scheme="http://linyishui.top/tags/jwt/"/>
    
  </entry>
  
</feed>
